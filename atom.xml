<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>毁于随</title>
  
  <subtitle>命在于自造，运在于自改，福在于自求，境在于自选，友在于自择，习在于自改，悟在于自通，凡事在于自己。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.oxysun.cn/"/>
  <updated>2018-06-17T13:07:11.584Z</updated>
  <id>http://www.oxysun.cn/</id>
  
  <author>
    <name>毁于随</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux touch总结</title>
    <link href="http://www.oxysun.cn/2018/06/14/Linux/daily-command-touch/"/>
    <id>http://www.oxysun.cn/2018/06/14/Linux/daily-command-touch/</id>
    <published>2018-06-14T05:12:08.000Z</published>
    <updated>2018-06-17T13:07:11.584Z</updated>
    
    <content type="html"><![CDATA[<p>touch命令用来创建文件，也可以更改和修改一个文件的时间戳。Linux中的每个文件都与时间戳相关联，而且每个文件都存储上次访问时间，上次修改时间，上次更改时间的信息。因为，无论何时创建一个新文件，访问或者修改现有文件，时间戳都会被自动更新。</p><a id="more"></a><h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>touch命令用来修改文件的时间戳。</p><p><img src="http://p9xqnn501.bkt.clouddn.com/touch/touch-man.png" alt=""></p><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>touch [选项] [参数]</code></p><h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><p>Linux中的文件有三个时间：</p><ul><li>access time（atime）：访问时间，对一次文件的内容就会更新。例如cat，vi/vim，cp，touch命令。</li><li>modification time（mtime）：修改时间，对文件内容修改一次就会更新。例如touch，vi/vim命令。</li><li>status time（ctime）：状态改动时间。通过chmod/chown/chgrp等命令更改一次文件属性，通过touch准确地修改时间等，这个时间就会更新。例如mv，touch，chmod/chown/chgrp，vi/vim等命令。</li></ul><p>touch命令选项：</p><ul><li>-a，只改变访问时间。</li><li>-c，如果文件不存在，那就不创建。</li><li>-d，更新访问时间和修改时间。</li><li>-m，只改变修改时间。</li><li>-r，将参照文件ref_file相应的时间戳作为指定文件file时间戳的新值。</li><li>-t，用指定的时间创建文件，格式是[[CC]YY]MMDDhhmm[.SS]。CCYY的范围在1969~2068之内。SS为秒数，范围在0~61之间，这样可以处理闰秒。由于系统的限制，早于1970年1月1日的时间是错误的。</li></ul><h3 id="示例：1-创建空文件"><a href="#示例：1-创建空文件" class="headerlink" title="示例：1. 创建空文件"></a>示例：1. 创建空文件</h3><p>描述：若文件不存在，使用touch命令可以轻松地创建一个空文件，或是创建多个。如果文件已存在，那么文件的3个时间：修改时间（mtime）、状态改动时间（ctime）和访问时间（atime）都会被更新为当前时间。stat命令可以查看文件时间。<br>命令：<br><code>touch my_one</code><br><code>stat my_one</code><br><code>touch my_one my_two my_three</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/touch/touch.png" alt=""></p><h3 id="示例：2-只改变文件的修改时间（mtime）和状态改动时间（ctime）"><a href="#示例：2-只改变文件的修改时间（mtime）和状态改动时间（ctime）" class="headerlink" title="示例：2. 只改变文件的修改时间（mtime）和状态改动时间（ctime）"></a>示例：2. 只改变文件的修改时间（mtime）和状态改动时间（ctime）</h3><p>描述：只改变my_three文件的修改时间为当前时间，同时状态改动时间会在命令执行后更新为当前时间。这个操作并不需要修改文件内容。-m选项只更改文件的修改时间。<br>命令：<code>touch -m my_three</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/touch/touch-m.png" alt=""></p><h3 id="示例：3-只改变文件访问时间（atime）和状态改动时间（ctime）"><a href="#示例：3-只改变文件访问时间（atime）和状态改动时间（ctime）" class="headerlink" title="示例：3. 只改变文件访问时间（atime）和状态改动时间（ctime）"></a>示例：3. 只改变文件访问时间（atime）和状态改动时间（ctime）</h3><p>描述：只改变my_three文件的访问时间为当前时间，同时状态改动时间会在命令执行后更新为当前时间。如果文件不存在，会创建新的空文件。-a选项只更改文件的访问时间。<br>命令：<code>touch -a my_three</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/touch/touch-a.png" alt=""></p><h3 id="示例：4-指定文件的访问时间和修改时间"><a href="#示例：4-指定文件的访问时间和修改时间" class="headerlink" title="示例：4. 指定文件的访问时间和修改时间"></a>示例：4. 指定文件的访问时间和修改时间</h3><p>描述：同时设置文件的访问时间和修改时间为指定时间，同时会更新状态改变时间为当前命令执行后的时间。如果文件不存在，会创建新的空文件。-d选项同时改变文件的访问时间和修改时间。<br>命令：<code>touch -d &quot;2018-06-14 14:00:00&quot; my_three</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/touch/touch-d.png" alt=""></p><p>描述：将my_three文件的访问时间和修改时间修改成两天前。touch还支持像date命令那样修改文件的时间。<br>命令：<code>touch -d &quot;2 days ago&quot; my_three</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/touch/touch-d-date.png" alt=""></p><h3 id="示例：5-避免创建新文件"><a href="#示例：5-避免创建新文件" class="headerlink" title="示例：5. 避免创建新文件"></a>示例：5. 避免创建新文件</h3><p>描述：更新atime、ctime、mtime，如果文件不存在，-c选项不会创建新的文件。<br>命令：<code>touch -c leena</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/touch/touch-a.png" alt=""></p><h3 id="示例：6-使用另一个文件的时间戳"><a href="#示例：6-使用另一个文件的时间戳" class="headerlink" title="示例：6. 使用另一个文件的时间戳"></a>示例：6. 使用另一个文件的时间戳</h3><p>描述：-r选项将my_three的时间戳作为my_two文件的时间戳的新值，这两个文件有相同的时间戳。<br>命令：<code>touch -r my_three my_two</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/touch/touch-r.png" alt=""></p><h3 id="示例：7-使用指定的时间戳创建一个文件"><a href="#示例：7-使用指定的时间戳创建一个文件" class="headerlink" title="示例：7. 使用指定的时间戳创建一个文件"></a>示例：7. 使用指定的时间戳创建一个文件</h3><p>描述：将my_four文件的时间戳指定为1997年6月14日17点00分55秒。时间格式是[[CC]YY]MMDDhhmm[.SS]。<br>命令：<code>touch -t 199706141700.55 my_four</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/touch/touch-t.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;touch命令用来创建文件，也可以更改和修改一个文件的时间戳。Linux中的每个文件都与时间戳相关联，而且每个文件都存储上次访问时间，上次修改时间，上次更改时间的信息。因为，无论何时创建一个新文件，访问或者修改现有文件，时间戳都会被自动更新。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.oxysun.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux more总结</title>
    <link href="http://www.oxysun.cn/2018/06/13/Linux/daily-command-more/"/>
    <id>http://www.oxysun.cn/2018/06/13/Linux/daily-command-more/</id>
    <published>2018-06-13T06:23:45.000Z</published>
    <updated>2018-06-16T08:07:35.986Z</updated>
    
    <content type="html"><![CDATA[<p>more命令是一个基于vi编辑器文本过滤器，它以全屏幕的方式按页显示文本文件的内容，支持vi中的关键字定位操作。more内置若干快捷键，常用的有H（获得帮助信息），Enter（向下翻滚一行），空格（向下滚动一屏），Q（退出命令）。</p><a id="more"></a><h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>more命令用于一次查看一个或多个文件的内容。它支持通过文件向前和向后导航，主要用于查看文件的内容。它还支持搜索字符串或正则表达式，并在文本编辑器中的当前位置打开文件。<br><img src="http://p9xqnn501.bkt.clouddn.com/more/more-man.png" alt=""></p><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>more [-dlfpcsu] [-num lines] [+/pattern] [+linenum] [file ...]</code></p><h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><ul><li>-num <em>lines</em>：指定每屏显示的行数。</li><li>-d：显示“[press space to continue,’q’ to quit.]”和“[Press ‘h’ for instructions]”。当一个非法的按键按下时，会响铃。</li><li>-c：不进行滚屏操作。每次刷新这个屏幕。</li><li>-s：将多个空行压缩成一行显示。</li><li>-u：禁止下划线。</li><li>+<em>num</em>：从指定数字的行开始显示。</li><li><strong>+/</strong> <em>正则表达式</em>：指定搜索的正则表达式。</li></ul><p>该命令一次显示一屏文本，满屏后停下来，并且在屏幕的底部出现一个提示信息，给出至今己显示的该文件的百分比：–More–（XX%）可以用下列不同的方法对提示做出回答：</p><ul><li><strong>h</strong>, <strong>?</strong>：显示简短的命令汇总帮助信息。</li><li>[<em>k</em>]<strong>SPACE</strong>, [<em>k</em>]<strong>z</strong>：显示文本的下一屏内容。</li><li>[<em>k</em>]<strong>RETURN</strong>：只显示文本的下一行内容。</li><li>[<em>k</em>]<strong>d</strong>,[<em>k</em>]<strong>^D</strong>：滚动k行，初始滚动11行。</li><li><strong>q</strong>, <strong>Q</strong>, <strong>^C</strong>：退出more命令。</li><li>[<em>k</em>]<strong>s</strong>：跳过k行，默认是1行。</li><li>[<em>k</em>]<strong>f</strong>：跳出k个屏幕大小的行，默认是1行。</li><li><strong>b</strong>, <strong>^B</strong>：显示上一屏的内容，默认是1行，仅在浏览文件时起作用，通过管道传送过来的是无效的。</li><li><strong>‘</strong>：返回到上一次搜索开始的位置。</li><li><strong>=</strong>：显示当前行号。</li><li>[<em>k</em>]<strong>/</strong> <em>pattern</em>：进入搜索模式，搜索第k次出现匹配正则表达式的地方，默认是第一次出现的地方。按n键继续搜索下一个匹配项。</li><li>[<em>k</em>]<strong>n</strong>：搜索第k次出现上次匹配上一次正则表达式的地方，默认是1。</li><li><strong>!</strong> <em>command</em>, <strong>:!</strong> <em>command</em>：在子shell中执行命令。</li><li><strong>v</strong>：用$EDITOR指定的编辑器打开当前行。如果未指定，则默认用/usr/bin/vi打开。</li><li><strong>^L</strong>：与-c选项相同，重绘屏幕，不进行滚屏。</li><li>[<em>k</em>]<strong>:n</strong>：如果有多个文件，跳到下一个文件。</li><li>[<em>k</em>]<strong>:p</strong>：如果有多个文件，跳到上一个文件。</li><li><strong>:f</strong>：显示当前文件的名字和行号。</li><li><strong>.</strong>：重复上一次的命令。</li></ul><h2 id="实用示例"><a href="#实用示例" class="headerlink" title="实用示例"></a>实用示例</h2><p><strong>实例：1. 查看文件的内容</strong><br>描述：打开文件第一页放入可用的屏幕大小内。more移动文件的百分比值将在底部的实时显示。<br>命令：<code>more /usr/share/dict/words</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/more/more.png" alt=""></p><p>描述：-3表示每次仅显示3行。-c选项将不进行滚屏操作，而是每次刷新这个屏幕。<br>命令：<code>more -3 -c /usr/share/dict/words</code><br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/more/more-editor.png" alt=""></p><p><strong>实例：2. 显示帮助</strong><br>描述：-d显示[press space to continue,’q’ to quit.]提示。按h键或?键可以显示帮助信息。<br>输出:<br><img src="http://p9xqnn501.bkt.clouddn.com/more/more-h.png" alt=""></p><p><strong>实例：3. 显示行号</strong><br>描述：按=键，可以显示当前的行号。<br>命令：<code>按=键显示行号</code><br>输出:<br><img src="http://p9xqnn501.bkt.clouddn.com/more/more-=.png" alt=""></p><p><strong>实例：4. 查看多个文件的内容</strong><br>描述：如果通过通配符传递给more多个文件的的内容，这将为每个文件打开一个缓冲区并显示第一个文件，并显示一个标题以指示正在显示的文件。<br>命令：<code>more /usr/share/dict/*</code><br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/more/more-n-p.png" alt=""><br>按:n跳到下一个文件的开头。<br><img src="http://p9xqnn501.bkt.clouddn.com/more/more-next-file.png" alt=""><br>按:p要跳回上一个文件的开头。<br><img src="http://p9xqnn501.bkt.clouddn.com/more/more-previous-file.png" alt=""></p><p><strong>实例：5. 查看更多</strong><br>描述：<br>按Space键或者z键可以基于当前屏幕的大小向前移动一页。按回车键向前移动一行，或者在按回车键之前按一个数字n，再按回车键，可以直接向前移动n行。按b或者CTRL-B向后移动一页。</p><p><strong>实例：6. 打开文件并定位到指定的行</strong><br>描述：打开letter文件，并直接定位到第10行J字母位置。<br>命令：<code>more +10 letter</code><br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/more/more-to-line-number.png" alt=""></p><p><strong>实例：7. 打开文件并定位到第一次匹配的位置</strong><br>描述：打开words文件，查找第一次出现以eat开头的单词，并定位到该位置。选项+后跟搜索模式，表示搜索字符串第一次出现的位置，搜索模式应该以/开头，可以是正则表达式。<br>命令：<code>more +/^eat /usr/share/dict/words</code><br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/more/more-wildcard.png" alt=""></p><p><strong>实例：8. 如何在more界面下搜索内容</strong><br>描述：在more界面中，按/键后进入搜索模式，输入要搜索的短语，搜索模式接受正则表达式。例如，在words文件中搜索eat，将搜索短语的实例并滚动到页面第一次出现它的位置。<br>如果要继续查找下一个出现该模式的地方，按n键即可。<br>命令：<code>按/键进入搜索模式</code><br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/more/more-search.png" alt=""></p><p><strong>实例：9. 编辑正在查看的文件</strong><br>在more界面中，按v键后将会打开文本编辑器，默认的文本编辑器是$EDITOR变量指定的。当修改完成保存后退出，将会回到more界面。如果$EDITOR没有指定编辑器，那么默认的vi将会被使用。</p><p>描述：先查看$EDITOR是否已设置，如果没有，在命令行输入export EDITOR=vim可以临时设置。如果要永久设置该变量，请将其添加到.bashrc文件或.zshrc文件中。<br>命令：<br><code>export EDITOR=vim</code><br><code>按v键进入编辑模式</code><br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/more/more-editor.png" alt=""></p><p><strong>实例：9. 命令行搜索正则表达式</strong><br>模式：从words文件中搜索单词中含有eat的位置，每次显示3行，从第10行开始搜索，并加以提示。<br>命令：<code>more -d -3 +/eat +10 /usr/share/dict/words</code><br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/more/more-editor.png" alt=""></p><p><strong>实例：10. 如何退出more</strong><br>描述：按q、Q键或CTRL-C（中断键）退出more界面，并返回到终端提示符。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;more命令是一个基于vi编辑器文本过滤器，它以全屏幕的方式按页显示文本文件的内容，支持vi中的关键字定位操作。more内置若干快捷键，常用的有H（获得帮助信息），Enter（向下翻滚一行），空格（向下滚动一屏），Q（退出命令）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.oxysun.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux tail总结</title>
    <link href="http://www.oxysun.cn/2018/06/13/Linux/daily-command-tail/"/>
    <id>http://www.oxysun.cn/2018/06/13/Linux/daily-command-tail/</id>
    <published>2018-06-13T03:31:58.000Z</published>
    <updated>2018-06-16T08:07:35.989Z</updated>
    
    <content type="html"><![CDATA[<p>tail命令用于显示来自文件或者管道结尾（最新实时）的内容。</p><a id="more"></a><h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>tail命令用于显示来自文件或者管道结尾（最新实时）的内容。默认情况下，tail命令显示文件的最后10行内容。支持多文件处理，在输出每个文件之前都有一个标识文件名的标题。如果未指定文件，或者文件被指定为破折号「-」，则tail命令从标准输入中读取。</p><p><img src="http://p9xqnn501.bkt.clouddn.com/tail/tail-man.png" alt=""></p><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>tail [选项] [文件(s)]</code></p><h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><ul><li>–retry：即是在tail命令启动时，文件不可访问或者文件稍后变得不可访问，都始终尝试打开文件。使用此选项时需要与选项“——follow=name”连用；</li><li>-c<n>或——bytes=<n>：输出文件尾部的N（N为整数）个字节内容；</n></n></li><li>-f&lt;name/descriptor&gt;或；–follow<nameldescript>：显示文件最新追加的内容。“name”表示以文件名的方式监视文件的变化。“-f”与“-fdescriptor”等效；</nameldescript></li><li>-F：与选项“-follow=name”和“–retry”连用时功能相同；</li><li>-n<n>或——line=<n>：输出文件的尾部N（N位数字）行内容。</n></n></li><li>–pid=&lt;进程号&gt;：与“-f”选项连用，当指定的进程号的进程终止后，自动退出tail命令；</li><li>-q或——quiet或——silent：当有多个文件参数时，不输出各个文件名；</li><li>-s&lt;秒数&gt;或——sleep-interal=&lt;秒数&gt;：与“-f”选项连用，指定监视文件变化时间隔的秒数；</li><li>-v或——verbose：当有多个文件参数时，总是输出各个文件名；</li><li>–help：显示指令的帮助信息；</li><li>–version：显示指令的版本信息。tail -f  /usr/local/webserver/tomcat/logs/catalina.out</li></ul><h2 id="实用示例"><a href="#实用示例" class="headerlink" title="实用示例"></a>实用示例</h2><p><strong>实例：1. 查看文件的后十行</strong><br>描述：查看words文件的后10行。默认情况下，tail命令显示文件的最后10行内容。<br>命令：<code>tail letter</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/tail/tail.png" alt=""></p><p><strong>实例：2. 限制要显示的行数</strong><br>描述：显示words文件的最后3行。-n选项限制要显示的行数。<br>命令：<br><code>tail -n 3 letter</code><br><code>tail -3 letter</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/tail/tail-n.png" alt=""></p><p>描述：显示words文件的最后1000行。可以在num后加上后缀，例如：b，KB，K等等。<br>命令：<code>tail -n 1K /usr/share/dict/words</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/tail/tail-n-1K.png" alt=""></p><p><strong>实例：3. 监视日志文件</strong><br>描述：显示words文件（日志文件）的最后10行，并且一直监视它，一旦有新的内容加入，就立即打印出来。-f选项将监视文件的更新。<br>命令：<code>tail -f /usr/share/dict/words</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/tail/tail-f-CTRL-C.png" alt=""><br>注意：tail -f将一直监视着文件，要停止它，按CTRL+C。</p><p><strong>实例：4. 监视日志文件并只输出指定内容</strong><br>描述：tail将监视access.log文件，它将通过管道传送access.log的最后十行和任何新加入到文件中的行给grep。grep读取从tail传送过来的输出，只打印出包含IP地址10.10.10.10的那些行。<br>命令：<code>tail -f access.log | grep 10.10.10.10</code></p><p><strong>实例：5. 监视日志文件并指定刷新间隔</strong><br>描述：tail将监视access.log文件，其监视的时间间隔为5秒。<br>命令：<code>tail -f -s 5 access.log</code></p><p><strong>实例：6. tail -f的代替命令</strong><br>描述：与tail -f效果相同的命令是less。使用下面命令打开文件后，按下shift+f，就与tail -f的效果相同了。<br>命令：<br><code>less /usr/share/dict/words</code><br>press<code>SHIFT+F</code><br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/tail/tail-less.png" alt=""></p><p><strong>实例：7. 限制要显示的字节数</strong><br>描述：显示words文件的最后32个字节。-c选项限制显示的字节数。<br>命令：<code>tail -c 32 /usr/share/dict/words</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/tail/tail-c.png" alt=""></p><p><strong>实例：8. 显示多个文件</strong><br>描述：显示多个文件的前十行，同时标题会显示哪个文件正在显示。<br>命令：<code>tail /usr/share/dict/words /usr/share/dict/propernames</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/tail/tail-multi-file.png" alt=""></p><p><strong>实例：9. 多个文件不显示标题</strong><br>描述：显示多个文件的前3行，不显示正在显示文件的标题。<br>命令：<code>tail -n 3 -q /usr/share/dict/words /usr/share/dict/propernames</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/tail/tail-q.png" alt=""></p><p><strong>实例：10. 与管道配合使用</strong><br>描述：显示/etc/目录下的最近修改的前5个文件或文件夹。tail命令可以接受其他命令通过管道传送过来的信息。<br>命令：<code>cat letter | tail -n 5</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/tail/tail-pipe.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;tail命令用于显示来自文件或者管道结尾（最新实时）的内容。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.oxysun.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux head总结</title>
    <link href="http://www.oxysun.cn/2018/06/13/Linux/daily-command-head/"/>
    <id>http://www.oxysun.cn/2018/06/13/Linux/daily-command-head/</id>
    <published>2018-06-13T02:16:29.000Z</published>
    <updated>2018-06-16T08:07:35.985Z</updated>
    
    <content type="html"><![CDATA[<p>head命令用于显示来自文件或者管道开头的内容。</p><a id="more"></a><h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>head命令用于显示来自文件或者管道开头的内容。默认情况下，head命令显示文件的头10行内容。支持多文件处理，在输出每个文件之前都有一个标识文件名的标题。如果未指定文件，或者文件被指定为破折号「-」，则head命令从标准输入中读取。</p><p><img src="http://p9xqnn501.bkt.clouddn.com/head/head-man.png" alt=""></p><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>head [选项] [文件]</code></p><h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><ul><li>-n, –bytes=[-]<em>num</em>：指定显示头部内容的行数；</li><li>-c, –lines=[-]<em>num</em>：指定显示头部内容的字节数；</li><li>-v, –vervose：总是显示文件名的头信息；</li><li>-q, –quirt, –silent：不显示文件名的头信息。</li><li>–help：显示一段帮助信息后退出。</li><li>–version：打印版本后退出。</li></ul><p>上面选项中的<em>num</em>可能有一个乘数后缀：</p><ul><li>b：512</li><li>kB：1000</li><li>K：1024</li><li>MB：1000*1000</li><li>M：1024*1024</li><li>GB：1000*1000*1000</li><li>G：1024*1024*1024</li></ul><p>还有T，P，E，Z，Y等等。</p><h2 id="实用示例"><a href="#实用示例" class="headerlink" title="实用示例"></a>实用示例</h2><p><strong>实例：1. 查看文件的前十行</strong><br>描述：查看words文件的前10行。默认情况下，head命令显示文件的头10行内容。<br>命令：<code>head /usr/share/dict/words</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/head/head.png" alt=""></p><p><strong>实例：2. 限制要显示的行数</strong><br>描述：显示words文件的前3行。-n选项限制要显示的行数。<br>命令：<br><code>head -n 3 /usr/share/dict/words</code><br><code>head -3 /usr/share/dict/words</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/head/head-n.png" alt=""></p><p>描述：显示words文件的前1000行。可以在num后加上后缀，例如：b，KB，K等等。<br>命令：<code>head -n 1K /usr/share/dict/words</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/head/head-n-1K.png" alt=""></p><p><strong>实例：3. 限制要显示的字节数</strong><br>描述：显示words文件的前16个字节。-c选项限制显示的字节数。<br>命令：<code>head -c 16 /usr/share/dict/words</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/head/head-c.png" alt=""></p><p><strong>实例：4. 显示多个文件</strong><br>描述：显示多个文件的前十行，同时标题会显示哪个文件正在显示。<br>命令：<code>head /usr/share/dict/words /usr/share/dict/propernames</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/head/head-multi-file.png" alt=""></p><p>描述：显示多个文件和标准输入的前三行，同时标题会显示哪个文件正在显示。<br>命令：<code>head -n 3 /usr/share/dict/words /usr/share/dict/propernames -</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/head/head-standard-input.png.png" alt=""></p><p><strong>实例：5. 多个文件不显示标题</strong><br>描述：显示多个文件的前十行，不显示正在显示文件的标题。<br>命令：<code>head -q /usr/share/dict/words /usr/share/dict/propernames</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/head/head-q.png" alt=""></p><p><strong>实例：6. 与管道配合使用</strong><br>描述：显示/etc/目录下的最近修改的前5个文件或文件夹。head命令可以接受其他命令通过管道传送过来的信息。<br>命令：<code>ls -t /etc/ | head -n 5</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/head/head-pipe.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;head命令用于显示来自文件或者管道开头的内容。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.oxysun.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux type总结</title>
    <link href="http://www.oxysun.cn/2018/06/13/Linux/daily-command-type/"/>
    <id>http://www.oxysun.cn/2018/06/13/Linux/daily-command-type/</id>
    <published>2018-06-13T00:56:25.000Z</published>
    <updated>2018-06-16T08:07:35.990Z</updated>
    
    <content type="html"><![CDATA[<p>type命令用于查找Linux命令的信息。顾名思义，它可以轻松找出给定的命令是否是别名、shell内置命令、文件、函数或关键字。另外，也可以找到命令的实际路径。</p><a id="more"></a><h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>type命令用来显示指定命令的类型，可以轻松找出给定的命令是否是别名、shell内置命令、文件、函数或关键字。另外，也可以找到命令的实际路径。</p><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>type [选项] 命令</code></p><h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><ul><li>-t：仅找出 Linux 命令的类型，输出“file”、“alias”或者“builtin”，分别表示给定的指令为“外部指令”、“命令别名”或者“内部指令”。</li><li>-p：如果给出的指令为外部指令，则显示其绝对路径。</li><li>-a：在环境变量“PATH”指定的路径中，显示给定指令的信息，包括命令别名。</li></ul><h2 id="命令类型"><a href="#命令类型" class="headerlink" title="命令类型"></a>命令类型</h2><ul><li>alias：别名。</li><li>keyword：函数，Shell保留字。</li><li>function：函数，Shell函数。</li><li>builtin：内建命令，Shell内建命令。</li><li>file：文件，磁盘文件，外部命令。</li><li>unfound：没有找到。</li></ul><h2 id="实用示例"><a href="#实用示例" class="headerlink" title="实用示例"></a>实用示例</h2><p><strong>实例：1. 仅找出Linux命令的类型</strong><br>描述：-t选项仅找出Linux命令的类型。例如别名，它不显示被别名的内容。如果该命令找不到，你将在终端中看不到任何内容。<br>命令：<br><code>type -t ls</code><br><code>type -t mkdir</code><br><code>type -t pwd</code><br><code>type -t if</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/type/type-t.png" alt=""></p><p><strong>实例：2. 找出命令的绝对路径</strong><br>描述：-p选项可以找出给定Linux命令的绝对路径，这与which命令很像。如果给定的命令是别名、内建命令或是函数，则不会打印任何内容。在这种情况下，-P选项将强制查找路径查找。<br>命令：<br><code>type -p date</code><br><code>type -p cat</code><br><code>type -p pwd</code><br><code>type -P pwd</code><br><code>which pwd</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/type/type-p-P.png" alt=""></p><p><strong>实例：3. 显示命令的所有信息</strong><br>描述：-a选项显示命令的所有信息，包括给定命令的类型及其绝度路径。<br>命令：<br><code>type -a ls</code><br><code>type -a echo</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/type/type-a.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;type命令用于查找Linux命令的信息。顾名思义，它可以轻松找出给定的命令是否是别名、shell内置命令、文件、函数或关键字。另外，也可以找到命令的实际路径。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.oxysun.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux cut总结</title>
    <link href="http://www.oxysun.cn/2018/06/13/Linux/daily-command-cut/"/>
    <id>http://www.oxysun.cn/2018/06/13/Linux/daily-command-cut/</id>
    <published>2018-06-13T00:12:02.000Z</published>
    <updated>2018-06-16T08:07:35.984Z</updated>
    
    <content type="html"><![CDATA[<p>cut命令用来从标准输入或文本文件中剪切列或域。</p><a id="more"></a><h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>cut命令用来显示行中的指定部分，删除文件中指定字段。它也可以用于按字节位置、字符和分隔符来剪切部分行。也可以从CSV等文件格式中剪切数据。</p><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>cut [选项] 文件1 文件2</code></p><h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- -b：仅显示行中指定直接范围的内容。</span><br><span class="line">- -c：仅显示行中指定范围的字符。</span><br><span class="line">- -d：指定字段的分隔符，默认的字段分隔符为“TAB”。</span><br><span class="line">- -f：显示指定字段的内容。</span><br><span class="line">- -n：与“-b”选项连用，不分割多字节字符。</span><br><span class="line">- --complement：补足被选择的字节、字符或字段。</span><br><span class="line">- --out-delimiter=&lt;字段分隔符&gt;：指定输出内容是的字段分割符。</span><br><span class="line">- --help：显示指令的帮助信息。</span><br><span class="line">- --version：显示指令的版本信息。</span><br></pre></td></tr></table></figure><h2 id="实用示例"><a href="#实用示例" class="headerlink" title="实用示例"></a>实用示例</h2><p>cut命令可以将一串字符作为列来显示：</p><ul><li>N-：从第N个字节、字符、字段到结尾。</li><li>N-M：从第N个字节、字符、字段到第M个（包括M在内）字节、字符、字段。</li><li>-M：从第1个字节、字符、字段到第M个（包括M在内）字节、字符、字段。</li></ul><p>上面是表示法，下面的选项分别表示字节、字符、字段：</p><ul><li>-b：字节</li><li>-c：字符</li><li>-f：字段</li></ul><p><strong>实例：1. 按字节位置切割</strong><br>描述：三个例子切割的分别是（1）第2个、（2）第1和第2个、（3）第2和第3个、（4）第1和第2个、（5）第1和第3个字节位置的内容。-b选项通过指定一个字节位置来切出一行的一部分。<br>命令：<br><code>echo &#39;baz&#39; | cut -b 2</code><br><code>echo &#39;baz&#39; | cut -b -2</code><br><code>echo &#39;baz&#39; | cut -b 2-</code><br><code>echo &#39;baz&#39; | cut -b 1-2</code><br><code>echo &#39;baz&#39; | cut -b 1,3</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/cut/cut-b.png" alt=""></p><p><strong>实例：2. 按字符位置切割</strong><br>描述：两个例子切割的分别是第1个和第6个、第1至3个字符位置的内容。-c选项通过指定一个字符位置来切出一行的一部分。<br>命令：<br><code>echo &#39;♣foobar&#39; | cut -c 1,6</code><br><code>echo &#39;♣foobar&#39; | cut -c 1-4</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/cut/cut-c.png" alt=""></p><p><strong>实例：3. 根据分隔符进行剪切</strong><br>描述：两个例子以逗号,作为分隔符进行切割，切割的分别是第1个、第1和第4个字段位置的内容。-d选项指定一个分隔符，-f选项指定选取的字段。<br>命令：<br><code>cut -d , -f 1 names.csv</code><br><code>cut -d , -f 1,4 names.csv</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/cut/cut-d-f.png" alt=""></p><p><strong>实例：4. 提取指定字段之外的列</strong><br>描述：第一个例子选取第1个字符之外的其他字符，第二个例子选取第2个字段之外的列。–complement用于提取指定字段之外的字节、字符或列。<br>命令：<br><code>echo &#39;foo&#39; | cut --complement -c 1</code><br><code>cut -f2 -d, --complement names.csv</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/cut/cut-complement.png" alt=""></p><p><strong>实例：5. 输出分隔符</strong><br>描述：选取第1、3、4个字段，并用空格替换分号后显示。或者使用$’\n’的形式替换为换行。<br>命令：<br><code>echo &#39;how;now;brown;cow&#39; | cut -d &#39;;&#39; -f 1,3,4 --output-delimiter &#39; &#39;</code><br><code>echo &#39;how;now;brown;cow&#39; | cut -d &#39;;&#39; -f 1,3,4 --output-delimiter $&#39;\n&#39;</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/cut/cut-output-delimiter.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;cut命令用来从标准输入或文本文件中剪切列或域。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.oxysun.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux join总结</title>
    <link href="http://www.oxysun.cn/2018/06/12/Linux/daily-command-join/"/>
    <id>http://www.oxysun.cn/2018/06/12/Linux/daily-command-join/</id>
    <published>2018-06-12T08:59:13.000Z</published>
    <updated>2018-06-16T08:07:35.986Z</updated>
    
    <content type="html"><![CDATA[<p>join命令用来将两个分类文本文件的行连在一起。与SQL语言中的join命令相似。</p><a id="more"></a><h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>join命令根据两个分类文本文件的两个相同字段，将两个文件连接起来，结果写入标准输出。默认连接字段是由空格分隔的第一个字段。</p><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>join [选项] 文件1 文件2</code></p><h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><ul><li>-a&lt;1或2&gt;：除了显示原来的输出内容之外，还显示指令文件中没有匹配的行。</li><li>-e&lt;字符串&gt;：若[文件1]与[文件2]中找不到指定的栏位，则在输出中填入选项中的字符串。</li><li>-i或–ignore-case：比较栏位内容时，忽略大小写的差异。</li><li>-o&lt;格式&gt;：按照指定的格式来显示结果。</li><li>-t&lt;字符&gt;：使用栏位的分割字符。</li><li>-v&lt;1或2&gt;：更-a相同，但是只显示文件中没有匹配的行。</li><li>-1&lt;栏位&gt;：连接[文件1]指定的栏位。</li><li>-2&lt;栏位&gt;：连接[文件2]指定的栏位。</li></ul><h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2><p><strong>实例：1. 相同域连接</strong><br>描述：将foodtype.txt和foods.txt两个文件共享的第一个字段作为连接字段，将文件连接起来。<br>命令：<code>join foodtype.txt foods.txt</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/join/join-two-file.png" alt=""></p><p><strong>实例：2. 不同域连接</strong><br>描述：将wine.txt的第二列和reviews.txt的第一列连接起来。也可以使用-j选项，即-j1 2 -j2 1。<br>命令：<code>join -1 2 -2 1 wine.txt reviews.txt</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/join/join-1-2.png" alt=""></p><p><strong>实例：3. 先排序再连接</strong></p><p>描述：如果上述两个文件指定的文件未排序，那么在连接的时候会发生错误。<br>命令：<code>join -1 2 -2 1 wine.txt reviews.txt</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/join/join-sort-file.png" alt=""></p><p>描述：先按wine.txt的第二列排好序，再按reviews的第一列排好序，最后将两个排好序的文件连接起来。<br>命令：<code>join -1 2 -2 1 &lt;(sort -k 2 wine.txt) &lt;(sort reviews.txt)</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/join/join-sort.png" alt=""></p><p><strong>实例：4. 指定字段分隔符</strong><br>描述：将names.csv和transactions.csv两个文件指定分隔符为，号进行连接，-t选项指定字段分隔符。<br>命令：<code>join -1 2 -2 3 -t , names.csv transactions.csv</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/join/join-t.png" alt=""></p><p><strong>实例：5. 指定显示的字段</strong><br>描述：-o选项指定连接的输出格式。<br>命令：<code>join -1 2 -2 3 -t , -o 1.1,1.2,1.3,2.2,2.1 names.csv transactions.csv</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/join/join-o.png" alt=""></p><p><strong>实例：6. 用默认字符串代替未匹配的字段</strong><br>描述：-e选项告诉join当找不到匹配项的时候应该用什么字符串来替换空位，-o选项告诉join哪些不匹配的字段应该被代替。-e只能与-o搭配使用。</p><ul><li>0,1.1,2.2：0表示匹配的关键字段。<ul><li>1.1：表示第一个文件中第一个字段。</li><li>2.2：表示第二个文件中第二个字段。</li></ul></li></ul><p>命令：<br><code>join -a 1 -a 2 -e &quot;NULL&quot; -o 1.1,1.2,2.2 foods.txt foodtype.txt</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/join/join-e.png" alt=""></p><p><strong>实例：7. 显示匹配和不匹配的行</strong><br>描述：既显示成功匹配的行，也显示两个文件中不匹配的所有行。-a选项可选值为1或2，分别表示前后两个文件，意思是显示指定文件中不匹配的行。<br>命令：<br><code>join -a 1 foods.txt foodtype.txt</code><br><code>join -a 2 foods.txt foodtype.txt</code><br><code>join -a 1 -a 2 foods.txt foodtype.txt</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/join/join-a.png" alt=""></p><p><strong>实例：8. 只显示不匹配的行</strong><br>描述：只两个文件中不匹配的所有行。-v选项可选值为1或2，分别表示前后两个文件，意思是只显示指定文件中不匹配的行，将忽略已匹配连接的行。<br>命令：<br><code>join -v 1 -v 2 foods.txt foodtype.txt</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/join/join-v.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;join命令用来将两个分类文本文件的行连在一起。与SQL语言中的join命令相似。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.oxysun.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux route总结</title>
    <link href="http://www.oxysun.cn/2018/06/12/Linux/daily-command-route/"/>
    <id>http://www.oxysun.cn/2018/06/12/Linux/daily-command-route/</id>
    <published>2018-06-12T07:23:32.000Z</published>
    <updated>2018-06-16T08:07:35.988Z</updated>
    
    <content type="html"><![CDATA[<p>route命令用来显示并设置Linux内核中的网络路由表，route命令设置的路由主要是静态路由。要实现两个不同的子网之间的通信，需要一台连接两个网络的路由器，或者同时位于两个网络的网关来实现。</p><a id="more"></a><h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>显示并设置Linux内核中的网络路由表。</p><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p>route [选项] [参数]</p><h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><ul><li>-A：设置地址类型；</li><li>-C：打印将Linux核心的路由缓存；</li><li>-v：详细信息模式；</li><li>-n：不执行DNS反向查找，直接显示数字形式的IP地址；</li><li>-e：netstat格式显示路由表；</li><li>-net：到一个网络的路由表；</li><li>-host：到一个主机的路由表。</li></ul><h2 id="命令选项-1"><a href="#命令选项-1" class="headerlink" title="命令选项"></a>命令选项</h2><ul><li>Add：增加指定的路由记录；</li><li>Del：删除指定的路由记录；</li><li>Target：目的网络或目的主机；</li><li>gw：设置默认网关；</li><li>mss：设置TCP的最大区块长度（MSS），单位MB；</li><li>window：指定通过路由表的TCP连接的TCP窗口大小；</li><li>dev：路由记录所表示的网络接口。</li></ul><h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2><p><strong>实例：1. 显示当前路由</strong><br>描述：在显示当前路由。-n选项不执行DNS反向查找，直接显示数字形式的IP地址。<br>命令：<br><code>route</code><br><code>route -n</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/route/route-n.png" alt=""></p><p>其中Flags为路由标志，标记当前网络节点的状态，Flags标志说明：</p><ul><li>U Up表示此路由当前为启动状态。</li><li>H Host，表示此网关为一主机。</li><li>G Gateway，表示此网关为一路由器。</li><li>R Reinstate Route，使用动态路由重新初始化的路由。</li><li>D Dynamically,此路由是动态性地写入。</li><li>M Modified，此路由是由路由守护程序或导向器动态修改。</li><li>! 表示此路由当前为关闭状态。</li></ul><p><strong>实例：2. 添加网关/设置网关</strong><br>描述：增加一条到达244.0.0.0的路由。<br>命令：<code>route add -net 224.0.0.0 netmask 240.0.0.0 dev eth0</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/route/route-add.png" alt=""></p><p><strong>实例：3. 屏蔽一条路由</strong><br>描述：增加一条屏蔽的路由，目的地址为224.x.x.x将被拒绝。<br>命令：<code>route add -net 224.0.0.0 netmask 240.0.0.0 dev eth0</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/route/route-reject.png" alt=""></p><p><strong>实例：4. 删除路由记录</strong><br>描述：删除刚才创建的两条记录。<br>命令：<br><code>route del -net 224.0.0.0 netmask 240.0.0.0</code><br><code>route del -net 224.0.0.0 netmask 240.0.0.0 reject</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/route/route-del.png" alt=""></p><p><strong>实例：5. 删除和添加设置默认网关</strong><br>描述：不建议在连接到远程主机的时候删除默认网关，会导致断开远程主机的连接。不过在命令行下命令不会永久保存，当网卡重启或者机器重启之后，该路由就失效了。<br>命令：<br><code>route del default gw 172.16.63.253</code><br><code>route add default gw 172.16.63.253</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;route命令用来显示并设置Linux内核中的网络路由表，route命令设置的路由主要是静态路由。要实现两个不同的子网之间的通信，需要一台连接两个网络的路由器，或者同时位于两个网络的网关来实现。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.oxysun.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux ping总结</title>
    <link href="http://www.oxysun.cn/2018/06/12/Linux/daily-command-ping/"/>
    <id>http://www.oxysun.cn/2018/06/12/Linux/daily-command-ping/</id>
    <published>2018-06-12T03:18:24.000Z</published>
    <updated>2018-06-16T08:07:35.987Z</updated>
    
    <content type="html"><![CDATA[<p>ping命令用来测试主机之间网络的连通性。执行ping指令会使用ICMP传输协议，发出要求回应的信息，可以根据远程主机输出的信息来确定其是否可访问（不是绝对的），有些服务器为了防止通过ping探测到，通过防火墙设置了禁止ping或者在内核参数中禁止ping，这样就不能通过ping确定该主机是否处于开启状态。</p><a id="more"></a><h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>ping通过发送ICMP ECHO_REQUEST数据包到网络主机（send ICMP ECHO_REQUEST packets to network hosts），并显示响应情况。</p><p><img src="http://p9xqnn501.bkt.clouddn.com/ping/ping-man.png" alt=""></p><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>ping [选项] [主机名或IP地址]</code></p><h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><ul><li>-d：使用Socket的SO_DEBUG功能；</li><li>-c&lt;完成次数&gt;：设置完成要求回应的次数；</li><li>-f：极限检测；</li><li>-i&lt;间隔秒数&gt;：指定收发信息的间隔时间；</li><li>-I&lt;网络界面&gt;：使用指定的网络界面送出数据包；</li><li>-l&lt;前置载入&gt;：设置在送出要求信息之前，先行发出的数据包；</li><li>-n：只输出数值；</li><li>-p&lt;范本样式&gt;：设置填满数据包的范本样式；</li><li>-q：不显示指令执行过程，开头和结尾的相关信息除外；</li><li>-r：忽略普通的Routing Table，直接将数据包送到远端主机上；</li><li>-R：记录路由过程；</li><li>-s&lt;数据包大小&gt;：设置数据包的大小；</li><li>-t&lt;存活数值&gt;：设置存活数值TTL的大小；</li><li>-v：详细显示指令的执行过程。</li></ul><h2 id="实用实例"><a href="#实用实例" class="headerlink" title="实用实例"></a>实用实例</h2><p><strong>实例：1. 使用ping命令</strong><br>ping命令不断向网络发送请求，当收到响应时，将收到包含如下信息的输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/ping/ping.png" alt=""></p><p>第一行表示每次向域名/IP地址发送指定大小的数据包。接下来的数行是响应信息，具体包含以下字段：</p><ul><li>接收的字节数</li><li>IP地址</li><li>序列号</li><li>响应的时间</li></ul><p>最后一行是此次ping命令执行的统计信息：发送6个数据包，其中6个目标主机已收到，丢包率为0，总耗时5000毫秒。</p><p><strong>实例：2. 更改ping数据包之间的时间间隔</strong><br>描述：每隔3秒发送一个数据包。-i选项指定包之间的时间间隔。<br>命令：<code>ping -i 3 iweeek.com</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ping/ping-i.png" alt=""></p><p><strong>实例：3. 更改ping数据包大小</strong><br>描述：默认情况下，ping数据包中的字节数为56（如果包含8个字节的ICMP头，则为64）。可以使用-s选项更改此值。例如，发送一个1024字节的数据包（1032包括ICMP头）：<br>命令：<code>ping -s 1024 iweeek.com</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ping/ping-s.png" alt=""></p><p><strong>实例：4. 发送指定数量的ping数据包</strong><br>描述：ping的默认行为是保持发送数据包知道用户中断为止。使用-c选项可以在发送一定数量的数据包之后强制ping停止执行。例如，在发送3个数据包之后，停止执行：<br>命令：<code>ping -c 3 iweeek.com</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ping/ping-host.png" alt=""></p><p><strong>实例：5. 指定时间间隔和发送次数</strong><br>描述：总共花费20秒发出10个数据包，数据包的时间间隔为2秒。<br>命令：<code>ping -i 2 -c 10 127.0.0.1</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ping/ping-i-c.png" alt=""></p><p><strong>实例：6. 设置ping的硬超时（最长运行时间）</strong><br>描述：每隔3秒发送一个数据包，最长运行10秒。可见，最多输出发送4个数据包。-w选项指定ping的退出时间，单位是秒。以下是官方解释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-w deadline</span><br><span class="line">       Specify a timeout, in seconds, before ping exits regardless of how many packets have</span><br><span class="line">       been  sent or received. In this case ping does not stop after count packet are sent,</span><br><span class="line">       it waits either for deadline expire or until count probes are answered or  for  some</span><br><span class="line">       error notification from network.</span><br></pre></td></tr></table></figure><p>命令：<code>ping -w 10 -i 3 iweeek.com</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ping/ping-w.png" alt=""></p><p><strong>实例：7. 设置ping的软超时</strong><br>描述：-w选项确保ping在截止日期过期后停止，-W选项也可以使ping停止，但仅限于目标端没有响应时。以下是官方解释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-W timeout</span><br><span class="line">       Time to wait for a response, in seconds. The option affects only</span><br><span class="line">       timeout  in  absence  of any responses, otherwise ping waits for</span><br><span class="line">       two RTTs.</span><br></pre></td></tr></table></figure><p>命令：<code>ping -W 3 iweeek.com</code> </p><p><strong>实例：8. 使用ping启动大量数据包</strong><br>描述：-f选项可以启动大量数据包。下面是官方的解释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-f     Flood  ping. For every ECHO_REQUEST sent a period ``.&apos;&apos; is printed,</span><br><span class="line">       while for ever ECHO_REPLY received a backspace  is  printed.   This</span><br><span class="line">       provides a rapid display of how many packets are being dropped.  If</span><br><span class="line">       interval is not given, it sets interval to zero and outputs packets</span><br><span class="line">       as  fast  as they come back or one hundred times per second, which‐</span><br><span class="line">       ever is more.  Only the super-user may use this  option  with  zero</span><br><span class="line">       interval.</span><br></pre></td></tr></table></figure><p>命令：<code>ping -f iweeek.com</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ping/ping-f.png" alt=""></p><p><strong>实例：9. 在每行之前打印ping时间戳</strong><br>描述：-D选项可以打印unix时间和微妙的组合。<br>命令：<code>ping -D iweeek.com</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ping/ping-D.png" alt=""></p><p><strong>实例：10. 不显示具体请求信息</strong><br>描述：-q不显示发送和接收的美和请求之间发生的所有事情，而只是开始和结束时的输出。<br>命令：<code>ping -q iweeek.com</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ping/ping-q.png" alt=""></p><p><strong>实例：11. 多参数使用</strong><br>描述：向域名iweeek.com发送5个数据包，每个间隔2秒，数据包大小为1024字节，TTL值为255，测试其连通性。<br>命令：<code>ping -c 5 -i 2 -s 1024 -t 255 iweeek.com</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ping/ping-mul-params.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ping命令用来测试主机之间网络的连通性。执行ping指令会使用ICMP传输协议，发出要求回应的信息，可以根据远程主机输出的信息来确定其是否可访问（不是绝对的），有些服务器为了防止通过ping探测到，通过防火墙设置了禁止ping或者在内核参数中禁止ping，这样就不能通过ping确定该主机是否处于开启状态。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.oxysun.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux uniq总结</title>
    <link href="http://www.oxysun.cn/2018/06/12/Linux/daily-command-uniq/"/>
    <id>http://www.oxysun.cn/2018/06/12/Linux/daily-command-uniq/</id>
    <published>2018-06-12T00:53:22.000Z</published>
    <updated>2018-06-16T08:07:35.990Z</updated>
    
    <content type="html"><![CDATA[<p>uniq命令用于报告或忽略文件中的重复行。</p><a id="more"></a><h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>uniq命令可以轻松地从文件中找到重复的行，而且可以删除重复项，显示重复项出现的次数，只显示重复的行，只显示唯一的行。<br>请注意，除非重复行是相邻的，否则uniq不会删除它们。因此可能需要先对它们进行排序，或将排序命令与uniq组合使用。</p><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>uniq [选项] [文件]</code></p><h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><ul><li>-c或——count：在每列旁边显示该行重复出现的次数；</li><li>-d或–repeated：仅显示重复出现的行列；</li><li>-f&lt;栏位&gt;或–skip-fields=&lt;栏位&gt;：忽略比较指定的栏位；</li><li>-s&lt;字符位置&gt;或–skip-chars=&lt;字符位置&gt;：忽略比较指定的字符；</li><li>-u或——unique：仅显示出一次的行列；</li><li>-w&lt;字符位置&gt;或–check-chars=&lt;字符位置&gt;：指定要比较的字符。</li></ul><h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2><p><strong>实例：1. 默认情况</strong><br>描述：uniq命令删除了给定文件中所有连续重复的行。可以看到输出中，第1行和第3行重复了，第2行和第5行重复了。这是因为uniq命令只有在相邻的情况下才会删除重复的行<br>命令：<code>uniq device</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/uniq/uniq.png" alt=""></p><p><strong>实例：2. 删除所有重复的行</strong><br>描述：经过排序之后，所有相同的行都连续地排在一起，达到了删除所有行的目的。<br>命令：<br><code>sort -u device</code><br><code>sort device | uniq</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/uniq/uniq-sort.png" alt=""></p><p><strong>实例：3. 仅显示不连续重复的单一行</strong><br>描述：只显示device中不连续重复的单一行，只有10:aaa:43是唯一的。<br>命令：<code>uniq -u device</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/uniq/uniq-u.png" alt=""></p><p><strong>实例：4. 找出重复的行</strong><br>显示device文件中连续出现的重复行。同样，不连续重复的相同行是不重复的行。</p><p>描述：33:fff:221出现了两次，因为它们不是连续的。<br>命令：<code>uniq -d device</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/uniq/uniq-d.png" alt=""></p><p>描述：在device文件中的第一行插入一行11:eee:49，但输出中没有出现，因为它们不是连续的。<br>命令：<br><code>vim device &lt;修改文件&gt;</code><br><code>uniq -d device</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/uniq/uniq-d5.png" alt=""></p><p>描述：先排序，然后真正找出重复的行。<br>命令：<code>sort device | uniq -d</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/uniq/uniq-d3.png" alt=""></p><p>描述：先排序，然后将所有重复的行全部显示出来。<br>命令：<code>sort device | uniq -D</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/uniq/uniq-d4.png" alt=""></p><p><strong>实例：5. 统计各行在出现的次数</strong><br>描述：-c选项统计device文件中各行重复的次数。<br>命令：<code>uniq -c device</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/uniq/uniq-c.png" alt=""></p><p>描述：下面的例子，检查给定文件中每一行重复出现的行数。<br>命令：<code>sort device | uniq -c | sort -nr</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/uniq/uniq-c-sort.png" alt=""></p><p><strong>实例：6. 将比较限制为N个字符</strong><br>描述：只比较每行的第一个字符。输出中可以看到，前两行被当做相同的行。-d选项将比较限制为N个字符。<br>命令：<code>uniq -d -w 1 device</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/uniq/uniq-w.png" alt=""></p><p><strong>实例：7. 忽略N个字符后比较</strong><br>描述：下面的命令将忽略在文件中每行的前七个字符后，再进行比较。-s选项来忽略比较前N个字符。<br>命令：<code>uniq -d -s 7 device</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/uniq/uniq-s.png" alt=""></p><p><strong>实例：8. 忽略N个字段后比较</strong></p><p>描述：先将device文件的内容排序后，用awk格式化输出。-t和-F指定sort和awk的域分隔符。<br>命令：<code>sort -t: device | awk -F: &#39;{print $1&quot; &quot;$2&quot; &quot;$3}&#39;</code></p><p>描述：忽略两个字段后进行比较。从输出中看到，第三个字段只有49和221是重复的。-f选项指定忽略N个字段后，再进行比较。<br>命令：<code>sort -t: device | awk -F: &#39;{print $1&quot; &quot;$2&quot; &quot;$3}&#39; | uniq -d -f 2</code></p><p>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/uniq/uniq-f.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;uniq命令用于报告或忽略文件中的重复行。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.oxysun.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux sort总结</title>
    <link href="http://www.oxysun.cn/2018/06/11/Linux/daily-command-sort/"/>
    <id>http://www.oxysun.cn/2018/06/11/Linux/daily-command-sort/</id>
    <published>2018-06-11T10:40:13.000Z</published>
    <updated>2018-06-16T08:07:35.988Z</updated>
    
    <content type="html"><![CDATA[<p>sort是用于对单个或多个文本文件内容进行排序的Linux程序。</p><a id="more"></a><h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>sort命令将许多不同的域按不同的列顺序分类。sort命令以空格作为字段分隔符，将一行分割为多个关键字对文件进行排序。需要注意的是sort命令并不对文件内容进行实际的排序(即文件内容没有修改)，只是将文件内容按有序输出。</p><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>sort -cmu -o output_file [other_options] +pos1 +pos2 input_files</code></p><h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><ul><li>-c：检查文件是否已经按照顺序排序。</li><li>-m：将几个排序号的文件进行合并。</li><li>-u：删除所有重复行。</li><li>-o&lt;输出文件&gt;：将排序后的结果存入指定的文件。</li><li>-b：忽略每行前面开始出的空格字符。</li><li>-h：人类可阅读的格式。</li><li>-d：排序时，处理英文字母、数字及空格字符外，忽略其他的字符。</li><li>-f：排序时，将小写字母视为大写字母。</li><li>-i：排序时，除了040至176之间的ASCII字符外，忽略其他的字符。</li><li>-M：将前面3个字母依照月份的缩写进行排序。</li><li>-n：按照数值的大小排序。</li><li>-r：以相反的顺序来排序。</li><li>-t&lt;分隔字符&gt;：指定排序时所用的栏位分隔字符。</li><li>+&lt;起始栏位&gt;-&lt;结束栏位&gt;：以指定的栏位来排序，范围由起始栏位到结束栏位的前一栏位。</li></ul><h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2><p><strong>实例：0. 测试文件</strong><br>描述：下面是device_sort的清单，包含了用户设备登录次数情况，各域为：（1）用户ID，（2）手机系统版本，（3）登录访问次数。域分隔符为冒号。域号从0开始，第1列用户ID为域0，即分类键0，以此类推。</p><p><img src="http://p9xqnn501.bkt.clouddn.com/sort/sort-origin-file.png" alt=""></p><p><strong>实例：1. 文件是否已分类</strong><br>描述：检查device文件的域用户ID是否已经有序。sort不加任何参数默认以域0（也就是第一列）进行排序，-c选项检查文件是否已按某种顺序排序。<br>命令：<code>sort -c device</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/sort/sort-origin-file.png" alt=""></p><p><strong>实例：2. 使用分隔符</strong><br>描述：将device用:作为域分隔符分类，然后按第一列进行排序。实际上读文件时sort操作将行中各域进行比较，这里只返回基于第一域sort的结果。<br>命令：<code>sort -t : device</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/sort/sort-t.png" alt=""></p><p><strong>实例：3. 排序求逆</strong><br>描述：反转实例2中的排序结果。这里先按照第一列进行排序，然后反转其结果。<br>命令：<code>sort -t: -r device</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/sort/sort-r.png" alt=""></p><p><strong>实例：4.  使用选项k按指定列排序</strong><br>描述：使用选项k指定第1列进行排序。<br>命令：<code>sort -k1 -t: device</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/sort/sort-k.png" alt=""></p><p><strong>实例：5. 数值域排序</strong></p><p>描述：使用n选项指明对数值内容进行排序，否则会按字符串从第一个字符开始进行比较。<br>命令：<code>sort -nk3 -t: device</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/sort/sort-n.png" alt=""></p><p><strong>实例：6. 唯一性排序</strong></p><p>描述：使用u选项过滤所有重复的行，每个重复的行只显示一次。<br>命令：<code>sort -u -t: device</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/sort/sort-u.png" alt=""></p><p><strong>实例：7. 两个文件进行排序、合并，并且删除重复行</strong></p><p>描述：两个文件进行排序、合并，并且删除重复行。<br>命令：<code>sort -u device device2</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/sort/sort-u-merge.png" alt=""></p><p><strong>实例：8. pos用法</strong></p><p>格式：<code>F[.C][OPTS][,F[.C][OPTS]]</code><br>解释：指定排序域开始和结束的位置，F是字段的序号，C是字符的序号，两者初始都是1，结束位置可以不指定，默认是到行结束位置。如果-t和-b选项都没有指定，那么字段中的字符从前面的空白开始计数。OPTS由一个或多个单个字母排序的选项[bdfgiMhnRrV]，它们将重写全局排序选项，如果没有排序键被指定，sort就会以一整行作为键。-b选项去除每个键的前导空白。</p><p>假设有五列字段。<br>-k 2：表示从第二列开始到最后一列作为排序的关键字。<br>-k 2,5：表示从第二列开始到第五列作为排序的关键字。<br>-k 2,2：表示仅以第二列作为排序的关键字。<br>-k 4 -k 5：-k5是多余的。<br>-k 2,2 -k 1,1：先以第二列进行排序，再以第一列排序。<br>-k 2.2,2.5 -k 4.3,4.5：先以第二列的第二个字符开始到第五个字符进行排序，然后先以第四列的第三个字符开始到第五个字符进行排序。</p><p>格式：<code>sort +field_number .characters_in</code><br>描述：从第三列的第二个字符开始排序。<br>命令：<code>sort -k3.2 -t: device</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/sort/sort-pos.png" alt=""></p><p>描述：对/root目录执行ls -l的命令，其结果通过管道传递给sort进行排序，先以第二列排序，然后第五列，最后是第九列倒序。<br>命令：<code>ls -l /root | sort -k 2,2n -k 5,5n -r -k 9,9</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/sort/sort-k-pos.png" alt=""></p><p><strong>实例：9. head和tail与sort配合使用</strong></p><p>格式：<code>sort +field_number .characters_in</code><br>描述：以第三列的数值形式进行排序，从结果中抽取前3条和倒数3条记录。<br>命令：<br><code>sort -nk3 -t: device | head -3</code><br><code>sort -nk3 -t: device | tail -3</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/sort/sort-head-tail.png" alt=""></p><p><strong>实例：10. awk与sort配合使用</strong></p><p>描述：将sort结果用awk进行加一点附加信息。<br>命令：<code>sort -nk3 -t: device | tail -1 | awk -F: &#39;{print $1&quot;--&quot;$2&quot;--&quot;$3}&#39;</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/sort/sort-awk.png" alt=""></p><p><strong>实例：11. 两个输入文件进行sort，然后把它们连接成一行</strong><br>描述：创建两个文件，并用数据填充，然后对这两个文件排序并连接。<br>命令：<br><code>echo -e &quot;5 Reliable\n2 Fast\n3 Secure\n1 open-source\n4 customizable&quot; &gt; file1.txt</code><br><code>echo -e &quot;3 RedHat\n1 Debian\n5 Ubuntu\n2 Kali\n4 Fedora&quot; &gt; file2.txt</code><br><code>join &lt;(sort -n file1.txt) &lt;(sort file2.txt)1 open-source Debian</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/sort/sort-join.png" alt=""></p><p><strong>实例：12. 将两个分类文件合并</strong></p><p>描述：device_sorted和device_sorted2是两个已排好序的文件，文件合并前，它们必须以被分类。<br>命令：<code>sort -t: -m -k1 device_sorted device_sorted2</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/sort/sort-merge.png" alt=""></p><p><strong>实例：13. 按照月份顺序进行排序</strong></p><p>描述：M选项对month.txt文件按照月份顺序进行排序。sort命令需要至少3个字符来确认月份名称。<br>命令：<code>sort -M month.txt</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/sort/sort-M.png" alt=""></p><p><strong>实例：14. 把数据整理成方便人们阅读的形式</strong></p><p>描述：-h选项将把数据整理成方便人们阅读的形式，比如1K、2M、3G、2T，这里面的K、G、M、T代表千、兆、吉、梯。<br>命令：<code>ls -lh /root | sort -h -k5</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/sort/sort-h.png" alt=""></p><p><strong>实例：15. 随机化结果</strong><br>描述：-R选项将结果进行hash随机化排序。<br>命令：<code>ls -lh /root | sort -k5 -R</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/sort/sort-Random.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;sort是用于对单个或多个文本文件内容进行排序的Linux程序。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.oxysun.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux scp总结</title>
    <link href="http://www.oxysun.cn/2018/06/11/Linux/daily-command-scp/"/>
    <id>http://www.oxysun.cn/2018/06/11/Linux/daily-command-scp/</id>
    <published>2018-06-11T06:16:41.000Z</published>
    <updated>2018-06-16T08:07:35.988Z</updated>
    
    <content type="html"><![CDATA[<p>scp是安全拷贝协议Secure Copy Protocol的缩写，和众多Linux/Unix使用者所熟知的拷贝（cp）命令一样。scp的使用方式类似于cp命令，cp命令将一个文件或文件夹从本地操作系统的一个位置（源）拷贝到目标位置（目的），而scp用来将文件或文件夹从网络上的一个主机拷贝到另一个主机当中去。</p><a id="more"></a><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>top source_file_name username@destination_host:destination_folder</code></p><p>一句话解释：以username用户拷贝source_file到destination_host上的destination_folder里。</p><h2 id="命令作用"><a href="#命令作用" class="headerlink" title="命令作用"></a>命令作用</h2><p>scp命令用来在服务器之间安全传输文件，scp传输是加密的。</p><h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><ul><li>-1：强制scp命令使用协议ssh1。</li><li>-2：强制scp命令使用协议ssh2。</li><li>-4：强行使用IPV4地址。</li><li>-6：强行使用IPV6地址。</li><li>-B：采取批量模式（避免询问密码或口令）。</li><li>-C：启用压缩。通过指明-C参数来开启压缩模式。</li><li>-c：加密方式<ul><li>选择在传输过程中用来加密的加密方式 这个选项会被直接传递到ssh。</li></ul></li><li>-F：ssh配置<ul><li>给ssh指定一个用来替代默认配置的配置文件。这个选项会被直接传递到ssh。</li></ul></li><li>-i：identity_file从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。  </li><li>-l：限速<ul><li>限制命令使用的带宽，默认单位是Kbit/s。</li></ul></li><li>-P：端口<ul><li>指定需要的连接的远程主机的端口。  </li><li>注意，这个选项使用的是一个大写的“P”，因为小写的“-p”已经用来保留目标文件的时间和模式相关信息。</li></ul></li><li>-p：保留文件原来的修改时间，访问时间以及权限模式。</li><li>-q：静默模式：不显示来自ssh命令的进度信息，警告和诊断信息。</li><li>-r：递归拷贝整个目录。<ul><li>注意，scp命令在树形遍历的时候同样会跟随符号连接，复制所连接的文件。</li></ul></li><li>-v：详细模式。scp和ssh将会打印出处理过程中的调试信息。这可以帮助你调试连接、认证和配置方面的问题。</li></ul><h2 id="实用示例"><a href="#实用示例" class="headerlink" title="实用示例"></a>实用示例</h2><p><strong>实例：1. 从远程服务器复制文件到本地目录</strong><br>描述：从远程39.106.99.114机器上的/root/develop/目录中下载scp.tar.gz文件到本地/root/目录中。<br>命令：<code>scp root@39.106.99.114:/root/develop/scp.tar.gz /root/</code></p><p><strong>实例：2. 从远程服务器复制目录到本地</strong><br>描述：从远程39.106.99.114机器上的/root/develop/目录中下载所有文件到本地/root/目录中。<br>命令：<code>scp -r root@39.106.99.114:/root/develop/ /root/</code></p><p><strong>实例：3. 上传本地目录文件到远程服务器</strong><br>描述：将本地当前目录中的scp.tar.gz文件上传到39.106.99.114机器上的/root/develpop/目录中。<br>命令：<code>scp scp.tar.gz root@39.106.99.114:/root/develop/</code></p><p><strong>实例：4. 上传本地目录到远程服务器</strong><br>描述：将本地root/dev/目录中所有文件上传到39.106.99.114机器上的/root/develop/目录中。<br>命令：<code>scp -r /root/dev/ root@39.106.99.114:/root/develop/</code></p><h2 id="基础示例"><a href="#基础示例" class="headerlink" title="基础示例"></a>基础示例</h2><p><strong>实例：1. v：得到认证、调试等相关细节信息</strong><br>描述：-v选项，可以得到认证、调试等相关细节信息。<br>命令：<code>scp -v index.html root@39.106.99.114:/root/scp/</code></p><p><strong>实例：2. r：递归拷贝整个目录</strong><br>描述：-r选项，递归拷贝整个目录。<br>命令：<code>scp -r ./iweeek root@39.106.99.114:/root/scp/</code><br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/scp/scp-r.png" alt=""></p><p><strong>实例：3. q：静默模式</strong><br>描述：-q选项，可以关闭进度信息以及警告和诊断信息。<br>命令：<code>scp -r -q ./iweeek root@39.106.99.114:/root/scp/</code><br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/scp/scp-q.png" alt=""></p><p><strong>实例：4. l：限制命令使用的带宽</strong><br>描述：-l选项来指定命令使用的带宽，在此我们将速度限制为512Kbit/s，也就是64KB/s。因为带宽是以千比特/秒（kbps）表示的，而8比特等于1字节。<br>命令：<code>scp -l 512 index.html root@39.106.99.114:/root/scp/</code><br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/scp/scp-l.png" alt=""></p><p><strong>实例：5. p：保留原始信息</strong><br>描述：-p选项，可以保留目标文件的更新时间，访问时间和权限模式。<br>命令：<code>scp -c blowfish index.html root@39.106.99.114:/root/</code></p><p><strong>实例：6. P：指定端口</strong><br>描述：ssh默认使用22端口，-p选项可以指定所需的端口号。<br>命令：<code>scp -P 2222 index.html root@39.106.99.114:/root/</code></p><p><strong>实例：7. C：开启压缩模式</strong><br>描述：-C选项开启压缩模式，scp会不停压缩所传输的文件来节省传输过程中的带宽和时间。它特别之处在于压缩是在网络传输中进行，当文件传到目标服务器时，它会变回压缩之前的原始大小。<br>压缩的方法不是适用于所有文件。当源文件已经被压缩过了，那就没办法再压缩很多了。诸如那些像.zip，.rar，pictures和.iso的文件，用-C参数就没什么意义。<br>命令：<code>scp -C index.html root@39.106.99.114:/root/</code></p><p><strong>实例：8. c：选择加密数据的加密方式</strong><br>描述：scp默认使用AES-128的加密方式，可以通过-c参数来指定其他的加密方式。<br>命令：<code>scp -c blowfish index.html root@39.106.99.114:/root/</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;scp是安全拷贝协议Secure Copy Protocol的缩写，和众多Linux/Unix使用者所熟知的拷贝（cp）命令一样。scp的使用方式类似于cp命令，cp命令将一个文件或文件夹从本地操作系统的一个位置（源）拷贝到目标位置（目的），而scp用来将文件或文件夹从网络上的一个主机拷贝到另一个主机当中去。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.oxysun.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux top总结</title>
    <link href="http://www.oxysun.cn/2018/06/11/Linux/daily-command-top/"/>
    <id>http://www.oxysun.cn/2018/06/11/Linux/daily-command-top/</id>
    <published>2018-06-11T04:20:23.000Z</published>
    <updated>2018-06-26T15:30:07.935Z</updated>
    
    <content type="html"><![CDATA[<p><code>top</code>命令可以实时动态地查看系统的整体运行情况，是一个综合了多方信息监测系统西能和运行信息的使用工具。top命令提供了互动式的界面，用热键管理。</p><a id="more"></a><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>top [选项]</code></p><h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p><code>top</code>命令用来显示Linux的处理器活动和内核实时管理的任务。它会显示正在使用的处理器和内存以及运行进程等其他信息。</p><h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><ul><li>-b：以批处理模式操作。</li><li>-c：显示完整的命令。</li><li>-d：屏幕刷新间隔时间。</li><li>-I：忽略失效过程。</li><li>-s：保密模式。</li><li>-S：累积模式。</li><li>-i&lt;时间&gt;：设置间隔时间。</li><li>-u&lt;用户名&gt;：指定用户名。</li><li>-p&lt;进程号&gt;：指定进程。</li><li>-n&lt;次数&gt;：循环显示的次数。</li></ul><h2 id="top交互命令"><a href="#top交互命令" class="headerlink" title="top交互命令"></a><code>top</code>交互命令</h2><p>在<code>top</code>命令执行过程中可以使用的一些交互命令。这些命令都是单字母的，如果在命令行中使用了-s选项， 其中一些命令可能会被屏蔽。</p><ul><li>h：显示帮助画面，给出一些简短的命令总结说明。</li><li>k：终止一个进程。</li><li>i：忽略闲置和僵死进程，这是一个开关式命令。</li><li>q：退出程序。</li><li>r：重新安排一个进程的优先级别。</li><li>S：切换到累计模式。</li><li>s：改变两次刷新之间的延迟时间（单位为s），如果有小数，就换算成ms。输入0值则系统将不断刷新，默认值是5s。</li><li>f或者F：从当前显示中添加或者删除项目。</li><li>o或者O：改变显示项目的顺序。</li><li>l：切换显示平均负载和启动时间信息。</li><li>m：切换显示内存信息。</li><li>t：切换显示进程和CPU状态信息。</li><li>c：显示进程启动时的完整路径和程序名。</li><li>M：根据驻留内存大小进行排序。</li><li>P：根据CPU使用百分比大小进行排序。</li><li>T：根据时间/累计时间进行排序。</li><li>w：将当前设置写入~/.toprc文件中。</li></ul><h2 id="界面解释"><a href="#界面解释" class="headerlink" title="界面解释"></a>界面解释</h2><p><img src="http://p9xqnn501.bkt.clouddn.com/top/top-field.png" alt=""></p><p>统计信息区前五行是系统整体的统计信息。<br><strong>系统运行时间和平均负载</strong><br>第一行是任务队列信息，同uptime命令的执行结果，可以使用l命令切换uptime的显示。其内容如下：</p><ul><li>08:42:05：当前时间。</li><li>up 8 days, 11:56：系统运行时间。</li><li>1 users：当前登录用户数。</li><li>load average: 0.10, 0.04, 0.05：系统负载，即任务队列平均长度。分别为1、5、15min前到现在平均值。</li></ul><p><strong>进程</strong><br>第二行为进程信息。内容如下：</p><ul><li>62 total：进程总数[键入H可查看线程数]。</li><li>2 running：正在运行的进程。</li><li>60 sleeping：睡眠进程。</li><li>0 stopped：停止的进程。</li><li>0 zombie：僵尸进程数。</li></ul><p><strong>CPU状态</strong><br>第三行为CPU状态信息，当有多个CPU时，这些内容可能会超过两行。内容如下：</p><ul><li>us, user：运行(未调整优先级的) 用户进程的CPU百分比。</li><li>sy，system：运行内核进程的CPU百分比。</li><li>ni，niced：运行已调整优先级的用户进程的CPU百分比。</li><li>wa，IO wait：用于等待IO完成的CPU百分比。</li><li>hi：处理硬件中断的CPU百分比。</li><li>si：处理软件中断的CPU百分比。</li><li>st：这个虚拟机被hypervisor偷去的CPU百分比。（译注：如果当前处于一个hypervisor下的vm，实际上hypervisor也是要消耗一部分CPU处理时间的）。</li></ul><p><strong>内存使用</strong><br>倒数第2、3行为内存相关信息，内存显示可以用m命令切换：</p><ul><li>KiB Mem: 1883724 total, 187736 free：分别是物理内存总量、空闲内存总量。</li><li>120536 used, 1575452 buffers：使用物理内存总量、用作内核缓存内存量。</li><li>KiB Swap: 1044476 total, 713552 used：分别是交换分区量、使用交换分区总量。</li><li>330924 free, 10052032 cached：空闲交换区总量、缓存交换区总量。</li></ul><p><strong>字段/列</strong><br>最后一行则是进程相关的资源占用信息：</p><ul><li>PID：进程的ID，进程的唯一标识符。</li><li>USER：进程所有者的实际用户名。</li><li>PR：进程的优先级别，范围0-39，越小越优先被执行。</li><li>NI：nice值。范围-20-19，负值表示高优先级，正值表示低优先级。在top里，PR-NI=20，默认启动一个进程，nice是0。</li><li>VIRT：进程占用的虚拟内存。</li><li>RES：进程占用的物理内存。</li><li>SHR：进程使用的共享内存。</li><li>S：进程的状态。<ul><li>D：表示不可终端的睡眠状态。</li><li>R：表示正在运行。</li><li>S：表示休眠。</li><li>T：表示作业控制信号下已停止。</li><li>t：表示在调试状态的停止。</li><li>Z：表示僵死状态。</li></ul></li><li>%CPU：自从上一次更新到现在任务所使用的CPU使用率。</li><li>%MEM：进程使用的物理内存和总内存的百分比。</li><li>TIME+：该进程启动后占用的总的CPU时间，即占用CPU使用时间的累加值，精确到百分之一秒。</li><li>COMMAND：进程启动命令名称。</li></ul><h2 id="交互命令实例"><a href="#交互命令实例" class="headerlink" title="交互命令实例"></a>交互命令实例</h2><p><strong>实例：<code>l、t、m</code>：切换负载、任务、内存信息的显示</strong><br>描述：相应地切换顶部的平均负载、任务/CPU状态和内存信息的概况显示。<br>输出：<br>不显示平均负载：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-l.png" alt=""><br>不显示CPU概况：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-t.png" alt=""><br>不显示内存和交换内存概况：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-m-noword.png" alt=""><br>可以切换图形显示：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-m-graph.png" alt=""><br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-m-graph-bold.png" alt=""><br>均不显示：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-l-t-m-none.png" alt=""></p><p><strong>实例：<code>h</code>：帮助</strong><br>描述：在<code>top</code>状态下，按<code>h</code>键或者<code>?</code>键显示交互命令的帮助菜单。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-h.png" alt=""></p><p><strong>实例：手动刷新</strong><br>描述：在<code>top</code>状态下，按空格或者回车进行手动刷新。top命令默认在一个特定间隔（3秒）后刷新显示。</p><p><strong>实例：<code>A</code>：切换交替显示模式</strong></p><p>描述：在<code>top</code>状态下，按<code>A</code>键，可以在全屏和交替模式间切换。在交替模式下会显示4个窗口。</p><ul><li>Def（默认字段组）</li><li>Job（任务字段组）</li><li>Mem（内存字段组）</li><li>Usr（用户字段组）</li></ul><p>这四组字段共有一个独立的可配置的概括区域和它自己的可配置任务区域。4个窗口中只有一个窗口是当前窗口。当前窗口的名称显示在左上方。只有当前窗口才会接受你键盘交互命令。<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-A.png" alt=""><br>可以用<code>a</code>和<code>w</code>在4个窗口间切换，<code>a</code>移到后一个窗口，<code>w</code>移到前一个窗口。用<code>g</code>命令可以输入一个数字来选择当前窗口。<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-switch.png" alt=""></p><p><strong>实例：<code>B</code>：粗体显示</strong><br>描述：在<code>top</code>状态下，按<code>B</code>键，会将一些重要信息会以加粗字体显示。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-B.png" alt=""></p><p><strong>实例：<code>d</code>或<code>s</code>：设置显示的刷新间隔</strong><br>描述：在<code>top</code>状态下，按<code>d</code>键或者<code>s</code>键，设置显示的刷新间隔为1秒。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-d-s.png" alt=""></p><p><strong>实例：<code>f</code>：字段管理</strong><br>描述：在<code>top</code>状态下，按<code>f</code>键进入字段管理界面。d键选择要显示的字段，用*标记的是已选择的。上下光标键在字段内导航，左光标键可以选择字段，右光标键进入排序状态，此时按上下光标键可以进行上下移动，回车确认。s键设置当前排序的字段，q或Esc键退出。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-f.png" alt=""></p><p><strong>实例：<code>R</code>：反向排序</strong><br>描述：在<code>top</code>状态下，按<code>R</code>键切换反向/常规排序。</p><p><strong>实例：<code>c</code>：切换显示命令名称和完整命令行</strong><br>描述：在<code>top</code>状态下，按<code>c</code>键，切换是否显示进程启动时的完整路径和程序名。也可以使用如下命令行。<br>命令：<code>top -c</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-c.png" alt=""></p><p><strong>实例：<code>i</code>：空闲任务</strong><br>描述：在<code>top</code>状态下，按i键，切换显示空闲任务。<br>输出：<br>不显示空闲任务：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-i.png" alt=""></p><p><strong>实例：<code>V</code>：树视图</strong><br>描述：在<code>top</code>状态下，按V键，切换树视图。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-V.png" alt=""></p><p><strong>实例：<code>z</code>：切换彩色显示</strong><br>描述：在<code>top</code>状态下，按<code>z</code>键，切换彩色，即打开或关闭彩色显示。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-z-normal.png" alt=""></p><p><strong>实例：<code>Z</code>：改变配色</strong><br>描述：在<code>top</code>状态下，按<code>Z</code>键，显示一个改变<code>top</code>命令的输出颜色的屏幕。可以为8个任务区域选择8种颜色。<br>输出：<br>设置修改：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-Z.png" alt=""><br>显示效果：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-Z-show.png" alt=""></p><p><strong>实例：按照内存使用大小排序</strong><br>描述：在<code>top</code>状态下，按shift+m，可以按照内存使用大小排序进程。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-M.png" alt=""></p><p><strong>实例：<code>x、y</code>：切换高亮信息</strong><br>描述：在<code>top</code>状态下，按<code>x</code>键将排序字段高亮显示（纵列）；按<code>y</code>键将运行进程高亮显示（横行）。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-x-y.png" alt=""></p><p><strong>实例：<code>u</code>：特定用户的进程</strong><br>描述：在<code>top</code>状态下，按u键将会提示输入用户名，输入首显示特定用户的进程。空白将会显示全部用户。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-u.png" alt=""></p><p><strong>实例：<code>n或#</code>：任务的数量</strong><br>描述：在<code>top</code>状态下，按n键或者<code>#</code>键可以设置最大显示的任务数量。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-n-#.png" alt=""></p><p><strong>实例：<code>k</code>：结束任务</strong><br>描述：在<code>top</code>状态下，按<code>k</code>键输入<code>PID</code>后，发送信号给任务（通常是结束任务）。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-k.png" alt=""></p><p><strong>实例：<code>r</code>：重新设置优先级</strong><br>描述：在<code>top</code>状态下，按<code>r</code>键输入-20~19范围中的数字后，重新设置一个任务的调度优先级（nice值）。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-k.png" alt=""></p><h2 id="命令行实例"><a href="#命令行实例" class="headerlink" title="命令行实例"></a>命令行实例</h2><p><strong>实例：<code>-p</code>：监控特定的PID</strong><br>描述：-p选项监控指定的PID。PID的值为0将被作为top命令自身的PID。<br>命令：<code>top -p 0</code></p><p><strong>实例：<code>-u或-U</code>: 用户名或者UID</strong><br>描述：可以用这些选项浏览特定用户的进程。用户名或者UID可以在选项中指定。-p、-u和-U选项是互斥的，同时只可以使用这其中一个选项。试图组合使用这些选项时，会得到一个错误:<br>命令：<code>top -p 1248 -u root</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-U-p-u-error.png" alt=""></p><p><strong>实例：<code>-b</code>：批处理模式</strong><br>描述：-b选项以批处理模式启动top命令，在文件中保存输出时是很有用的。</p><p><strong>实例：<code>-c</code>：命令/程序名 触发:</strong><br>描述：显示进程启动时的完整路径和程序名。</p><p><strong>实例：<code>-d</code>：设置延迟间隔</strong><br>描述：设置top的显示间隔(以秒计)。<br>命令：<code>top -d 1</code></p><p><strong>实例：<code>-i</code>：切换显示空闲进程</strong><br>命令：<code>top -i</code></p><p><strong>实例：<code>-n</code>：特定重复次数后退出</strong><br>描述：top输出保持刷新，直到按q键或者到达指定次数。下面的命令将在10次重复之后自动退出。<br>命令：<code>top -n 10</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;top&lt;/code&gt;命令可以实时动态地查看系统的整体运行情况，是一个综合了多方信息监测系统西能和运行信息的使用工具。top命令提供了互动式的界面，用热键管理。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.oxysun.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux df总结</title>
    <link href="http://www.oxysun.cn/2018/06/11/Linux/daily-command-df/"/>
    <id>http://www.oxysun.cn/2018/06/11/Linux/daily-command-df/</id>
    <published>2018-06-10T22:16:12.000Z</published>
    <updated>2018-06-16T08:07:35.984Z</updated>
    
    <content type="html"><![CDATA[<p>df（disk filesystem 的简称）用于显示 Linux 系统的磁盘利用率。</p><a id="more"></a><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p>df [选项] [文件]</p><h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>显示文件系统磁盘空间使用情况。默认显示单位为KB。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p><h2 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h2><ul><li>-a或–all：全部文件系统列表。</li><li>-h或–human-readable：方便阅读方式显示。</li><li>-H或–si：等于“-h”，但是计算式，1K=1000，而不是1K=1024。</li><li>-i或–inodes：显示inode信息。</li><li>-k或–kilobytes：区块为1024字节。</li><li>-l或–local：只显示本地文件系统。</li><li>-m或–megabytes：区块为1048576字节。</li><li>–no-sync：忽略sync命令。</li><li>-P或–portability：输出格式为POSIX。</li><li>–sync：在取得磁盘信息前，先执行sync命令。</li><li>-T或–print-type：文件系统类型。</li><li>–block-size=&lt;区块大小&gt;：指定区块大小。</li><li>-t&lt;文件系统类型&gt;或–type=&lt;文件系统类型&gt;：只显示选定文件系统的磁盘信息。</li><li>-x&lt;文件系统类型&gt;或–exclude-type=&lt;文件系统类型&gt;：不显示选定文件系统的磁盘信息。</li><li>–help：显示帮助信息。</li><li>–version：显示版本信息。</li></ul><h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2><p><strong>实例：1. 检查文件系统磁盘空间使用情况</strong><br>描述：显示设备名称、总块数、总磁盘空间、已用磁盘空间、可用磁盘空间和文件系统上的挂载点。<br>命令：df<br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/df/df.png" alt=""></p><p><strong>实例：2. 以人类可读的格式显示磁盘使用情况</strong><br>描述：以人类可读格式显示信息。<br>命令：df -h<br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/df/df-h.png" alt=""></p><p><strong>实例：3. 检查所有文件系统磁盘使用空间信息</strong><br>描述：与上述相同，但它也显示虚拟文件系统的信息以及所有文件系统磁盘使用情况和内存使用情况。<br>命令：df -a<br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/df/df-a.png" alt=""></p><p><strong>实例：4. 显示文件系统的类型</strong><br>描述：以人类可读格式（h）显示文件系统的类型（T）信息。<br>命令：df -hT<br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/df/df-hT.png" alt=""></p><p><strong>实例：5. 检查特定分区的信息</strong><br>描述：-hT将以可读格式显示/root的信息。<br>命令：df -hT /root<br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/df/df-hT-path.png" alt=""></p><p><strong>实例：6. 筛选指定的文件系统类型</strong><br>描述：筛选文件系统类型为ext4的磁盘使用情况。<br>命令：df -t ext4 -hT<br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/df/df-t.png" alt=""></p><p><strong>实例：7. 排除指定的文件系统类型</strong><br>描述：排除文件系统类型为ext4的磁盘，显示剩下的磁盘类型使用情况。<br>命令：df -x ext4 -hT<br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/df/df-x.png" alt=""></p><p><strong>实例：8. 显示文件系统的inodes信息</strong><br>描述：-i选项显示文件系统使用的inode数量及其百分比的信息。<br>命令：df -i<br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/df/df-i.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;df（disk filesystem 的简称）用于显示 Linux 系统的磁盘利用率。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.oxysun.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux du总结</title>
    <link href="http://www.oxysun.cn/2018/06/11/Linux/daily-command-du/"/>
    <id>http://www.oxysun.cn/2018/06/11/Linux/daily-command-du/</id>
    <published>2018-06-10T21:50:41.000Z</published>
    <updated>2018-06-16T08:07:35.984Z</updated>
    
    <content type="html"><![CDATA[<p>Linux中du（disk usage 的简称）命令用于检查计算机上文件和目录的磁盘使用情况，可以递归显示文件和目录。</p><a id="more"></a><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p>du [选项] [文件]</p><h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>显示每个文件和目录的磁盘使用空间。</p><h2 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h2><ul><li>-a或-all：显示目录中个别文件的大小。   </li><li>-b或-bytes：显示目录或文件大小时，以byte为单位。   </li><li>-c或–total：除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。 </li><li>-k或–kilobytes：以KB(1024bytes)为单位输出。</li><li>-m或–megabytes：以MB为单位输出。   </li><li>-s或–summarize：仅显示总计，只列出最后加总的值。</li><li>-h或–human-readable：以K，M，G为单位，提高信息的可读性。</li><li>-x或–one-file-xystem：以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。 </li><li>-L&lt;符号链接&gt;或–dereference&lt;符号链接&gt;：显示选项中所指定符号链接的源文件大小。   </li><li>-S或–separate-dirs：显示个别目录的大小时，并不含其子目录的大小。 </li><li>-X&lt;文件&gt;或–exclude-from=&lt;文件&gt;：在&lt;文件&gt;指定目录或文件。   </li><li>–exclude=&lt;目录或文件&gt;：略过指定的目录或文件。    </li><li>-D或–dereference-args ：显示指定符号链接的源文件大小。   </li><li>-H或–si：与-h参数相同，但是K，M，G是以1000为换算单位。   </li><li>-l或–count-links：重复计算硬件链接的文件。  </li></ul><h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2><p><strong>实例：1. 找出 <code>/root</code> 目录树及其每个子目录的磁盘使用情况摘要</strong><br>描述：以下命令的输出显示了 <code>/root</code> 目录以及其子目录的磁盘块数。<br>命令：du /root<br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/du/du-path.png" alt=""></p><p><strong>实例：2. 以人类可读格式也就是 kb、mb 等显示文件/目录大小</strong><br>命令：du -h /root<br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/du/du-h-path.png" alt=""></p><p><strong>实例：3. 目录的总磁盘使用大小摘要</strong><br>命令：du -s /root<br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/du/du-s-path.png" alt=""></p><p><strong>实例：4. 所有文件和目录的磁盘使用情况</strong><br>命令：du -a /root<br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/du/du-a-path.png" alt=""></p><p><strong>实例：5. 总的使用磁盘空间</strong><br>描述：-c选项在最后一行提供了一个总的使用磁盘空间。<br>命令：du -c /root<br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/du/du-c-path.png" alt=""></p><p><strong>实例：6. 排除给定模式的文件或目录</strong><br>描述：在计算/root的总大小时排除.ssh文件。<br>命令：du -h –exclude=”.ssh” /root<br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/du/du-h-exclude-path.png" alt=""></p><p><strong>实例：7. 根据修改时间显示磁盘使用情况</strong><br>描述：在计算/root的总大小时排除.ssh文件。<br>命令：du -h –exclude=”.ssh” /root<br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/du/du-time.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux中du（disk usage 的简称）命令用于检查计算机上文件和目录的磁盘使用情况，可以递归显示文件和目录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.oxysun.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux cat总结</title>
    <link href="http://www.oxysun.cn/2018/06/10/Linux/daily-command-cat/"/>
    <id>http://www.oxysun.cn/2018/06/10/Linux/daily-command-cat/</id>
    <published>2018-06-10T15:58:31.000Z</published>
    <updated>2018-06-16T08:07:35.984Z</updated>
    
    <content type="html"><![CDATA[<p>cat（concatenate）命令可以创建单个或多个文件，查看文件的内容和控制字符，连接文件以及在终端或文件中重定向输出。</p><a id="more"></a><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>cat [选项] [文件]</code></p><h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>cat（concatenate）命令可以创建单个或多个文件，查看文件的内容和控制字符，连接文件以及在终端或文件中重定向输出。<br>cat命令不会在文件分页处停下来，而是一下子显示完整整个文件。如果希望每次显示一页，可以使用more命令或把cat命令的输出通过管道传递到另外一个具有分页功能的命令中。</p><h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><ul><li>-n或-number：显示行号。</li><li>-b或–number-nonblank：和-n相似，只不过对于空白行不编号。</li><li>-s或–squeeze-blank：当遇到有连续两行以上的空白行，就代换为一行的空白行。</li><li>-A：显示不可打印字符，行尾显示$，等价于-vET。</li><li>-v或–show-nonprinting：使用^和M-引用，除了LFD和TAB之外。</li><li>-E或–show-ends：在每行结束处显示$。</li><li>-e：等价于”-vE”选项。</li><li>-T或–show-tabs 将TAB字符显示为^I。</li><li>-t：显示 tab 分隔符，等价于”-vT”选项。</li></ul><h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2><p><strong>实例：1. 显示文件的内容</strong><br>描述：打印passwd文件的所有内容。<br>命令：<code>cat /etc/passwd</code> </p><p><img src="http://p9xqnn501.bkt.clouddn.com/cat/cat-file.png" alt=""></p><p><strong>实例：2. 查看终端中多个文件的内容</strong><br>描述：打印linux.txt和Find.txt两个文件的内容。<br>命令：<code>cat linux.txt Find.txt</code><br>等同于：<code>cat linux.txt; cat Find.txt;</code> </p><p><img src="http://p9xqnn501.bkt.clouddn.com/cat/cat-mul-file.png" alt=""></p><p><strong>实例：3. 从文件中读入内容</strong><br>描述：从文件fairy中读取内容，通过cat显示到标准输出上。cat默认是加上&lt;操作符。<br>命令：<code>cat &lt; fairy</code> </p><p><img src="http://p9xqnn501.bkt.clouddn.com/cat/cat-read.png" alt=""></p><p><strong>实例：4. 与more或less命令配合使用</strong><br>描述：输入完成后，按CTRL+D退出输入。输入的内容通过IO重定向创建文件被写入到test文件中。<br>命令：<code>cat /etc/passwd | more</code> </p><p><img src="http://p9xqnn501.bkt.clouddn.com/cat/cat-more.png" alt=""></p><p><strong>实例：5. 显示行号</strong><br>描述：在打印的行前加上行号，从1开始。<br>命令：<code>cat -n fairy</code> </p><p><img src="http://p9xqnn501.bkt.clouddn.com/cat/cat-n.png" alt=""></p><p><strong>实例：6. 在结尾显示<code>$</code>符号</strong><br>描述：<code>$</code>符号将出现在每行的末尾和每个空行之间，这个选项有助于压缩行数。<br>命令：<code>cat -e fairy</code> </p><p><img src="http://p9xqnn501.bkt.clouddn.com/cat/cat-e.png" alt=""></p><p><strong>实例：7. 显示TAB分隔符</strong><br>描述：TAB空格将以^I显示。<br>命令：<code>cat -T test</code> </p><p><img src="http://p9xqnn501.bkt.clouddn.com/cat/cat-T.png" alt=""></p><p><strong>实例：8. 通过IO重定向创建文件</strong><br>描述：输入完成后，按CTRL+D退出输入。输入的内容通过IO重定向创建文件被写入到test文件中。<br>命令：<code>cat &gt; test</code> </p><p><img src="http://p9xqnn501.bkt.clouddn.com/cat/cat-to-file.png" alt=""></p><p><strong>实例：9. 使用重定向机制追加到文件中</strong><br>描述：将文件aa的内容追加到文件bb中。<br>命令：<code>cat aa &gt;&gt; bb</code> </p><p><img src="http://p9xqnn501.bkt.clouddn.com/cat/cat-append.png" alt=""></p><p><strong>实例：10. 重定向多个文件到一个文件中</strong><br>描述：将文件aa和bb的内容合并输入到cc文件中。若cc不存在，则创建，若存在，则覆盖它。<br>命令：<code>cat aa bb &gt; cc</code> </p><p><img src="http://p9xqnn501.bkt.clouddn.com/cat/cat-merge.png" alt=""></p><p><strong>实例：11. 重定向多个文件到一个文件中并排序</strong><br>描述：将文件aa，bb和cc的内容合并，通过管道并排序后输入到dd文件中。若dd不存在，则创建，若存在，则覆盖它。<br>命令：<code>cat aa bb cc | sort &gt; dd</code> </p><p><img src="http://p9xqnn501.bkt.clouddn.com/cat/cat-merge-and-sort.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;cat（concatenate）命令可以创建单个或多个文件，查看文件的内容和控制字符，连接文件以及在终端或文件中重定向输出。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.oxysun.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux read总结</title>
    <link href="http://www.oxysun.cn/2018/06/10/Linux/daily-command-read/"/>
    <id>http://www.oxysun.cn/2018/06/10/Linux/daily-command-read/</id>
    <published>2018-06-10T13:36:30.000Z</published>
    <updated>2018-06-16T08:07:35.988Z</updated>
    
    <content type="html"><![CDATA[<p>read命令从键盘或文件的某一行文本中读入信息，并将其赋给一个变量。</p><a id="more"></a><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>read 变量1 [变量2...]</code></p><h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>read命令从键盘或文件的某一行文本中读入信息，并将其赋给一个变量。在read命令后面，如果只指定了一个变量，那么read会把所有的输入赋给该变量，直至遇到第一个文件结束符或回车。如果没有指定变量名，读取的数据将被自动赋值给特定的变量REPLY。</p><h2 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h2><ul><li>-a：后跟一个变量，该变量会被认为是个数组，然后给其赋值，默认是以空格为分割符。</li><li>-d：后面跟一个标志符，其实只有其后的第一个字符有用，作为结束的标志，会举例说  明。</li><li>-p：后面跟提示信息，即在输入前打印提示信息。</li><li>-e：在输入的时候可以时候命令补全功能。</li><li>-n：后跟一个数字，定义输入文本的长度，很实用。</li><li>-r：屏蔽\，如果没有该选项，则\作为一个转义字符，有的话\就是个正常的字符了。</li><li>-s：安静模式，在输入字符时不再屏幕上显示，例如login时输入密码。</li><li>-t：后面跟秒数，定义输入字符的等待时间。</li><li>-u：后面跟fd，从文件描述符中读入，该文件描述符可以是exec新开启的。<h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2></li></ul><p><strong>实例：1. 从标准输入读取输入并赋值给变量</strong><br>描述：从标准输入读取输入并赋值给变量name。<br>命令：<code>read name</code> </p><p><img src="http://p9xqnn501.bkt.clouddn.com/read/read-var.png" alt=""></p><p><strong>实例：2. 读入并赋给多个变量</strong><br>描述：从标准输入读取输入到第一个空格或者回车，将输入的第一个单词放到变量one中，并将该行其他的输入放在变量two中。<br>命令：<code>read one two</code> </p><p><img src="http://p9xqnn501.bkt.clouddn.com/read/read-mul-var.png" alt=""></p><p><strong>实例：3. 未指定变量</strong><br>描述：从标准输入读取一行并赋值给特定变量REPLY。<br>命令：<code>read</code> </p><p><img src="http://p9xqnn501.bkt.clouddn.com/read/read.png" alt=""></p><p><strong>实例：4. 读入并赋给数组</strong><br>描述：把单词清单读入myarray的数组里。<br>命令：<code>read -a myarray</code> </p><p><img src="http://p9xqnn501.bkt.clouddn.com/read/read-a.png" alt=""></p><p><strong>实例：5. 打印提示</strong><br>描述：打印提示（text），等待输入，并将输入存储在REPLY中。<br>命令：<code>read -p &quot;text&quot;</code> </p><p><img src="http://p9xqnn501.bkt.clouddn.com/read/read-a.png" alt=""></p><p><strong>实例：6. 允许输入包含反斜杠</strong><br>描述：允许输入包含反斜杠。<br>命令：<code>read -r line</code> </p><p><img src="http://p9xqnn501.bkt.clouddn.com/read/read-r.png" alt=""></p><p><strong>实例：7. 等待读取</strong><br>描述：指定读取等待时间为3秒。<br>命令：<code>read -t 3</code> </p><p><strong>实例：8. 读取指定数量的字符</strong><br>描述：从输入中读取两个字符并存入变量var，不需要按回车读取。<br>命令：<code>read -n 2 var</code> </p><p><img src="http://p9xqnn501.bkt.clouddn.com/read/read-n.png" alt=""></p><p><strong>实例：9. 指定结束符</strong><br>描述：用定界符“:”结束输入行。<br>命令：<code>read -d &quot;:&quot; var</code> </p><p><img src="http://p9xqnn501.bkt.clouddn.com/read/read-d.png" alt=""></p><p><strong>实例：10. 终端输入密码不显示密码</strong><br>描述：终端输入密码不显示密码。<br>命令：<code>read -p &quot;输入密码：&quot; -s pwd</code> </p><p><img src="http://p9xqnn501.bkt.clouddn.com/read/read-s.png" alt=""></p><p>第二种方式<br>脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#! /usr/bin/bash</span><br><span class="line">stty -echo</span><br><span class="line">read -p &quot;输入密码：&quot; pwd</span><br><span class="line">stty echo</span><br><span class="line">echo</span><br><span class="line">echo 输入完毕。</span><br></pre></td></tr></table></figure><p><img src="http://p9xqnn501.bkt.clouddn.com/read/read-no-echo.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;read命令从键盘或文件的某一行文本中读入信息，并将其赋给一个变量。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.oxysun.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux IO Redirection总结</title>
    <link href="http://www.oxysun.cn/2018/06/09/Linux/daily-command-io-redirection/"/>
    <id>http://www.oxysun.cn/2018/06/09/Linux/daily-command-io-redirection/</id>
    <published>2018-06-09T12:40:05.000Z</published>
    <updated>2018-06-16T08:07:35.986Z</updated>
    
    <content type="html"><![CDATA[<p>一个文件描述符就是文件系统为了跟踪这个打开的文件而分配给它的一个数字，可以将其理解为文件指针的一个简单版本，与C语言中的文件句柄的概念类似。<br>Linux中默认情况下始终有3个「文件」处于打开状态，分别是stdin（键盘）、stdout（屏幕）和stderr（错误消息输出到屏幕上）。这3个文件和其他打开的文件都可以被重定向。重定向，就是捕捉一个文件、命令、程序、脚本，或者是脚本中的代码块的输出，然后将这些输出作为输入发送到另一个文件、命令、程序或脚本中。<br>每个打开的文件都会分配一个文件描述符。stdin、stdout和stderr的文件描述符分别是0、1和2。除了这3个文件，对于其他需要打开的文件，保留了文件描述符3到9。在某些情况下，将这些额外的文件描述符分配给 stdin、stdout 或 stderr 作为临时的副本链接是非常有用的。在经过复杂的重定向和刷新之后需要把它们恢复成正常状态。</p><a id="more"></a><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>命令1|命令2</code></p><h2 id="命令列表"><a href="#命令列表" class="headerlink" title="命令列表"></a>命令列表</h2><p>command &gt; filename：把标准输出重定向到一个新文件中。<br>command &gt;&gt; filename：把标准输出重定向到一个文件中（追加）。<br>command 1 &gt; filename：把标准输出重定向到一个文件中。<br>command &gt; filename 2&gt;&amp;1：把标准输出和标准错误一起重定向到一个文件中。<br>command 2 &gt; filename：把标准错误重定向到一个文件中。<br>command 2 &gt;&gt; filename：把标准错误重定向到一个文件中（追加）。<br>command &gt;&gt; filename 2&gt;&amp;1：把标准输出和标准错误一起重定向到一个文件中（追加）。<br>command &lt; filename &gt; filename2：command命令以filename文件作为标准输入，以filename2文件作为标准输出。<br>command &lt; filename：command命令以filename文件作为标准输入。<br>command &lt;&lt; delimiter：从标准输入中读入，直至遇到delimiter分界符。<br>command &lt;&amp; m：把文件描述符m作为标准输入。<br>command &gt;&amp; m：把标准输出重定向到文件描述符m中。<br>command &lt;&amp;-：关闭标准输入。</p><h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2><p><strong>实例：1. &gt; file</strong><br>描述：将ls命令的stdout重定向到dir-tree.list文件。如果这个文件不存在，那就创建它，否则就覆盖。<br>命令：<code>ls -lR &gt; dir-tree.list</code><br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/redirection/redirection-&gt;.png" alt=""></p><p>描述：清空文件。&gt;将会把文件dir-tree.list变为一个空文件（size为0）。如果文件不存在，那会创建一个0长度的文件（与touch的效果相同）。:是一个占位符，不产生任何输出。也可以省略:占位符。<br>命令：<code>: &gt; dir-tree.list</code><br>或者：<code>&gt; dir-tree.list</code><br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/redirection/redirection-clear.png" alt=""></p><p><strong>实例：1. &gt;&gt; file</strong><br>描述：将stdout重定向到一个文件。如果文件不存在，那么就创建它，如果存在，那么就追加到文件后边。<br>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">script.sh 1 &gt; filename</span><br><span class="line"># 重定向 stdout 到文件&quot;filename&quot;.</span><br><span class="line">script.sh 1 &gt;&gt; filename</span><br><span class="line"># 重定向并追加 stdout 到文件&quot;filename&quot;.</span><br><span class="line">script.sh 2 &gt; filename</span><br><span class="line"># 重定向 stderr 到文件&quot;filename&quot;.</span><br><span class="line">script.sh 2 &gt;&gt; filename</span><br><span class="line"># 重定向并追加 stderr 到文件&quot;filename&quot;.</span><br></pre></td></tr></table></figure></p><p><strong>实例：1. &amp;&gt; afile</strong><br>描述：将ls命令的stdout重定向到dir-tree.list文件。如果这个文件不存在，那就创建它，否则就覆盖。<br>命令：<code>ls -lR &gt; dir-tree.list</code><br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/redirection/redirection-clear.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个文件描述符就是文件系统为了跟踪这个打开的文件而分配给它的一个数字，可以将其理解为文件指针的一个简单版本，与C语言中的文件句柄的概念类似。&lt;br&gt;Linux中默认情况下始终有3个「文件」处于打开状态，分别是stdin（键盘）、stdout（屏幕）和stderr（错误消息输出到屏幕上）。这3个文件和其他打开的文件都可以被重定向。重定向，就是捕捉一个文件、命令、程序、脚本，或者是脚本中的代码块的输出，然后将这些输出作为输入发送到另一个文件、命令、程序或脚本中。&lt;br&gt;每个打开的文件都会分配一个文件描述符。stdin、stdout和stderr的文件描述符分别是0、1和2。除了这3个文件，对于其他需要打开的文件，保留了文件描述符3到9。在某些情况下，将这些额外的文件描述符分配给 stdin、stdout 或 stderr 作为临时的副本链接是非常有用的。在经过复杂的重定向和刷新之后需要把它们恢复成正常状态。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.oxysun.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux pipe总结</title>
    <link href="http://www.oxysun.cn/2018/06/09/Linux/daily-command-pipe/"/>
    <id>http://www.oxysun.cn/2018/06/09/Linux/daily-command-pipe/</id>
    <published>2018-06-09T11:39:41.000Z</published>
    <updated>2018-06-16T08:07:35.987Z</updated>
    
    <content type="html"><![CDATA[<p>管道能把一个命令的输出传递给另一个命令作为输入。管道用竖杠|表示.</p><a id="more"></a><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>命令1|命令2</code></p><h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>管道能处理经由前面一个指令传出的正确输出信息，即standard output信息，但对于standard error信息没有直接处理能力。然后传递给下一个命令，作为标准的输入standard input，管道右边的命令必须能够接收标准输入流命令。</p><p>能接收标准输入的命令才可以用在管道右边，否则传递过程中数据会被抛弃。常用来接收数据管道命令有：sed，awk，cut，head，top，less，more，wc，join，sort，split等等。</p><h2 id="管道命令与重定向的区别"><a href="#管道命令与重定向的区别" class="headerlink" title="管道命令与重定向的区别"></a>管道命令与重定向的区别</h2><ol><li><p>左边的命令应该有标准输出 | 右边的命令应该接受标准输入<br>左边的命令应该有标准输出 &gt; 右边只能是文件<br>左边的命令应该需要标准输入 &lt; 右边只能是文件</p></li><li><p>管道触发两个子进程执行|两边的程序，而重定向时在一个进程内执行。</p></li></ol><h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2><p><strong>实例：1. 重定向</strong><br>描述：重定向符号，右边只能是文件（普通文件，文件描述符，文件设备）。<br>命令：<code>grep -n &#39;Hello&#39; &lt; find.txt</code><br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/pipe/redirect-grep.png" alt=""></p><p><strong>实例：1. 管道</strong><br>描述：管道两边都必须是shell命令。<br>命令：<code>cat find.txt | grep -n &#39;Hello&#39;</code><br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/pipe/pipe-grep.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;管道能把一个命令的输出传递给另一个命令作为输入。管道用竖杠|表示.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.oxysun.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux tee总结</title>
    <link href="http://www.oxysun.cn/2018/06/09/Linux/daily-command-tee/"/>
    <id>http://www.oxysun.cn/2018/06/09/Linux/daily-command-tee/</id>
    <published>2018-06-09T10:15:07.000Z</published>
    <updated>2018-06-16T08:07:35.989Z</updated>
    
    <content type="html"><![CDATA[<p>tee命令可以用字母T来形象地表示，可以在看到输出的同时，也将其存入一个文件。</p><a id="more"></a><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>tee [选项] [文件]</code></p><h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>tee命令把输出的一个副本输送到标准输出，另一个副本拷贝到相应的文件中。<br>tee命令从标准输入中复制到每一个文件，并输出到标准输出。</p><h2 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h2><ul><li>-a或–append：向文件中重定向时使用追加模式。</li><li>-i或–ignore-interrupts：忽略中断（interrupt）信号。</li></ul><h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2><p><strong>实例：1. 输出的标准输出的同时输出到文件</strong><br>描述：将ping的内容输出到标准输出，同时也输出到output.txt文件中。<br>命令：<code>ping yahoo.com | tee output.txt</code><br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/tee/tee.png" alt=""></p><p><strong>实例：2. 向输出文件追加内容</strong><br>描述：将ping的内容输出到标准输出，同时也以追加的方式输出到output.txt文件中。<br>命令：<code>ping baidu.com | tee -a output.txt</code><br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/tee/tee-a.png" alt=""></p><p><strong>实例：3. 输出到标准输出两次</strong><br>描述：输出到标准输出两次，-表示标准输出。<br>命令：<code>ls | tee -</code><br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/tee/tee--.png" alt=""></p><p><strong>实例：4. 同时写入多个文件</strong><br>描述：将ping的内容输出到标准输出两次，同时也以追加的方式输出到output.txt文件中。<br>命令：<code>ping yahoo.com | tee output.txt log.txt -</code><br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/tee/tee-multiple--.png" alt=""></p><p><strong>实例：5. tee命令的输出内容直接作为另一个命令的输入内容</strong><br>描述：列出当前目录下的文件，同时写入到output.txt文件中，然后再将内容通过管道重定向给wc命令统计行数。<br>命令：<code>ls -ilh | tee output.txt | wc -l</code><br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/tee/tee-other.png" alt=""></p><p><strong>实例：6. 提升文件写入权限</strong><br>描述：使用Vim编辑器打开文件，并且做了跟多更改，然后当尝试保存修改会得到一个报错，那是一个root所拥有的文件，意味着你需要使用sudo权限保存修改。在Vim内使用tee命令来提高权限。<br>命令：<code>:w !sudo tee %</code><br>上述命令需要输入root密码，然后就可以保存修改了。</p><p><strong>实例：7. 忽视中断</strong><br>描述：-i命令行选项使tee命令忽视通常由ctrl+c组合键发起的中断信号（SIGINT）。tee命令可以优雅的退出。<br>命令：<code>ping yahoo.com | tee -i output.txt</code><br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/tee/tee-i.png" alt=""></p><p><strong>实例：8. 把标准错误输出也保存到文件</strong><br>描述：使用tee命令把标准错误输出也保存到文件。<br>命令：<code>ls &quot;*&quot; 2&gt;&amp;1 | tee ls.txt</code><br>输出：</p><p><img src="http://p9xqnn501.bkt.clouddn.com/tee/tee-error.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;tee命令可以用字母T来形象地表示，可以在看到输出的同时，也将其存入一个文件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.oxysun.cn/tags/Linux/"/>
    
  </entry>
  
</feed>
