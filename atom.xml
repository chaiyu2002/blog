<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>老兵驿站</title>
  
  <subtitle>一个IT老兵的驿站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.oxysun.cn/"/>
  <updated>2018-07-25T15:13:20.452Z</updated>
  <id>https://www.oxysun.cn/</id>
  
  <author>
    <name>荒于嬉</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git：修改远程仓库地址</title>
    <link href="https://www.oxysun.cn/git/git-remote-set-url.html"/>
    <id>https://www.oxysun.cn/git/git-remote-set-url.html</id>
    <published>2018-07-25T14:58:00.000Z</published>
    <updated>2018-07-25T15:13:20.452Z</updated>
    
    <content type="html"><![CDATA[<p>Git：修改远程仓库地址。<br><a id="more"></a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有的时候，我们会遇到Git远程仓库IP发生改变，这样的改变可能是：</p><ol><li>远程服务器挂了：远程服务器上的Git仓库被一个爱折腾的同事给删掉了，这个时候把他骂死也没用了，这要是SVN就没办法了，还好是Git，可以从本机的仓库去恢复这个远程仓库。</li><li>远程服务器迁移了，IP变了。<br>这个时候就要用到这个命令了。</li></ol><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git-remote - Manage set of tracked repositories（管理被追踪的仓库集合）</span><br></pre></td></tr></table></figure><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url [--push] &lt;name&gt; &lt;newurl&gt; [&lt;oldurl&gt;]</span><br><span class="line">git remote set-url --add [--push] &lt;name&gt; &lt;newurl&gt;</span><br><span class="line">git remote set-url --delete [--push] &lt;name&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure><p>修改远程仓库的url只是这个命令的一个功能。</p><p>记得很久以前（刚毕业的时候）从一本书中看到，中括号表示是可选项，尖括号表示为必选项，现在找不到了，上网查了查，可以参考<a href="https://stackoverflow.com/questions/23242493/linux-unix-man-page-syntax-conventions" target="_blank" rel="noopener">这里</a>。关于这个问题，接触过的很多同事都是糊里糊涂的，我觉得这样总是不好，搞计算机，应该严谨一些，做事情，还是应该寻根究底。</p><p>所以，要修改远程仓库，只需要进入代码目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line"># 查看当前的远程仓库</span><br><span class="line"></span><br><span class="line">git remote set-url origin https://where you want to put your repository to.git</span><br><span class="line"># 修改为想要设置的远程仓库</span><br><span class="line"></span><br><span class="line">git remote -v</span><br><span class="line">#验证一下</span><br></pre></td></tr></table></figure><p>大功告成，亲个嘴（韦小宝语）。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://git-scm.com/docs/git-remote。" target="_blank" rel="noopener">https://git-scm.com/docs/git-remote。</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git：修改远程仓库地址。&lt;br&gt;
    
    </summary>
    
      <category term="Git" scheme="https://www.oxysun.cn/categories/Git/"/>
    
    
      <category term="Git" scheme="https://www.oxysun.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git：revert的使用</title>
    <link href="https://www.oxysun.cn/git/git-revert.html"/>
    <id>https://www.oxysun.cn/git/git-revert.html</id>
    <published>2018-07-24T14:10:00.000Z</published>
    <updated>2018-07-24T14:10:39.911Z</updated>
    
    <content type="html"><![CDATA[<p>Git：revert的使用。<br><a id="more"></a></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git-revert - Revert some existing commits // 撤销一些已经存在的提交</span><br></pre></td></tr></table></figure><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git revert [--[no-]edit] [-n] [-m parent-number] [-s] [-S[&lt;keyid&gt;]] &lt;commit&gt;…​</span><br><span class="line">git revert --continue</span><br><span class="line">git revert --quit</span><br><span class="line">git revert --abort</span><br></pre></td></tr></table></figure><h1 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h1><blockquote><p>Given one or more existing commits, revert the changes that the related patches introduce, and record some new commits that record them. This requires your working tree to be clean (no modifications from the HEAD commit).<br>Note: git revert is used to record some new commits to reverse the effect of some earlier commits (often only a faulty one). If you want to throw away all uncommitted changes in your working directory, you should see git-reset[1], particularly the –hard option. If you want to extract specific files as they were in another commit, you should see git-checkout[1], specifically the git checkout <commit> – <filename> syntax. Take care with these alternatives as both will discard uncommitted changes in your working directory.</filename></commit></p></blockquote><p>这个工具的使用场景有一点复杂，所以把原本的介绍贴在这里，下面附上翻译：<br>给定一个或多个现有提交，还原由这些提交引入的更改，并用新的提交去记录。 这需要您的工作树是干净的（没有对于<code>HEAD</code>的修改）。注意：<code>git revert</code>用于记录一些新的提交以还原某些早期提交的效果（通常是一个错误的提交）。 如果你想丢弃工作目录中所有未提交的更改，你应该看到<code>git-reset [1]</code>，特别是–hard选项。 如果你想在另一个提交中提取特定文件，你应该看到<code>git-checkout [1]</code>，特别是<code>git checkout &lt;commit&gt; - &lt;filename&gt;</code>语法。 请注意这些替代方案，因为它们都会丢弃工作目录中未提交的更改。</p><p>意思是，如果你想撤销之前的一个或几个提交带来的修改，那么使用这个工具；如果想放弃工作目录的修改（并没有提交），那么你应该使用<code>git reset</code>；或者你只是想检出一个文件的某一个版本，那么使用<code>git checkout</code>。</p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>摘录了官网的两个例子：<br><strong>实例：</strong> 撤销HEAD指针之前的第3个提交，并且生成一个新的提交。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert HEAD~3</span><br></pre></td></tr></table></figure><blockquote><p>Revert the changes specified by the fourth last commit in HEAD and create a new commit with the reverted changes.</p></blockquote><p><strong>实例：</strong> 撤销从master之前第5个提交到之前第3个提交的变化（这么看来，前面是开区间，第6个没有被包含；后面是闭区间，包含了第3个）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert -n master~5..master~2</span><br></pre></td></tr></table></figure><blockquote><p>Revert the changes done by commits from the fifth last commit in master (included) to the third last commit in master (included), but do not create any commit with the reverted changes. The revert only modifies the working tree and the index.</p></blockquote><p><strong>实例：</strong> 撤销某个提交带来的修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert &lt;commit&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git：revert的使用。&lt;br&gt;
    
    </summary>
    
      <category term="Git" scheme="https://www.oxysun.cn/categories/Git/"/>
    
    
      <category term="Git" scheme="https://www.oxysun.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>区块链：教程 | 以太坊智能合约编程之菜鸟教程</title>
    <link href="https://www.oxysun.cn/blockchain/mongodb-collection-aggregation-introduction.html"/>
    <id>https://www.oxysun.cn/blockchain/mongodb-collection-aggregation-introduction.html</id>
    <published>2018-07-23T14:37:00.000Z</published>
    <updated>2018-07-23T14:38:09.946Z</updated>
    
    <content type="html"><![CDATA[<p>区块链：教程 | 以太坊智能合约编程之菜鸟教程。<br><a id="more"></a></p><blockquote><p>这篇介绍以太坊合约的文章写得很好，在查找了这么多资料，进行对比之后，感觉阅读这一篇就可以大体理解以太坊编程的原理，如果对个别的知识点还有点含糊，可以相应地去查一查，就是以这篇为主干，别的资料为辅。稍微整理了一下格式，以及修改了一些半角符号。</p></blockquote><p><em>译注：<a href="http://consensys.github.io/developers/articles/101-noob-intro/" target="_blank" rel="noopener">原文</a>首发于ConsenSys开发者博客，原作者为Eva以及ConsenSys的开发团队。如果您想要获取更多及时信息，可以访问<a href="https://consensys.net/" target="_blank" rel="noopener">ConsenSys</a>首页点击左下角Newsletter订阅邮件。本文的翻译获得了ConsenSys创始人Lubin先生的授权。</em></p><p>有些人说以太坊太难对付，于是我们(译注：指<a href="http://consensys.net" target="_blank" rel="noopener">Consensys</a>, 下同)写了这篇文章来帮助大家学习如何利用以太坊编写智能合约和应用。这里所用到的工具，钱包，应用程序以及整个生态系统仍处于开发状态，它们将来会更好用！</p><ul><li><a href="#%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86.%20%E6%A6%82%E8%BF%B0">第一部分</a>概述，讨论了关键概念，几大以太坊客户端以及写智能合约用到的编程语言。</li><li><a href="#%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86.%20DApp%E6%A1%86%E6%9E%B6,%20%E5%B7%A5%E5%85%B7%E4%BB%A5%E5%8F%8A%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B">第二部分</a>讨论了总体的工作流程，以及目前流行的一些DApp框架和工具。</li><li><a href="#%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86.%20%E7%BC%96%E7%A8%8B">第三部分</a>主要关于编程，我们将学习如何使用Truffle来为智能合约编写测试和构建DApp。</li></ul><h2 id="第一部分-概述"><a href="#第一部分-概述" class="headerlink" title="第一部分 概述"></a>第一部分 概述</h2><p>如果你对诸如比特币以及其工作原理等密码学货币的概念完全陌生，我们建议你先看看Andreas Antonopoulos所著的<a href="https://github.com/aantonop/bitcoinbook" target="_blank" rel="noopener">Bitcoin Book</a>的头几章，然后读一下<a href="https://github.com/ethereum/wiki/wiki/White-Paper" target="_blank" rel="noopener">以太坊白皮书</a>。(译注：以太坊白皮书中文版请看 <a href="http://ethfans.org/posts/ethereum-whitepaper" target="_blank" rel="noopener">http://ethfans.org/posts/ethereum-whitepaper</a>)</p><p>如果你觉得白皮书中的章节太晦涩，也可以直接动手来熟悉以太坊。在以太坊上做开发并不要求你理解所有那些“密码经济计算机科学”(crypto economic computer science)，而白皮书的大部分是关于以太坊想对于比特币架构上的改进。</p><h3 id="新手教程"><a href="#新手教程" class="headerlink" title="新手教程"></a>新手教程</h3><p><a href="http://ethereum.org" target="_blank" rel="noopener">ethereum.org</a>提供了官方的新手入门教程，以及一个代币合约和众筹合约的教程。合约语言Solidity也有<a href="https://ethereum.github.io/solidity/" target="_blank" rel="noopener">官方文档</a>。学习智能合约的另一份不错的资料（也是我的入门资料）是<a href="https://dappsforbeginners.wordpress.com/" target="_blank" rel="noopener">dappsForBeginners</a>，不过现在可能有些过时了。</p><p>这篇文章的目的是成为上述资料的补充，同时介绍一些基本的开发者工具，使入门以太坊，智能合约以及构建DApps(decentralized apps, 分布式应用)更加容易。我会试图按照我自己(依然是新手)的理解来解释工作流程中的每一步是在做什么，我也得到了ConsenSys酷酷的开发者们的许多帮助。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>了解这些名词是一个不错的开始：</p><p><strong>公钥加密系统。</strong> Alice有一把公钥和一把私钥。她可以用她的私钥创建数字签名，而Bob可以用她的公钥来验证这个签名确实是用Alice的私钥创建的，也就是说，确实是Alice的签名。当你创建一个以太坊或者比特币钱包的时候，那长长的<code>0xdf...5f</code>地址实质上是个公钥，对应的私钥保存某处。类似于Coinbase的在线钱包可以帮你保管私钥，你也可以自己保管。如果你弄丢了存有资金的钱包的私钥，你就等于永远失去了那笔资金，因此你最好对私钥做好备份。过来人表示：通过踩坑学习到这一点是非常痛苦的…</p><p><strong>点对点网络。</strong> 就像BitTorrent, 以太坊分布式网络中的所有节点都地位平等，没有中心服务器。(未来会有半中心化的混合型服务出现为用户和开发者提供方便，这我们后面会讲到。)</p><p><strong>区块链。</strong> 区块链就像是一个全球唯一的帐簿，或者说是数据库，记录了网络中所有交易历史。</p><p><strong>以太坊虚拟机(EVM)。</strong> 它让你能在以太坊上写出更强大的程序（比特币上也可以写脚本程序）。它有时也用来指以太坊区块链，负责执行智能合约以及一切。</p><p><strong>节点。</strong> 你可以运行节点，通过它读写以太坊区块链，也即使用以太坊虚拟机。完全节点需要下载整个区块链。轻节点仍在开发中。</p><p><strong>矿工。</strong> 挖矿，也就是处理区块链上的区块的节点。这个网页可以看到当前活跃的一部分以太坊矿工：<a href="http://stats.ethdev.com" target="_blank" rel="noopener">stats.ethdev.com</a>。</p><p><strong>工作量证明。</strong> 矿工们总是在竞争解决一些数学问题。第一个解出答案的(算出下一个区块)将获得以太币作为奖励。然后所有节点都更新自己的区块链。所有想要算出下一个区块的矿工都有与其他节点保持同步，并且维护同一个区块链的动力，因此整个网络总是能达成共识。(注意：以太坊正计划转向没有矿工的权益证明系统(POS)，不过那不在本文讨论范围之内。)</p><p><strong>以太币。</strong> 缩写ETH。一种你可以购买和使用的真正的数字货币。这里是可以交易以太币的其中一家交易所的<a href="https://poloniex.com/exchange#usdt_eth" target="_blank" rel="noopener">走势图</a>。在写这篇文章的时候，1个以太币价值65美分。</p><p><strong>Gas。(汽油)</strong> 在以太坊上执行程序以及保存数据都要消耗一定量的以太币，Gas是以太币转换而成。这个机制用来保证效率。</p><p><strong>DApp。</strong> 以太坊社区把基于智能合约的应用称为去中心化的应用程序(Decentralized App)。DApp的目标是(或者应该是)让你的智能合约有一个友好的界面，外加一些额外的东西，例如IPFS（可以存储和读取数据的去中心化网络，不是出自以太坊团队但有类似的精神)。DApp可以跑在一台能与以太坊节点交互的中心化服务器上，也可以跑在任意一个以太坊平等节点上。(花一分钟思考一下：与一般的网站不同，DApp不能跑在普通的服务器上。他们需要提交交易到<strong>区块链</strong>并且从<strong>区块链</strong>而不是中心化数据库读取<strong>重要</strong>数据。相对于典型的用户登录系统，用户有可能被表示成一个钱包地址而其它用户数据保存在本地。许多事情都会与目前的web应用有不同架构。)</p><p>如果想看看从另一个新手视角怎么理解这些概念，请读<a href="https://medium.com/@user1/time-sure-does-fly-ed4518792679" target="_blank" rel="noopener">Just Enough Bitcoin for Ethereum</a>。</p><h3 id="以太坊客户端，智能合约语言"><a href="#以太坊客户端，智能合约语言" class="headerlink" title="以太坊客户端，智能合约语言"></a>以太坊客户端，智能合约语言</h3><p>编写和部署智能合约并不要求你运行一个以太坊节点。下面有列出<a href="#browser_ides">基于浏览器的IDE和API</a>。但如果是为了学习的话，还是应该运行一个以太坊节点，以便理解其中的基本组件，何况运行节点也不难。</p><h4 id="运行以太坊节点可用的客户端"><a href="#运行以太坊节点可用的客户端" class="headerlink" title="运行以太坊节点可用的客户端"></a>运行以太坊节点可用的客户端</h4><p>以太坊有许多不同语言的客户端实现（即多种与以太坊网络交互的方法），包括C++, Go, Python, Java, Haskell等等。为什么需要这么多实现？不同的实现能满足不同的需求（例如Haskell实现的目标是可以被数学验证），能使以太坊更加安全，能丰富整个生态系统。</p><p>在写作本文时，我使用的是Go语言实现的客户端geth (<a href="http://ethereum.github.io/go-ethereum/" target="_blank" rel="noopener">go-ethereum</a>)，其他时候还会使用一个叫testrpc的工具, 它使用了Python客户端<a href="https://github.com/ethereum/pyethereum" target="_blank" rel="noopener">pyethereum</a>。后面的例子会用到这些工具。</p><p>注: 我曾经使用过C++的客户端，现在仍然在用其中的ethminer组件和geth配合挖矿，因此这些不同的组件是可以一起工作的。<br>关于挖矿：挖矿很有趣，有点像精心照料你的室内盆栽，同时又是一种了解整个系统的方法。虽然以太币现在的价格可能连电费都补不齐，但以后谁知道呢。人们正在创造许多酷酷的DApp, 可能会让以太坊越来越流行。</p><p><strong>交互式控制台。</strong> 客户端运行起来后，你就可以同步区块链，建立钱包，收发以太币了。使用geth的一种方式是通过<a href="https://github.com/ethereum/go-ethereum/wiki/JavaScript-Console" target="_blank" rel="noopener">Javascript控制台</a>（JavaScript console, 类似你在chrome浏览器里面按F12出来的那个，只不过是跑在终端里）。此外还可以使用类似cURL的命令通过<a href="https://github.com/ethereum/wiki/wiki/JSON-RPC" target="_blank" rel="noopener">JSON RPC</a>来与客户端交互。本文的目标是带大家过一边DApp开发的流程，因此这块就不多说了。但是我们应该记住这些命令行工具是调试，配置节点，以及使用钱包的利器。</p><p><strong>在测试网络运行节点。</strong> 如果你在正式网络运行geth客户端，下载整个区块链与网络同步会需要相当时间。（你可以通过比较节点日志中打印的最后一个块号和<a href="http://stats.ethdev.com" target="_blank" rel="noopener">stats.ethdev.com</a>上列出的最新块来确定是否已经同步。) 另一个问题是在正式网络上跑智能合约需要实实在在的以太币。在测试网络上运行节点的话就没有这个问题。此时也不需要同步整个区块链，创建一个自己的私有链就勾了，对于开发来说更省时间。</p><p><strong>testrpc。</strong> 用geth可以创建一个测试网络，另一种更快的创建测试网络的方法是使用testrpc。Testrpc可以在启动时帮你创建一堆存有资金的测试账户。它的运行速度也更快因此更适合开发和测试。你可以从testrpc起步，然后随着合约慢慢成型，转移到geth创建的测试网络上 - 启动方法很简单，只需要指定一个networkid：<code>geth --networkid &quot;12345&quot;</code>。这里是<a href="https://github.com/ConsenSys/eth-testrpc" target="_blank" rel="noopener">testrpc的代码仓库</a>，下文我们还会再讲到它。</p><p>接下来我们来谈谈可用的编程语言，之后就可以开始真正的编程了。</p><h4 id="写智能合约用的编程语言"><a href="#写智能合约用的编程语言" class="headerlink" title="写智能合约用的编程语言"></a>写智能合约用的编程语言</h4><p><strong>用Solidity就好。</strong> 要写智能合约有好几种语言可选：有点类似Javascript的Solidity, 文件扩展名是<code>.sol</code>和Python接近的Serpent, 文件名以<code>.se</code>结尾。还有类似Lisp的LLL。Serpent曾经流行过一段时间，但现在最流行而且最稳定的要算是Solidity了，因此用Solidity就好。听说你喜欢Python? 用Solidity。</p><p><strong>solc编译器。</strong> 用Solidity写好智能合约之后，需要用solc来编译。它是一个来自C++客户端实现的组件（又一次，不同的实现产生互补），<a href="https://github.com/ethereum/webthree-umbrella/wiki" target="_blank" rel="noopener">这里</a>是安装方法。如果你不想安装solc也可以直接使用基于浏览器的编译器，例如<a href="https://chriseth.github.io/browser-solidity/" target="_blank" rel="noopener">Solidity real-time compiler</a>或者<a href="http://cosmo.to/" target="_blank" rel="noopener">Cosmo</a>。后文有关编程的部分会假设你安装了solc。</p><p>注意：以太坊正处于积极的开发中，有时候新的版本之间会有不同步。确认你使用的是最新的dev版本，或者稳定版本。如果遇到问题可以去以太坊项目对应的Gitter聊天室或者<a href="http://forums.ethereum.org" target="_blank" rel="noopener">forums.ethereum.org</a>上问问其他人在用什么版本。</p><p><strong>web3.js API。</strong> 当Solidity合约编译好并且发送到网络上之后，你可以使用以太坊的<a href="https://github.com/ethereum/wiki/wiki/JavaScript-API" target="_blank" rel="noopener">web3.js JavaScript API</a>来调用它，构建能与之交互的web应用。</p><p>以上就是在以太坊上编写智能合约和构建与之交互的DApp所需的基本工具。</p><h2 id="第二部分-DApp框架，工具以及工作流程"><a href="#第二部分-DApp框架，工具以及工作流程" class="headerlink" title="第二部分 DApp框架，工具以及工作流程"></a>第二部分 DApp框架，工具以及工作流程</h2><h3 id="DApp开发框架"><a href="#DApp开发框架" class="headerlink" title="DApp开发框架"></a>DApp开发框架</h3><p>虽然有上文提到的工具就可以进行开发了，但是使用社区大神们创造的框架会让开发更容易。</p><p><strong>Truffle and Embark。</strong> 是<a href="https://github.com/ConsenSys/truffle" target="_blank" rel="noopener">Truffle</a>把我领进了门。在Truffle出现之前的那个夏天，我目睹了一帮有天分的学生是如何不眠不休的参加一个hackathon（编程马拉松）活动的，虽然<a href="https://www.youtube.com/watch?v=TJBHTT88I8k" target="_blank" rel="noopener">结果相当不错</a>，但我还是吓到了。然后Truffle出现了，帮你处理掉大量无关紧要的小事情，让你可以迅速进入写代码-编译-部署-测试-打包DApp这个流程。另外一个相似的DApp构建与测试框架是<a href="https://iurimatias.github.io/embark-framework" target="_blank" rel="noopener">Embark</a>。我只用过Truffle, 但是两个阵营都拥有不少DApp大神。</p><p><strong>Meteor。</strong> 许多DApp开发者使用的另一套开发栈由web3.js和<a href="https://www.meteor.com/" target="_blank" rel="noopener">Meteor</a>组成，Meteor是一套通用webapp开发框架（<a href="https://github.com/ethereum/meteor-dapp-wallet" target="_blank" rel="noopener">ethereum-meteor-wallet</a>项目提供了一个很棒的入门实例，而<a href="https://github.com/SilentCicero" target="_blank" rel="noopener">SilentCiero</a>正在构建大量Meteor与web3.js和DApp集成的模板）。我下载并运行过一些不错的DApp是以这种方式构造的。在11月9日至13日的<a href="http://consensys.github.io/developers/articles/101-noob-intro/devcon.ethereum.org" target="_blank" rel="noopener">以太坊开发者大会ÐΞVCON1</a>上将有一些有趣的讨论，是关于使用这些工具构建DApp以及相关最佳实践的（会议将会在<a href="https://www.youtube.com/channel/UC6rYoXJ_3BbPyWx_GQDDRRQ" target="_blank" rel="noopener">YouTube</a>上直播）。</p><p><strong>APIs。</strong> <a href="http://blockapps.net/" target="_blank" rel="noopener">BlockApps.net</a>打算提供一套RESTful API给DApp使用以免去开发者运行本地节点的麻烦，这个中心化服务是基于以太坊Haskell实现的。这与DApp的去中心化模型背道而驰，但是在本地无法运行以太坊节点的场合非常有用，比如在你希望只有浏览器或者使用移动设备的用户也能使用你的DApp的时候。BlockApps提供了一个命令行工具<a href="https://github.com/blockapps/bloc" target="_blank" rel="noopener">bloc</a>，注册一个开发者帐号之后就可以使用。</p><p>许多人担心需要运行以太坊节点才能使用DApp的话会把用户吓跑，其实包括BlockApps在内的许多工具都能解决这个问题。<a href="https://metamask.io/" target="_blank" rel="noopener">Metamask</a>允许你在浏览器里面使用以太坊的功能而无需节点，以太坊官方提供的AlethZero或者AlethOne是正在开发中有易用界面的客户端，ConsenSys正在打造一个轻钱包<a href="https://github.com/ConsenSys/eth-lightwallet" target="_blank" rel="noopener">LightWallet</a>，这些工具都会让DApp的使用变得更容易。<a href="https://github.com/ethereum/wiki/wiki/White-Paper#scalability" target="_blank" rel="noopener">轻客户端</a>和水平分片(sharding)也在计划和开发之中。这是一个能进化出混合架构的P2P生态系统。</p><h3 id="智能合约集成开发环境-IDE"><a href="#智能合约集成开发环境-IDE" class="headerlink" title="智能合约集成开发环境 (IDE)"></a>智能合约集成开发环境 (IDE)</h3><p><strong>IDE。</strong> 以太坊官方出品了用来编写智能合约的<a href="https://github.com/ethereum/wiki/wiki/Mix:-The-DApp-IDE" target="_blank" rel="noopener">Mix IDE</a>，我还没用过但会尽快一试。</p><p><strong>基于浏览器的IDE。</strong> <a href="https://chriseth.github.io/browser-solidity" target="_blank" rel="noopener">Solidity real-time compiler</a>和<a href="http://cosmo.to/" target="_blank" rel="noopener">Cosmo</a>都可以让你快速开始在浏览器中编写智能合约。你甚至可以让这些工具使用你的本地节点，只要让本地节点开一个端口（注意安全！这些工具站点必须可信，而且千万不要把你的全部身家放在这样一个本地节点里面！<a href="http://cosmo.to/" target="_blank" rel="noopener">Cosmo UI</a>上有如何使用geth做到这一点的指引）。在你的智能合约调试通过之后，可以用开发框架来给它添加用户界面和打包成DApp，这正是Truffle的工作，后面的编程章节会有详细讲解。</p><p><a href="http://frontier.ether.camp/" target="_blank" rel="noopener">Ether.Camp</a>正在开发另一个强大的企业级浏览器IDE。他们的IDE将支持沙盒测试网络，自动生成用于测试的用户界面（取代后文将展示的手动编写测试），以及一个测试交易浏览器<a href="http://test.ether.camp/" target="_blank" rel="noopener">test.ether.camp</a>。当你的合约准备正式上线之前，使用他们的测试网络会是确保你的智能合约在一个接近真实的环境工作正常的好方法。他们也为正式网络提供了一个交易浏览器<a href="http://frontier.ether.camp/" target="_blank" rel="noopener">frontier.ether.camp</a>，上面可以看到每一笔交易的细节。在本文写作时Ether.Camp的IDE还只能通过邀请注册，预计很快会正式发布。</p><p><strong>合约和Dapp示例。</strong> 在Github上搜索DApp仓库和.sol文件可以看到进行中的有趣东西。这里有一个DApp大列表：<a href="http://dapps.ethercasts.com/" target="_blank" rel="noopener">dapps.ethercasts.com</a>，不过其中一些项目已经过时。<a href="http://ether.fund/contracts" target="_blank" rel="noopener">Ether.fund/contracts</a>上有一些Solidity和Serpent写的合约示例，但是不清楚这些例子有没有经过测试或者正确性验证。11月12日的<a href="https://devcon.ethereum.org/" target="_blank" rel="noopener">开发者大会ÐΞVCON1</a>将会有一整天的DApp主题演讲。</p><h3 id="部署智能合约的流程"><a href="#部署智能合约的流程" class="headerlink" title="部署智能合约的流程"></a>部署智能合约的流程</h3><p>流程如下：</p><ol><li>启动一个<strong>以太坊节点</strong> (例如geth或者testrpc)。</li><li>使用solc<em>_编译_</em>智能合约。 =&gt; 获得二进制代码。</li><li>将编译好的合约<strong>部署</strong>到网络。（这一步会消耗以太币，还需要使用你的节点的默认地址或者指定地址来给合约签名。） =&gt; 获得合约的区块链地址和ABI（合约接口的JSON表示，包括变量，事件和可以调用的方法）。(译注：作者在这里把ABI与合约接口弄混了。ABI是合约接口的二进制表示。)</li><li>用web3.js提供的JavaScript API来<strong>调用</strong>合约。（根据调用的类型有可能会消耗以太币。）</li></ol><p>下图详细描绘了这个流程：</p><p><img src="https://ethfans.org/uploads/photo/2015/1fc96327c8a1d60c8dc16f8ec1a2fe5d.png" alt="这里写图片描述"></p><p>你的DApp可以给用户提供一个界面先部署所需合约再使用之（如图1到4步），也可以假设合约已经部署了（常见方法），直接从使用合约（如图第6步）的界面开始。</p><h2 id="第三部分-编程"><a href="#第三部分-编程" class="headerlink" title="第三部分 编程"></a>第三部分 编程</h2><h3 id="在Truffle中进行测试"><a href="#在Truffle中进行测试" class="headerlink" title="在Truffle中进行测试"></a>在Truffle中进行测试</h3><p><a href="https://github.com/consensys/truffle" target="_blank" rel="noopener">Truffle</a>用来做智能合约的测试驱动开发(TDD)非常棒，我强烈推荐你在学习中使用它。它也是学习使用JavaScript Promise的一个好途径，例如deferred和异步调用。Promise机制有点像是说“做这件事，如果结果是这样，做甲，如果结果是那样，做乙… 与此同时不要在那儿干等着结果返回，行不？”。Truffle使用了包装web3.js的一个JS Promise框架<a href="https://github.com/ConsenSys/ether-pudding" target="_blank" rel="noopener">Pudding</a>（因此它为为你安装web3.js）。(译注：Promise是流行于JavaScript社区中的一种异步调用模式。它很好的封装了异步调用，使其能够灵活组合，而不会陷入callback hell.)</p><p><strong>Transaction times。</strong> Promise对于DApp非常有用，因为交易写入以太坊区块链需要大约12-15秒的时间。即使在测试网络上看起来没有那么慢，在正式网络上却可能会要更长的时间（例如你的交易可能用光了Gas，或者被写入了一个孤儿块）。</p><p>下面让我们给一个简单的智能合约写测试用例吧。</p><h3 id="使用Truffle"><a href="#使用Truffle" class="headerlink" title="使用Truffle"></a>使用Truffle</h3><p>首先确保你 1.安装好了<a href="https://github.com/ethereum/webthree-umbrella/wiki" target="_blank" rel="noopener">solc</a>以及 2.<a href="https://github.com/ConsenSys/eth-testrpc" target="_blank" rel="noopener">testrpc</a>。（testrpc需要<a href="https://www.python.org/downloads/" target="_blank" rel="noopener">Python</a>和<a href="https://pip.pypa.io/en/stable/installing/" target="_blank" rel="noopener">pip</a>。如果你是Python新手，你可能需要用<a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/" target="_blank" rel="noopener">virtualenv</a>来安装，这可以将Python程序库安装在一个独立的环境中。）</p><p>接下来安装 3.<a href="https://github.com/ConsenSys/truffle" target="_blank" rel="noopener">Truffle</a>（你可以使用<a href="https://docs.npmjs.com/getting-started/installing-node" target="_blank" rel="noopener">NodeJS’s npm</a>来安装：<code>npm install -g truffle</code>, <code>-g</code>开关可能会需要sudo）。安装好之后，在命令行中输入<code>truffle list</code>来验证安装成功。然后创建一个新的项目目录（我把它命名为’conference’），进入这个目录，运行<code>truffle init</code>。该命令会建立如下的目录结构：</p><p><img src="https://ethfans.org/uploads/photo/2015/57b9fb67369c190fa455766ab5f6556f.png" alt="这里写图片描述"></p><p>现在让我们在<strong>另一个终端</strong>里通过执行<code>testrpc</code>来启动一个节点（你也可以用geth）：</p><p><img src="https://ethfans.org/uploads/photo/2015/a7d19ebfb8d027b65384c532770b3ba8.png" alt="这里写图片描述"></p><p>回到之前的终端中，输入<code>truffle deploy</code>。这条命令会部署之前<code>truffle init</code>产生的模板合约到网络上。任何你可能遇到的错误信息都会在testrpc的终端或者执行truffle的终端中输出。</p><p>在开发过程中你随时可以使用<code>truffle compile</code>命令来确认你的合约可以正常编译（或者使用<code>solc YourContract.sol</code>），<code>truffle deploy</code>来编译和部署合约，最后是<code>truffle test</code>来运行智能合约的测试用例。</p><h3 id="第一个合约"><a href="#第一个合约" class="headerlink" title="第一个合约"></a>第一个合约</h3><p>下面是一个针对会议的智能合约，通过它参会者可以买票，组织者可以设置参会人数上限，以及退款策略。本文涉及的所有代码都可以在这个<a href="https://github.com/eshon/conference" target="_blank" rel="noopener">代码仓库</a>找到。</p><pre><code>contract Conference {  address public organizer;  mapping (address =&gt; uint) public registrantsPaid;  uint public numRegistrants;  uint public quota;  event Deposit(address _from, uint _amount);  // so you can log these events  event Refund(address _to, uint _amount);   function Conference() { // Constructor    organizer = msg.sender;    quota = 500;    numRegistrants = 0;  }  function buyTicket() public returns (bool success) {    if (numRegistrants &gt;= quota) { return false; }    registrantsPaid[msg.sender] = msg.value;    numRegistrants++;    Deposit(msg.sender, msg.value);    return true;  }  function changeQuota(uint newquota) public {    if (msg.sender != organizer) { return; }    quota = newquota;  }  function refundTicket(address recipient, uint amount) public {    if (msg.sender != organizer) { return; }    if (registrantsPaid[recipient] == amount) {       address myAddress = this;      if (myAddress.balance &gt;= amount) {         recipient.send(amount);        registrantsPaid[recipient] = 0;        numRegistrants--;        Refund(recipient, amount);      }    }  }  function destroy() { // so funds not locked in contract forever    if (msg.sender == organizer) {       suicide(organizer); // send funds to organizer    }  }}</code></pre><p>接下来让我们部署这个合约。（注意：本文写作时我使用的是Mac OS X 10.10.5, solc 0.1.3+ (通过brew安装)，Truffle v0.2.3, testrpc v0.1.18 (使用venv)）</p><h3 id="部署合约"><a href="#部署合约" class="headerlink" title="部署合约"></a>部署合约</h3><p><img src="https://ethfans.org/uploads/photo/2015/93ece58476d59db60d3c60657d5baa2d.png" alt="这里写图片描述"></p><p>(译注：图中步骤翻译如下：）</p><p>使用truffle部署智能合约的步骤：<br>1. <code>truffle init</code> (在新目录中) =&gt; 创建truffle项目目录结构<br>2. 编写合约代码，保存到<code>contracts/YourContractName.sol</code>文件。<br>3. 把合约名字加到<code>config/app.json</code>的’contracts’部分。<br>4. 启动以太坊节点（例如在另一个终端里面运行<code>testrpc</code>）。<br>5. <code>truffle deploy</code>（在truffle项目目录中)</p><p><strong>添加一个智能合约。</strong> 在<code>truffle init</code>执行后或是一个现有的项目目录中，复制粘帖上面的会议合约到<code>contracts/Conference.sol</code>文件中。然后打开<code>config/app.json</code>文件，把’Conference’加入’deploy’数组中。</p><p><img src="https://ethfans.org/uploads/photo/2015/62922e726f12f928492d4a647951f72c.png" alt=""></p><p><strong>启动testrpc。</strong> 在另一个终端中启动<code>testrpc</code>。</p><p><strong>编译或部署。</strong> 执行<code>truffle compile</code>看一下合约是否能成功编译，或者直接<code>truffle deploy</code>一步完成编译和部署。这条命令会把部署好的合约的地址和ABI（应用接口）加入到配置文件中，这样之后的<code>truffle test</code>和<code>truffle build</code>步骤可以使用这些信息。</p><p><strong>出错了？</strong> 编译是否成功了？记住，错误信息即可能出现在testrpc终端也可能出现在truffle终端。</p><p><strong>重启节点后记得重新部署！</strong> 如果你停止了testrpc节点，下一次使用任何合约之前切记使用<code>truffle deploy</code>重新部署。testrpc在每一次重启之后都会回到完全空白的状态。</p><h3 id="合约代码解读"><a href="#合约代码解读" class="headerlink" title="合约代码解读"></a>合约代码解读</h3><p>让我们从智能合约头部的变量声明开始：</p><pre><code>address public organizer;mapping (address =&gt; uint) public registrantsPaid;uint public numRegistrants;uint public quota;</code></pre><p><strong>address。</strong> 地址类型。第一个变量是会议组织者的钱包地址。这个地址会在合约的构造函数<code>function Conference()</code>中被赋值。很多时候也称呼这种地址为’owner’（所有人）。</p><p><strong>uint。</strong> 无符号整型。区块链上的存储空间很紧张，保持数据尽可能的小。</p><p><strong>public。</strong> 这个关键字表明变量可以被合约之外的对象使用。<code>private</code>修饰符则表示变量只能被本合约(或者衍生合约)内的对象使用。如果你想要在测试中通过web3.js使用合约中的某个变量，记得把它声明为<code>public</code>。</p><p><strong>Mapping或数组。</strong>（译注：Mapping类似Hash, Directory等数据类型，不做翻译。）在Solidity加入数组类型之前，大家都使用类似<code>mapping (address =&gt; uint)</code>的Mapping类型。这个声明也可以写作<code>address registrantsPaid[]</code>，不过Mapping的存储占用更小(smaller footprint)。这个Mapping变量会用来保存参加者（用他们的钱包地址表示）的付款数量以便在退款时使用。</p><p><strong>关于地址。</strong> 你的客户端（比如testrpc或者geth）可以生成一个或多个账户/地址。testrpc启动时会显示10个可用地址：</p><p><img src="https://ethfans.org/uploads/photo/2015/26c59b073b0d405cd482e2690e47639a.png" alt=""></p><p>第一个地址, <code>accounts[0]</code>，是发起调用的默认地址，如果没有特别指定的话。</p><p><strong>组织者地址 vs 合约地址。</strong> 部署好的合约会在区块链上拥有自己的地址（与组织者拥有的是不同的地址）。在Solidity合约中可以使用<code>this</code>来访问这个合约地址，正如<code>refundTicket</code>函数所展示的：<code>address myAddress = this;</code></p><p><strong>Suicide, Solidity的好东西。</strong>（译注：<code>suicide</code>意为’自杀’, 为Solidity提供的关键字，不做翻译。）转给合约的资金会保存于合约（地址）中。最终这些资金通过<code>destroy</code>函数被释放给了构造函数中设置的组织者地址。这是通过<code>suicide(orgnizer);</code>这行代码实现的。没有这个，资金可能被永远锁定在合约之中（reddit上有些人就遇到过），因此如果你的合约会接受资金一定要记得在合约中使用这个方法！</p><p>如果想要模拟另一个用户或者对手方（例如你是卖家想要模拟一个买家），你可以使用可用地址数组中另外的地址。假设你要以另一个用户，<code>accounts[1]</code>, 的身份来买票，可以通过<code>from</code>参数设置：</p><pre><code>conference.buyTicket({ from: accounts[1], value: some_ticket_price_integer });</code></pre><p><strong>函数调用可以是交易。</strong> 改变合约状态（修改变量值，添加记录，等等）的函数调用本身也是转账交易，隐式的包含了发送人和交易价值。因此web3.js的函数调用可以通过指定<code>{ from: __, value: __ }</code>参数来发送以太币。在Solidity合约中，你可以通过<code>msg.sender</code>和<code>msg.value</code>来获取这些信息：</p><pre><code>function buyTicket() public {    ...    registrantsPaid[msg.sender] = msg.value;    ...}</code></pre><p><strong>事件(Event)。</strong> 可选的功能。合约中的<code>Deposit</code>（充值）和<code>Send</code>（发送）事件是会被记录在以太坊虚拟机日志中的数据。它们实际上没有任何作用，但是用事件(Event)把交易记录进日志是好的做法。</p><p>好了，现在让我们给这个智能合约写一个测试，来确保它能工作。</p><h3 id="写测试"><a href="#写测试" class="headerlink" title="写测试"></a>写测试</h3><p>把项目目录<code>test/</code>中的<code>example.js</code>文件重命名为<code>conference.js</code>，文件中所有的’Example’替换为’Conference’。</p><pre><code>contract(&apos;Conference&apos;, function(accounts) {  it(&quot;should assert true&quot;, function(done) {    var conference = Conference.at(Conference.deployed_address);    assert.isTrue(true);    done();   // stops tests at this point  });});</code></pre><p>在项目根目录下运行<code>truffle test</code>，你应该看到测试通过。在上面的测试中truffle通过<code>Conference.deployed_address</code>获得合约部署在区块链上的地址。</p><p>让我们写一个测试来初始化一个新的Conference，然后检查变量都正确赋值了。将<code>conference.js</code>中的测试代码替换为：</p><pre><code>contract(&apos;Conference&apos;, function(accounts) {  it(&quot;Initial conference settings should match&quot;, function(done) {    var conference = Conference.at(Conference.deployed_address);      // same as previous example up to here    Conference.new({ from: accounts[0]  })    .then(function(conference) {      conference.quota.call().then(          function(quota) {            assert.equal(quota, 500, &quot;Quota doesn&apos;t match!&quot;);           }).then( function() {            return conference.numRegistrants.call();          }).then( function(num) {            assert.equal(num, 0, &quot;Registrants should be zero!&quot;);            return conference.organizer.call();          }).then( function(organizer) {            assert.equal(organizer, accounts[0], &quot;Owner doesn&apos;t match!&quot;);            done();   // to stop these tests earlier, move this up        }).catch(done);      }).catch(done);    });  });</code></pre><p><strong>构造函数。</strong> <code>Conference.new({ from: accounts[0] })</code>通过调用合约构造函数创造了一个新的Conference实例。由于不指定<code>from</code>时会默认使用<code>accounts[0]</code>，它其实可以被省略掉：</p><pre><code>Conference.new({ from: accounts[0] }); // 和Conference.new()效果相同</code></pre><p><strong>Promise。</strong> 代码中的那些<code>then</code>和<code>return</code>就是Promise。它们的作用写成一个深深的嵌套调用链的话会是这样：</p><pre><code>conference.numRegistrants.call().then(  function(num) {    assert.equal(num, 0, &quot;Registrants should be zero!&quot;);    conference.organizer.call().then(     function(organizer) {        assert.equal(organizer, accounts[0], &quot;Owner doesn&apos;t match!&quot;);        }).then(          function(...))            }).then(              function(...))            // Because this would get hairy...</code></pre><p>Promise减少嵌套，使代码变得扁平，允许调用异步返回，并且简化了表达“成功时做这个”和“失败时做那个”的语法。Web3.js通过<a href="https://github.com/ethereum/wiki/wiki/JavaScript-API#using-callbacks" target="_blank" rel="noopener">回调函数</a>实现异步调用，因此你不需要等到交易完成就可以继续执行前端代码。Truffle借助了用Promise封装web3.js的一个框架，叫做<a href="https://github.com/ConsenSys/ether-pudding" target="_blank" rel="noopener">Pudding</a>，这个框架本身又是基于<a href="http://ricostacruz.com/cheatsheets/bluebird.html" target="_blank" rel="noopener">Bluebird</a>的，它支持Promise的高级特性。</p><p><strong>call。</strong> 我们使用<code>call</code>来检查变量的值，例如<code>conference.quota.call().then(...</code>，还可以通过传参数，例如<code>call(0)</code>, 来获取mapping在index 0处的元素。Solidity的文档说这是一种特殊的“消息调用”因为 1.不会为矿工记录和 2.不需要从钱包账户/地址发起（因此它没有被账户持有者私钥做签名）。另一方面，交易/事务(Transaction)会被矿工记录，必须来自于一个账户（也就是有签名），会被记录到区块链上。对合约中数据做的任何修改都是交易。仅仅是检查一个变量的值则不是。因此在读取变量时不要忘记加上<code>call()</code>！否则会发生奇怪的事情。（此外如果在读取变量是遇到问题别忘记检查它是否是<code>public</code>。）<code>call()</code>也能用于调用不是交易的函数。如果一个函数本来是交易，但你却用<code>call()</code>来调用，则不会在区块链上产生交易。</p><p><strong>断言。</strong> 标准JS测试中的断言（如果你不小心拼成了复数形式’asserts’，truffle会报错，让你一头雾水），<code>assert.equal</code>是最常用的，其他类型的断言可以在<a href="http://chaijs.com/api/assert/" target="_blank" rel="noopener">Chai的文档</a>中找到。</p><p>再一次运行<code>truffle test</code>确保一切工作正常。</p><h3 id="测试合约函数调用"><a href="#测试合约函数调用" class="headerlink" title="测试合约函数调用"></a>测试合约函数调用</h3><p>现在我们测试一下改变<code>quote</code>变量的函数能工作。在<code>tests/conference.js</code>文件的<code>contract(&#39;Conference&#39;, function(accounts) {...};)</code>的函数体中添加如下测试用例：</p><pre><code>it(&quot;Should update quota&quot;, function(done) {  var c = Conference.at(Conference.deployed_address);  Conference.new({from: accounts[0] }).then(    function(conference) {      conference.quota.call().then(         function(quota) {           assert.equal(quota, 500, &quot;Quota doesn&apos;t match!&quot;);         }).then( function() {           return conference.changeQuota(300);        }).then( function(result) {  // result here is a transaction hash          console.log(result);  // if you were to print this out it’d be long hex - the transaction hash          return conference.quota.call()        }).then( function(quota) {           assert.equal(quota, 300, &quot;New quota is not correct!&quot;);          done();        }).catch(done);    }).catch(done);});</code></pre><p>这里的新东西是调用<code>changeQuota</code>函数的那一行。<code>console.log</code>对于调试很有用，用它能在运行truffle的终端中输出信息。在关键点插入<code>console.log</code>可以查看执行到了哪一步。记得把Solidity合约中<code>changeQuota</code>函数被声明为<code>public</code>，否则你不能调用它：</p><pre><code>function changeQuota(uint newquota) public {  }</code></pre><h3 id="测试交易"><a href="#测试交易" class="headerlink" title="测试交易"></a>测试交易</h3><p>现在让我们调用一个需要发起人发送资金的函数。</p><p><strong>Wei。</strong> 以太币有很多种单位（这里有个很有用的<a href="http://ether.fund/tool/converter" target="_blank" rel="noopener">转换器</a>）,在合约中通常用的是Wei，最小的单位。Web3.js提供了在各单位与Wei之间互相转换的便利方法，形如<code>web3.toWei(.05, &#39;ether&#39;)</code>。JavaScript在处理很大的数字时有问题，因此web3.js使用了<a href="https://github.com/MikeMcl/bignumber.js/" target="_blank" rel="noopener">程序库BigNumber</a>，并建议在代码各处都以Wei做单位，直到要给用户看的时候（<a href="https://github.com/ethereum/wiki/wiki/JavaScript-API#a-note-on-big-numbers-in-web3js" target="_blank" rel="noopener">文档</a>。</p><p><strong>账户余额。</strong> Web3.js提供了许多提供方便的<a href="https://github.com/ethereum/wiki/wiki/JavaScript-API#web3-javascript-%C3%90app-api-reference" target="_blank" rel="noopener">方法</a>，其中另一个会在下面测试用到的是<code>web3.eth.getBalance(some_address)</code>。记住发送给合约的资金会由合约自己持有直到调用<code>suicide</code>。</p><p>在<code>contract(Conference, function(accounts) {...};)</code>的函数体中插入下面的测试用例。在高亮显示的方法中，测试用例让另一个用户(<code>accounts[1]</code>)以<code>ticketPrice</code>的价格买了一张门票。然后它检查合约的账户余额增加了<code>ticketPrice</code>，以及购票用户被加入了参会者列表。</p><p>这个测试中的<code>buyTicket</code>是一个交易函数：</p><pre><code>it(&quot;Should let you buy a ticket&quot;, function(done) {  var c = Conference.at(Conference.deployed_address);  Conference.new({ from: accounts[0] }).then(    function(conference) {      var ticketPrice = web3.toWei(.05, &apos;ether&apos;);      var initialBalance = web3.eth.getBalance(conference.address).toNumber();      conference.buyTicket({ from: accounts[1], value: ticketPrice }).then(        function() {          var newBalance = web3.eth.getBalance(conference.address).toNumber();          var difference = newBalance - initialBalance;          assert.equal(difference, ticketPrice, &quot;Difference should be what was sent&quot;);          return conference.numRegistrants.call();      }).then(function(num) {          assert.equal(num, 1, &quot;there should be 1 registrant&quot;);          return conference.registrantsPaid.call(accounts[1]);      }).then(function(amount) {          assert.equal(amount.toNumber(), ticketPrice, &quot;Sender&apos;s paid but is not listed&quot;);          done();      }).catch(done);  }).catch(done);});</code></pre><p><strong>交易需要签名。</strong> 和之前的函数调用不同，这个调用是一个会发送资金的交易，在这种情况下购票用户(<code>accounts[1]</code>)会用他的私钥对<code>buyTicket()</code>调用做签名。（在geth中用户需要在发送资金之前通过输入密码来批准这个交易或是解锁钱包的账户。）</p><p><strong>toNumber()。</strong> 有时我们需要把Solidity返回的十六进制结果转码。如果结果可能是个很大的数字可以用<code>web3.toBigNumber(numberOrHexString)</code>来处理因为JavaScript直接对付大数要糟。</p><h3 id="测试包含转账的合约"><a href="#测试包含转账的合约" class="headerlink" title="测试包含转账的合约"></a>测试包含转账的合约</h3><p>最后，为了完整性，我们确认一下<code>refundTicket</code>方法能正常工作，而且只有会议组织者能调用。下面是测试用例：</p><pre><code>it(&quot;Should issue a refund by owner only&quot;, function(done) {  var c = Conference.at(Conference.deployed_address);  Conference.new({ from: accounts[0] }).then(    function(conference) {      var ticketPrice = web3.toWei(.05, &apos;ether&apos;);      var initialBalance = web3.eth.getBalance(conference.address).toNumber();       conference.buyTicket({ from: accounts[1], value: ticketPrice }).then(        function() {          var newBalance = web3.eth.getBalance(conference.address).toNumber();          var difference = newBalance - initialBalance;          assert.equal(difference, ticketPrice, &quot;Difference should be what was sent&quot;);  // same as before up to here          // Now try to issue refund as second user - should fail          return conference.refundTicket(accounts[1], ticketPrice, {from: accounts[1]});          }).then(          function() {            var balance = web3.eth.getBalance(conference.address).toNumber();            assert.equal(web3.toBigNumber(balance), ticketPrice, &quot;Balance should be unchanged&quot;);            // Now try to issue refund as organizer/owner - should work            return conference.refundTicket(accounts[1], ticketPrice, {from: accounts[0]});          }).then(          function() {            var postRefundBalance = web3.eth.getBalance(conference.address).toNumber();            assert.equal(postRefundBalance, initialBalance, &quot;Balance should be initial balance&quot;);            done();        }).catch(done);    }).catch(done); });</code></pre><p>这个测试用例覆盖的Solidity函数如下：</p><pre><code>function refundTicket(address recipient, uint amount) public returns (bool success) {  if (msg.sender != organizer) { return false; }  if (registrantsPaid[recipient] == amount) {     address myAddress = this;    if (myAddress.balance &gt;= amount) {       recipient.send(amount);      Refund(recipient, amount);      registrantsPaid[recipient] = 0;      numRegistrants--;      return true;    }  }  return false;}</code></pre><p><strong>合约中发送以太币。</strong> <code>address myAddress = this</code>展示了如何获取该会议合约实例的地址，以变接下来检查这个地址的余额（或者直接使用<code>this.balance</code>）。合约通过<code>recipient.send(amount)</code>方法把资金发回了购票人。</p><p><strong>交易无法返回结果给web3.js。</strong> 注意这一点！<code>refundTicket</code>函数会返回一个布尔值，但是这在测试中无法检查。因为这个方法是一个交易函数（会改变合约内数据或是发送以太币的调用），而web3.js得到的交易运行结果是一个交易哈希（如果打印出来是一个长长的十六进制/怪怪的字符串）。既然如此为什么还要让<code>refundTicket</code>返回一个值？因为在Solidity合约内可以读到这个返回值，例如当另一个合约调用<code>refundTicket()</code>的时候。也就是说Solidity合约可以读取交易运行的返回值，而web3.js不行。另一方面，在web3.js中你可以用事件机制（Event, 下文会解释）来监控交易运行，而合约不行。合约也无法通过<code>call()</code>来检查交易是否修改了合约内变量的值。</p><p><strong>关于sendTransaction()。</strong> 当你通过web3.js调用类似<code>buyTicket()</code>或者<code>refundTicket()</code>的交易函数时（使用<code>web3.eth.sendTransaction</code>），交易并不会立即执行。事实上交易会被提交到矿工网络中，交易代码直到其中一位矿工产生一个新区块把交易记录进区块链之后才执行。因此你必须等交易进入区块链并且同步回本地节点之后才能验证交易执行的结果。用testrpc的时候可能看上去是实时的，因为测试环境很快，但是正式网络会比较慢。</p><p><strong>事件/Event。</strong> 在web3.js中你应该监听<a href="https://github.com/ethereum/wiki/wiki/JavaScript-API#contract-events" target="_blank" rel="noopener">事件</a>而不是返回值。我们的智能合约示例定义了这些事件：</p><pre><code>event Deposit(address _from, uint _amount);event Refund(address _to, uint _amount);</code></pre><p>它们在<code>buyTicket()</code>和<code>refundTicket()</code>中被触发。触发时你可以在testrpc的输出中看到日志。要监听事件，你可以使用web.js监听器(listener)。在写本文时我还不能在truffle测试中记录事件，但是在应用中没问题：</p><pre><code>Conference.new({ from: accounts[0] }).then(  function(conference) {    var event = conference.allEvents().watch({}, &apos;&apos;); // or use conference.Deposit() or .Refund()    event.watch(function (error, result) {      if (error) {        console.log(&quot;Error: &quot; + error);      } else {        console.log(&quot;Event: &quot; + result.event);      }    });    // ...</code></pre><p><strong>过滤器/Filter。</strong> 监听所有事件可能会产生大量的轮询，作为替代可以使用过滤器。它们可以更灵活的开始或是停止对事件的监听。更多过滤器的信息可查看<a href="https://github.com/ethereum/wiki/wiki/JavaScript-API#web3ethfilter" target="_blank" rel="noopener">Solidity文档</a>。</p><p>总的来说，使用事件和过滤器的组合比检查变量消耗的Gas更少，因而在验证正式网络的交易运行结果时非常有用。</p><p><strong>Gas。</strong> （译注：以太坊上的燃料，因为代码的执行必须消耗Gas。直译为汽油比较突兀，故保留原文做专有名词。）直到现在我们都没有涉及Gas的概念，因为在使用testrpc时通常不需要显式的设置。当你转向geth和正式网络时会需要。在交易函数调用中可以在<code>{from: __, value: __, gas: __}</code>对象内设置Gas参数。Web3.js提供了<a href="https://github.com/ethereum/wiki/wiki/JavaScript-API#web3ethgasprice" target="_blank" rel="noopener"><code>web3.eth.gasPrice</code></a>调用来获取当前Gas的价格，Solidity编译器也提供了一个参数让你可以从命令行获取合约的Gas开销概要：<code>solc --gas YouContract.sol</code>。下面是<code>Conference.sol</code>的结果：</p><p><img src="https://ethfans.org/uploads/photo/2015/afa43126d926ed3db1915718900c69c7.png" alt=""></p><h3 id="为合约创建DApp界面"><a href="#为合约创建DApp界面" class="headerlink" title="为合约创建DApp界面"></a>为合约创建DApp界面</h3><p><em>下面的段落会假设你没有网页开发经验。</em></p><p>上面编写的测试用例用到的都是在前端界面中也可以用的方法。你可以把前端代码放到<code>app/</code>目录中，运行<code>truffle build</code>之后它们会和合约配置信息一起编译输出到<code>build/</code>目录。在开发时可以使用<code>truffle watch</code>命令在<code>app/</code>有任何变动时自动编译输出到<code>build/</code>目录。然后在浏览器中刷新页面即可看到<code>build/</code>目录中的最新内容。（<code>truffle serve</code>可以启动一个基于<code>build/</code>目录的网页服务器。）</p><p><code>app/</code>目录中有一些样板文件帮助你开始：</p><p><img src="https://ethfans.org/uploads/photo/2015/a6a8374e2ee98c702455fdfa93b5e117.png" alt=""></p><p><code>index.html</code>会加载<code>app.js</code>：</p><p><img src="https://ethfans.org/uploads/photo/2015/91153d00abd7361d997276e252a3ac75.png" alt=""></p><p>因此我们只需要添加代码到<code>app.js</code>就可以了。</p><p>默认的<code>app.js</code>会在浏览器的console(控制台)中输出一条”Hello from Truffle!”的日志。在项目根目录中运行<code>truffle watch</code>，然后在浏览器中打开<code>build/index.html</code>文件，再打开浏览器的console就可以看到。（大部分浏览器例如Chrome中，单击右键 -&gt; 选择Inspect Element然后切换到Console即可。）</p><p><img src="https://ethfans.org/uploads/photo/2015/18b1dd84faa4aa16a841f6fe7ab0093e.png" alt=""></p><p>在<code>app.js</code>中，添加一个在页面加载时会运行的<code>window.onload</code>调用。下面的代码会确认web3.js已经正常载入并显示所有可用的账户。（注意：你的testrpc节点应该保持运行。）</p><pre><code>window.onload = function() {  var accounts = web3.eth.accounts;  console.log(accounts);}</code></pre><p>看看你的浏览器console中看看是否打印出了一组账户地址。</p><p>现在你可以从<code>tests/conference.js</code>中复制一些代码过来（去掉只和测试有关的断言），将调用返回的结果输出到console中以确认代码能工作。下面是个例子：</p><pre><code>window.onload = function() {  var accounts = web3.eth.accounts;  var c = Conference.at(Conference.deployed_address);  Conference.new({ from: accounts[0] }).then(    function(conference) {    var ticketPrice = web3.toWei(.05, &apos;ether&apos;);    var initialBalance = web3.eth.getBalance(conference.address).toNumber();     console.log(&quot;The conference&apos;s initial balance is: &quot; + initialBalance);    conference.buyTicket({ from: accounts[1], value: ticketPrice }).then(      function() {        var newBalance = web3.eth.getBalance(conference.address).toNumber();        console.log(&quot;After someone bought a ticket it&apos;s: &quot; + newBalance);        return conference.refundTicket(accounts[1], ticketPrice, {from: accounts[0]});      }).then(        function() {            var balance = web3.eth.getBalance(conference.address).toNumber();          console.log(&quot;After a refund it&apos;s: &quot; + balance);      });  });};</code></pre><p>上面的代码应该输出如下：</p><p><img src="https://ethfans.org/uploads/photo/2015/f093c01e94c9d56b8f58202edb42a27e.png" alt=""></p><p>(console输出的warning信息可忽略。)</p><p>现在起你就可以使用你喜欢的任何前端工具，jQuery, ReactJS, Meteor, Ember, AngularJS，等等等等，在<code>app/</code>目录中构建可以与以太坊智能合约互动的DApp界面了！接下来我们给出一个极其简单基于jQuery的界面作为示例。</p><p><img src="https://ethfans.org/uploads/photo/2015/a85ed594ffaceef763fb249508d855eb.png" alt=""></p><p>这里是<a href="https://github.com/eshon/conference/blob/master/app/index.html" target="_blank" rel="noopener">index.html的代码</a>，这里是<a href="https://github.com/eshon/conference/blob/master/app/javascripts/app.js" target="_blank" rel="noopener">app.js的代码</a>。</p><p>通过界面测试了智能合约之后我意识到最好加入检查以保证相同的用户不能注册两次。另外由于现在是运行在testrpc节点上，速度很快，最好是切换到geth节点并确认交易过程依然能及时响应。否则的话界面上就应该显示提示信息并且在处理交易时禁用相关的按钮。</p><p><strong>尝试geth。</strong> 如果你使用<a href="https://github.com/ethereum/go-ethereum/" target="_blank" rel="noopener">geth</a>, 可以尝试以下面的命令启动 - 在我这儿(geth v1.2.3)工作的很好：</p><pre><code>build/bin/geth --rpc --rpcaddr=&quot;0.0.0.0&quot; --rpccorsdomain=&quot;*&quot; --mine --unlock=&apos;0 1&apos; --verbosity=5 --maxpeers=0 --minerthreads=&apos;4&apos;  --networkid &apos;12345&apos; --genesis test-genesis.json</code></pre><p>这条命令解锁了两个账户, <code>0</code>和<code>1</code>。1. 在geth控制台启动后你可能需要输入这两个账户的密码。2. 你需要在<a href="https://github.com/ethereum/go-ethereum/wiki/Connecting-to-the-network#custom-networks" target="_blank" rel="noopener"><code>test-genesis.json</code></a>文件里面的’alloc’配置中加入你的这两个账户，并且给它们充足的资金。3. 最后，在创建合约实例时加上gas参数：</p><pre><code>Conference.new({from: accounts[0], gas: 3141592})</code></pre><p>然后把整个<code>truffle deploy</code>, <code>truffle build</code>流程重来一遍。</p><p><strong>教程中的代码。</strong> 在这篇基础教程中用到的所有代码都可以在这个<a href="https://github.com/eshon/conference" target="_blank" rel="noopener">代码仓库</a>中找到。</p><p><strong>自动为合约生成界面。</strong> <a href="https://github.com/SilentCicero" target="_blank" rel="noopener">SilentCicero</a>制作了一个叫做<a href="http://dapp-builder.meteor.com/" target="_blank" rel="noopener">DApp Builder</a>的工具，可以用Solidity合约自动生成HTML, jQuery和web.js的代码。这种模式也正在被越来越多的正在开发中的开发者工具采用。</p><p><strong>教程到此结束！</strong> 最后一章我们仅仅学习了一套工具集，主要是Truffle和testrpc. 要知道即使在ConsenSys内部，不同的开发者使用的工具和框架也不尽相同。你可能会发现更适合你的工具，这里所说的工具可能很快也会有改进。但是本文介绍的工作流程帮助我走上了DApp开发之路。</p><p>(⊙ω⊙) wonk wonk</p><p><em>感谢Joseph Chow的校阅和建议，Christian Lundkvist, Daniel Novy, Jim Berry, Peter Borah和Tim Coulter帮我修改文字和debug，以及Tim Coulter, Nchinda Nchinda和Mike Goldin对DApp前端步骤图提供的帮助。</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;区块链：教程 | 以太坊智能合约编程之菜鸟教程。&lt;br&gt;
    
    </summary>
    
      <category term="Blockchain" scheme="https://www.oxysun.cn/categories/Blockchain/"/>
    
    
      <category term="Blockchain" scheme="https://www.oxysun.cn/tags/Blockchain/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB的基本操作：删除记录（删）</title>
    <link href="https://www.oxysun.cn/mongodb/mongodb-collection-delete.html"/>
    <id>https://www.oxysun.cn/mongodb/mongodb-collection-delete.html</id>
    <published>2018-07-23T13:29:48.000Z</published>
    <updated>2018-07-23T13:34:13.622Z</updated>
    
    <content type="html"><![CDATA[<p>MongoDB的基本操作：删除记录（删）。<br><a id="more"></a></p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>删除记录有两个方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3.2版本之前</span><br><span class="line">db.collection.remove() //</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3.2版本之后</span><br><span class="line"> - db.collection.deleteMany() //删除匹配条件的多条记录</span><br><span class="line"> - db.collection.deleteOne() //删除匹配条件的单条记录</span><br></pre></td></tr></table></figure><p>括号里面的参数是查询过滤器。</p><h1 id="查询过滤器："><a href="#查询过滤器：" class="headerlink" title="查询过滤器："></a><a href="https://docs.mongodb.com/v3.6/core/document/#document-query-filter" target="_blank" rel="noopener">查询过滤器</a>：</h1><p>查询过滤器用来设定查询条件。</p><p>格式<code>&lt;field&gt;:&lt;value&gt;</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &lt;field1&gt;: &lt;value1&gt;,</span><br><span class="line">  &lt;field2&gt;: &#123; &lt;operator&gt;: &lt;value&gt; &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p><strong>实例：</strong>删除前文test数据库中所有记录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.test.deleteMany(&#123;&#125;);</span><br></pre></td></tr></table></figure><p><code>{}</code>表示没有约束条件。</p><p><strong>实例：</strong>删除前文test数据库中_id为5abb3b5bce69c048be080199的记录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.test.deleteMany(&#123;_id: ObjectId(&quot;5abb3b5bce69c048be080199&quot;)&#125;);</span><br></pre></td></tr></table></figure><p>笔记整理到这里，发现之前的记录有点问题，因为对MongoDB的官网的结构没有完全搞清楚，所以，之前的基本操作更多偏向于参考手册的层面，可能还需要修改和调整一下。</p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://docs.mongodb.com/manual/tutorial/remove-documents/。" target="_blank" rel="noopener">https://docs.mongodb.com/manual/tutorial/remove-documents/。</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB的基本操作：删除记录（删）。&lt;br&gt;
    
    </summary>
    
      <category term="MongoDB" scheme="https://www.oxysun.cn/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="https://www.oxysun.cn/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>JS：逻辑操作符“||”、“&amp;&amp;”和“!”</title>
    <link href="https://www.oxysun.cn/js/js-logical-operator.html"/>
    <id>https://www.oxysun.cn/js/js-logical-operator.html</id>
    <published>2018-07-19T15:00:00.000Z</published>
    <updated>2018-07-22T08:48:34.239Z</updated>
    
    <content type="html"><![CDATA[<p>JS：逻辑操作符“||”、“&amp;&amp;”和“!”。<br><a id="more"></a></p><table><thead><tr><th>Operator</th><th>Usage</th><th>Description</th></tr></thead><tbody><tr><td>Logical AND (&amp;&amp;)</td><td>expr1 &amp;&amp; expr2</td><td>Returns expr1 if it can be converted to false; otherwise, returns expr2. Thus, when used with Boolean values, &amp;&amp; returns true if both operands are true; otherwise, returns false.</td></tr><tr><td>Logical OR (&#124;&#124;)</td><td>expr1 &#124;&#124; expr2</td><td>Returns expr1 if it can be converted to true; otherwise, returns expr2. Thus, when used with Boolean values, &#124;&#124; returns true if either operand is true.</td></tr><tr><td>Logical NOT (!)</td><td>!expr</td><td>Returns false if its single operand can be converted to true; otherwise, returns true.</td></tr></tbody></table><p>翻译一下：</p><table><thead><tr><th>操作符</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>逻辑和 (&amp;&amp;)</td><td>expr1 &amp;&amp; expr2</td><td>如果expr1可以被转换为false，那么返回expr1，否则，返回expr2。 如果使用的是布尔值，那么仅当两个操作数都为真时，返回true；否则，返回false</td></tr><tr><td>逻辑或 (&#124;&#124;)</td><td>expr1 &#124;&#124; expr2</td><td>如果expr1可以被转换为true，返回expr1；否则，返回expr2。如果是布尔值，则两个操作数中有一个位true就返回true。</td></tr><tr><td>逻辑非 (!)</td><td>!expr</td><td>如果这个操作数可以转换为true，返回false，否则，返回true</td></tr></tbody></table><p>以下这些表达式都可以转换为false：</p><ul><li>null;</li><li>NaN;</li><li>0;</li><li>empty string (“” or ‘’); </li><li>undefined.</li></ul><p><br><br>这样就比较清楚了。</p><p>需要注意的是：操作符有一个优先级的规定，可以参考：<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence。" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence。</a></p><p>参考：<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators。" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators。</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JS：逻辑操作符“||”、“&amp;amp;&amp;amp;”和“!”。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.oxysun.cn/categories/JavaScript/"/>
    
    
      <category term="JS,逻辑操作符" scheme="https://www.oxysun.cn/tags/JS-%E9%80%BB%E8%BE%91%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>程序员晋升之路：生存意识、服务意识--IT老兵的心得</title>
    <link href="https://www.oxysun.cn/thinking%20in%20programmer%20life/full-stack-programmer.html"/>
    <id>https://www.oxysun.cn/thinking in programmer life/full-stack-programmer.html</id>
    <published>2018-07-18T15:15:33.000Z</published>
    <updated>2018-07-22T07:27:09.079Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>这篇文章原载于新浪博客，写于2017-06-06<br>23:15:33，现在因为建立了自己的博客，所以迁过来，也转载在CSDN上，同时又加上“时过境迁”，又会有一些新的思考，所以修改一下，修改的地方以备注的形式展示出来，可以看出一些心态的不同来。</p></blockquote><p>有一个程序员，学过前端、学过iOS，或者这么说，他喜欢研究技术，而且能把所研究的技术都搞得明明白白，但是他做项目，从来不排期，不汇报，也从来不怎么理会产品设计，结果他什么好的产品都做不出来。</p><blockquote><p>这些是在厦门遇到了一个程序员所发出的感想，到了今时今日，据我了解，他还是什么都没有做出来</p></blockquote><p>做不出好的产品来，是一个好的程序员吗？</p><p>技术都会过时的，最新的技术也不见得是最好的技术，那么技术人员的使命是什么呢？</p><p>掌握了那么复杂的C++就算是好的程序员了吗？</p><blockquote><p>实际上，很多年了，C++程序员都缺乏用武之地了—-直到今天的区块链的火热，才又唤起市场对C++程序员的需求。</p></blockquote><p>或者说，现在所鼓吹的全栈，你成为全栈了，就是好的程序员了吗？</p><p>我觉得都不是。</p><p>你用你的能力，掌握了技术，能够很好服务于你的公司，服务于社会，这才是好的程序员。</p><p>技术是为人类服务的，脱离了服务，再尖端的技术又有什么用呢？脱离了服务，掌握了再尖端的技术的程序员，又有什么用呢？</p><p>要使用你的技术，去提供服务，换取你的合理报酬，这就是生存意识。</p><p>掌握社会服务所需要的，或者是将要需要的技术，去提供服务，换取更好的报酬，这就是生存意识。</p><p>固守于一门很复杂的语言，为自己掌握了它而别人没有掌握而沾沾自喜，却不思考这门语言对于提供服务的价值和意义，这就已经完全走偏了，惑于技巧的层面，而忽略了根本的初衷，我们不是为了学技术而学技术的，技术也从来不是为了让你学而产生的。如果一门技术，已经不能很好地服务于社会，那怕它再难，学习起来再有挑战性，对你来说只能是满足征服的快乐，而不是满足你谋生、立业的人生目标。</p><p>放下心中自己围起来的那道技术的篱笆，不拘一格地去掌握那些需要你掌握的技术，做出好的产品来提供你的服务。</p><p>不要太在意这个技术是你新学的，也许掌握的还没有那么扎实，也许写出来的代码还没有那么漂亮，这些都会慢慢变好的，因为你写的代码，做出的产品有人在使用，这就要比那些写的很漂亮，但是没人用，只能束之高阁的代码要强太多了。代码不被使用，再漂亮，也缺乏生命力。</p><blockquote><p>代码也是有生命的，这是我的感觉，所以，我们需要好好去维护她，不断去调整她。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;这篇文章原载于新浪博客，写于2017-06-06&lt;br&gt;23:15:33，现在
      
    
    </summary>
    
      <category term="程序人生" scheme="https://www.oxysun.cn/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>Git：checkout的用法（1）</title>
    <link href="https://www.oxysun.cn/git/git-checkout-1.html"/>
    <id>https://www.oxysun.cn/git/git-checkout-1.html</id>
    <published>2018-07-17T15:00:00.000Z</published>
    <updated>2018-07-24T14:12:00.560Z</updated>
    
    <content type="html"><![CDATA[<p>Git的checkout的用法。<br><a id="more"></a></p><h1 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h1><p><code>checkout</code>是<code>Git</code>最常用的命令之一，但又是有些复杂的命令，总会感觉有些用不明白，用不明白的原因应该是没有深度地、全面地理解一下，所以要对它好好整理一下。</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><code>checkout</code>在<code>CVS</code>和<code>SVN</code>中都是检出的意思，从版本库检出一个版本，在<code>Git</code>中就不是这么简单了。手册上是这样介绍的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git-checkout - Switch branches or restore working tree files</span><br></pre></td></tr></table></figure><p>在<code>Git</code>里面，<code>checkout</code>用于切换分支或者恢复工作树的文件。</p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p><strong>问题：</strong>线上分支出现了一个问题，急需要修复（可以参看Git Flow一章）。<br><strong>步骤：</strong></p><ol><li>需要创建一个hotfix分支，参考语法：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b|-B &lt;new_branch&gt; [&lt;start point&gt;]</span><br></pre></td></tr></table></figure></li></ol><p>实际语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b hotfix-1.2.1 master</span><br></pre></td></tr></table></figure></p><p>这个时候分支是本地分支，并没有提交到服务器上去，如果这个分支已经被创建，这个命令会失败，这个时候，如果想要重置这个分支，需要使用<code>-B</code>参数。</p><ol start="2"><li>查看分支：<code>git branch -av</code></li><li>进行修改工作</li><li>……</li></ol><p><strong>问题：</strong>本地发生了一些修改，但是想放弃这些修改，回退到获取这个版本初始时的状态。<br>参考语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout [&lt;tree-ish&gt;] [--] &lt;pathspec&gt;…​</span><br></pre></td></tr></table></figure></p><p>实际语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout 26a2e80 # 26a2e80 是一个commit号，这个命令会把index区域和工作区域的内容都更新</span><br><span class="line">git checkout -- README # README是想恢复的文件名，恢复成index区域里面的内容，为什么要加“--”呢，这个是为了告诉Git，这是一个文件而不是一个分支</span><br><span class="line">Git checkout . # 从index区域恢复所有文件</span><br></pre></td></tr></table></figure></p><p>这个命令很灵活，既可以带一个<code>commit</code>号，又可以带着一个路径，<code>tree-ish</code> 可以理解成一个<code>commit</code>号，就是恢复到某一个<code>commit</code>号，<code>index</code>就是暂存区，这里要理解<code>Git</code>的三个区域，如果这个还不明白，那需要单开一篇文章去讲了。</p><p>以上是checkout比较常用的两个用法，逐步整理其他的用法。</p><p>参考：<a href="https://git-scm.com/docs/git-checkout。" target="_blank" rel="noopener">https://git-scm.com/docs/git-checkout。</a><br><a href="https://stackoverflow.com/questions/14460595/git-checkout-with-dot。" target="_blank" rel="noopener">https://stackoverflow.com/questions/14460595/git-checkout-with-dot。</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git的checkout的用法。&lt;br&gt;
    
    </summary>
    
      <category term="Git" scheme="https://www.oxysun.cn/categories/Git/"/>
    
    
      <category term="Git" scheme="https://www.oxysun.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Linux下shell命令用法及常见用例：top</title>
    <link href="https://www.oxysun.cn/linux/shell-command-top.html"/>
    <id>https://www.oxysun.cn/linux/shell-command-top.html</id>
    <published>2018-07-13T14:20:23.000Z</published>
    <updated>2018-07-18T11:09:55.845Z</updated>
    
    <content type="html"><![CDATA[<p><code>top</code>命令可以实时动态地查看系统的整体运行情况，是一个综合了多方信息监测系统性能和运行信息的使用工具。<code>top</code>命令提供了互动式的界面，用热键管理。这个命令是一个非常重要和常用的命令，但是同时也有点复杂，参数较多，怎么能够掌握好呢？用了这么多年，也都一直没有用好。老老实实读一遍手册，总体了解一下都有什么才好去做整理，有的时候可能连它都有什么功能都不知道。</p><a id="more"></a><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>top [选项]</code></p><h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p><code>top</code>命令用来显示<code>Linux</code>的处理器活动和内核实时管理的任务。它会显示正在使用的处理器和内存以及运行进程等其他信息。</p><h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><ul><li>-b：以批处理模式操作。</li><li>-c：显示完整的命令。</li><li>-d：屏幕刷新间隔时间。</li><li>-I：忽略失效过程。</li><li>-s：保密模式。</li><li>-S：累积模式。</li><li>-i&lt;时间&gt;：设置间隔时间。</li><li>-u&lt;用户名&gt;：指定用户名。</li><li>-p&lt;进程号&gt;：指定进程。</li><li>-n&lt;次数&gt;：循环显示的次数。</li></ul><h2 id="top交互命令"><a href="#top交互命令" class="headerlink" title="top交互命令"></a><code>top</code>交互命令</h2><p>在<code>top</code>命令执行过程中可以使用的一些交互命令。这些命令都是单字母的，如果在命令行中使用了-s选项， 其中一些命令可能会被屏蔽。</p><ul><li>h：显示帮助画面，给出一些简短的命令总结说明。</li><li>k：终止一个进程。</li><li>i：忽略闲置和僵死进程，这是一个开关式命令。</li><li>q：退出程序。</li><li>r：重新安排一个进程的优先级别。</li><li>S：切换到累计模式。</li><li>s：改变两次刷新之间的延迟时间（单位为s），如果有小数，就换算成ms。输入0值则系统将不断刷新，默认值是5s。</li><li>f或者F：从当前显示中添加或者删除项目。</li><li>o或者O：改变显示项目的顺序。</li><li>l：切换显示平均负载和启动时间信息。</li><li>m：切换显示内存信息。</li><li>t：切换显示进程和CPU状态信息。</li><li>c：显示进程启动时的完整路径和程序名。</li><li>M：根据驻留内存大小进行排序。</li><li>P：根据CPU使用百分比大小进行排序。</li><li>T：根据时间/累计时间进行排序。</li><li>w：将当前设置写入~/.toprc文件中。</li></ul><h2 id="界面解释"><a href="#界面解释" class="headerlink" title="界面解释"></a>界面解释</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">top - 21:52:52 up 247 days,  6:23,  2 users,  load average: 0.09, 0.12, 0.13</span><br><span class="line">Tasks: 126 total,   1 running, 125 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  4.0 us,  2.3 sy,  0.0 ni, 93.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem :  3881808 total,   153396 free,  3577588 used,   150824 buff/cache</span><br><span class="line">KiB Swap:  4063228 total,  1206484 free,  2856744 used.    86344 avail Mem</span><br></pre></td></tr></table></figure><p>统计信息区前五行是系统整体的统计信息。<br><strong>系统运行时间和平均负载</strong><br>第一行是任务队列信息，同uptime命令的执行结果，可以使用l命令切换uptime的显示。其内容如下：</p><ul><li>21:52:52：当前时间。</li><li>up 247 days, 6:23：系统运行时间。</li><li>2 users：当前登录用户数。</li><li>load average: 0.09, 0.12, 0.13：系统负载，即任务队列平均长度。分别为1、5、15min前到现在平均值。</li></ul><p><strong>进程</strong><br>第二行为进程信息。内容如下：</p><ul><li>126 total：进程总数[键入H可查看线程数]。</li><li>1 running：正在运行的进程。</li><li>125 sleeping：睡眠进程。</li><li>0 stopped：停止的进程。</li><li>0 zombie：僵尸进程数。</li></ul><p><strong>CPU状态</strong><br>第三行为CPU状态信息，当有多个CPU时，这些内容可能会超过两行。内容如下：</p><ul><li>us, user：运行(未调整优先级的) 用户进程的CPU百分比。</li><li>sy，system：运行内核进程的CPU百分比。</li><li>ni，niced：运行已调整优先级的用户进程的CPU百分比。</li><li>wa，IO wait：用于等待IO完成的CPU百分比。</li><li>hi：处理硬件中断的CPU百分比。</li><li>si：处理软件中断的CPU百分比。</li><li>st：这个虚拟机被hypervisor偷去的CPU百分比。（译注：如果当前处于一个hypervisor下的vm，实际上hypervisor也是要消耗一部分CPU处理时间的）。</li></ul><p><strong>内存使用</strong><br>倒数第2、3行为内存相关信息，内存显示可以用m命令切换：</p><ul><li>KiB Mem: 3881808 total,   153396 free：分别是物理内存总量、空闲内存总量。</li><li>3577588 used,   150824 buff/cache：使用物理内存总量、用作内核缓存内存量。</li><li>KiB Swap: 4063228 total,  1206484 free：分别是交换分区总量、使用交换分区剩余量。</li><li>2856744 used.    86344 avail Mem：可用来启动应用的内存（有些复杂，以后解释，恶意参考<a href="https://unix.stackexchange.com/questions/390518/what-do-the-buff-cache-and-avail-mem-fields-in-top-mean" target="_blank" rel="noopener">这里</a>）。</li></ul><p><strong>字段/列</strong><br>最后一行则是进程相关的资源占用信息：</p><ul><li>PID：进程的ID，进程的唯一标识符。</li><li>USER：进程所有者的实际用户名。</li><li>PR：进程的优先级别，范围0-39，越小越优先被执行。</li><li>NI：nice值。范围-20-19，负值表示高优先级，正值表示低优先级。在top里，PR-NI=20，默认启动一个进程，nice是0。</li><li>VIRT：进程占用的虚拟内存。</li><li>RES：进程占用的物理内存。</li><li>SHR：进程使用的共享内存。</li><li>S：进程的状态。<ul><li>D：表示不可终端的睡眠状态。</li><li>R：表示正在运行。</li><li>S：表示休眠。</li><li>T：表示作业控制信号下已停止。</li><li>t：表示在调试状态的停止。</li><li>Z：表示僵死状态。</li></ul></li><li>%CPU：自从上一次更新到现在任务所使用的CPU使用率。</li><li>%MEM：进程使用的物理内存和总内存的百分比。</li><li>TIME+：该进程启动后占用的总的CPU时间，即占用CPU使用时间的累加值，精确到百分之一秒。</li><li>COMMAND：进程启动命令名称。</li></ul><h2 id="交互命令实例"><a href="#交互命令实例" class="headerlink" title="交互命令实例"></a>交互命令实例</h2><p><strong>实例：<code>h</code>：帮助</strong><br>描述：在<code>top</code>状态下，按<code>h</code>键或者<code>?</code>键显示交互命令的帮助菜单。<br>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Help for Interactive Commands - procps-ng version 3.3.10</span><br><span class="line">Window 1:Def: Cumulative mode Off.  System: Delay 3.0 secs; Secure mode Off.</span><br><span class="line"></span><br><span class="line">  Z,B,E,e   Global: &apos;Z&apos; colors; &apos;B&apos; bold; &apos;E&apos;/&apos;e&apos; summary/task memory scale</span><br><span class="line">  l,t,m     Toggle Summary: &apos;l&apos; load avg; &apos;t&apos; task/cpu stats; &apos;m&apos; memory info</span><br><span class="line">  0,1,2,3,I Toggle: &apos;0&apos; zeros; &apos;1/2/3&apos; cpus or numa node views; &apos;I&apos; Irix mode</span><br><span class="line">  f,F,X     Fields: &apos;f&apos;/&apos;F&apos; add/remove/order/sort; &apos;X&apos; increase fixed-width</span><br><span class="line"></span><br><span class="line">  L,&amp;,&lt;,&gt; . Locate: &apos;L&apos;/&apos;&amp;&apos; find/again; Move sort column: &apos;&lt;&apos;/&apos;&gt;&apos; left/right</span><br><span class="line">  R,H,V,J . Toggle: &apos;R&apos; Sort; &apos;H&apos; Threads; &apos;V&apos; Forest view; &apos;J&apos; Num justify</span><br><span class="line">  c,i,S,j . Toggle: &apos;c&apos; Cmd name/line; &apos;i&apos; Idle; &apos;S&apos; Time; &apos;j&apos; Str justify</span><br><span class="line">  x,y     . Toggle highlights: &apos;x&apos; sort field; &apos;y&apos; running tasks</span><br><span class="line">  z,b     . Toggle: &apos;z&apos; color/mono; &apos;b&apos; bold/reverse (only if &apos;x&apos; or &apos;y&apos;)</span><br><span class="line">  u,U,o,O . Filter by: &apos;u&apos;/&apos;U&apos; effective/any user; &apos;o&apos;/&apos;O&apos; other criteria</span><br><span class="line">  n,#,^O  . Set: &apos;n&apos;/&apos;#&apos; max tasks displayed; Show: Ctrl+&apos;O&apos; other filter(s)</span><br><span class="line">  C,...   . Toggle scroll coordinates msg for: up,down,left,right,home,end</span><br><span class="line"></span><br><span class="line">  k,r       Manipulate tasks: &apos;k&apos; kill; &apos;r&apos; renice</span><br><span class="line">  d or s    Set update interval</span><br><span class="line">  W,Y       Write configuration file &apos;W&apos;; Inspect other output &apos;Y&apos;</span><br><span class="line">  q         Quit</span><br><span class="line">          ( commands shown with &apos;.&apos; require a visible task display window ) </span><br><span class="line">Press &apos;h&apos; or &apos;?&apos; for help with Windows,</span><br><span class="line">Type &apos;q&apos; or &lt;Esc&gt; to continue</span><br></pre></td></tr></table></figure><p><strong>实例：显示各个CPU负载</strong><br>描述：在<code>top</code>状态下，按下“1”，可以显示每个CPU的负载情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">top - 22:30:09 up 247 days,  7:00,  2 users,  load average: 0.16, 0.14, 0.14</span><br><span class="line">Tasks: 126 total,   1 running, 125 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu0  :  0.3 us,  0.3 sy,  0.0 ni, 99.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu1  :  0.3 us,  0.0 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu2  :  0.3 us,  0.0 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu3  :  0.3 us,  0.3 sy,  0.0 ni, 99.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem :  3881808 total,   141164 free,  3578540 used,   162104 buff/cache</span><br><span class="line">KiB Swap:  4063228 total,  1206756 free,  2856472 used.    79768 avail Mem</span><br></pre></td></tr></table></figure><p><strong>实例：手动刷新</strong><br>描述：在<code>top</code>状态下，按空格或者回车进行手动刷新。top命令默认在一个特定间隔（3秒）后刷新显示。</p><p><strong>实例：<code>A</code>：切换交替显示模式</strong></p><p>描述：在<code>top</code>状态下，按<code>A</code>键，可以在全屏和交替模式间切换。在交替模式下会显示4个窗口。</p><ul><li>Def（默认字段组）</li><li>Job（任务字段组）</li><li>Mem（内存字段组）</li><li>Usr（用户字段组）</li></ul><p>这四组字段共有一个独立的可配置的概括区域和它自己的可配置任务区域。4个窗口中只有一个窗口是当前窗口。当前窗口的名称显示在左上方。只有当前窗口才会接受你键盘交互命令。<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-A.png" alt=""><br>可以用<code>a</code>和<code>w</code>在4个窗口间切换，<code>a</code>移到后一个窗口，<code>w</code>移到前一个窗口。用<code>g</code>命令可以输入一个数字来选择当前窗口。<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-switch.png" alt=""></p><p><strong>实例：<code>B</code>：粗体显示</strong><br>描述：在<code>top</code>状态下，按<code>B</code>键，会将一些重要信息会以加粗字体显示。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-B.png" alt=""></p><p><strong>实例：<code>d</code>或<code>s</code>：设置显示的刷新间隔</strong><br>描述：在<code>top</code>状态下，按<code>d</code>键或者<code>s</code>键，设置显示的刷新间隔为1秒。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-d-s.png" alt=""></p><p><strong>实例：<code>f</code>：字段管理</strong><br>描述：在<code>top</code>状态下，按<code>f</code>键进入字段管理界面。d键选择要显示的字段，用*标记的是已选择的。上下光标键在字段内导航，左光标键可以选择字段，右光标键进入排序状态，此时按上下光标键可以进行上下移动，回车确认。s键设置当前排序的字段，q或Esc键退出。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-f.png" alt=""></p><p><strong>实例：<code>R</code>：反向排序</strong><br>描述：在<code>top</code>状态下，按<code>R</code>键切换反向/常规排序。</p><p><strong>实例：<code>c</code>：切换显示命令名称和完整命令行</strong><br>描述：在<code>top</code>状态下，按<code>c</code>键，切换是否显示进程启动时的完整路径和程序名。也可以使用如下命令行。<br>命令：<code>top -c</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-c.png" alt=""></p><p><strong>实例：<code>i</code>：空闲任务</strong><br>描述：在<code>top</code>状态下，按i键，切换显示空闲任务。<br>输出：<br>不显示空闲任务：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-i.png" alt=""></p><p><strong>实例：<code>V</code>：树视图</strong><br>描述：在<code>top</code>状态下，按V键，切换树视图。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-V.png" alt=""></p><p><strong>实例：<code>z</code>：切换彩色显示</strong><br>描述：在<code>top</code>状态下，按<code>z</code>键，切换彩色，即打开或关闭彩色显示。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-z-normal.png" alt=""></p><p><strong>实例：<code>Z</code>：改变配色</strong><br>描述：在<code>top</code>状态下，按<code>Z</code>键，显示一个改变<code>top</code>命令的输出颜色的屏幕。可以为8个任务区域选择8种颜色。<br>输出：<br>设置修改：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-Z.png" alt=""><br>显示效果：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-Z-show.png" alt=""></p><p><strong>实例：按照内存使用大小排序</strong><br>描述：在<code>top</code>状态下，按shift+m，可以按照内存使用大小排序进程。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-M.png" alt=""></p><p><strong>实例：<code>x、y</code>：切换高亮信息</strong><br>描述：在<code>top</code>状态下，按<code>x</code>键将排序字段高亮显示（纵列）；按<code>y</code>键将运行进程高亮显示（横行）。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-x-y.png" alt=""></p><p><strong>实例：<code>u</code>：特定用户的进程</strong><br>描述：在<code>top</code>状态下，按u键将会提示输入用户名，输入首显示特定用户的进程。空白将会显示全部用户。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-u.png" alt=""></p><p><strong>实例：<code>n或#</code>：任务的数量</strong><br>描述：在<code>top</code>状态下，按n键或者<code>#</code>键可以设置最大显示的任务数量。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-n-#.png" alt=""></p><p><strong>实例：<code>k</code>：结束任务</strong><br>描述：在<code>top</code>状态下，按<code>k</code>键输入<code>PID</code>后，发送信号给任务（通常是结束任务）。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-k.png" alt=""></p><p><strong>实例：<code>r</code>：重新设置优先级</strong><br>描述：在<code>top</code>状态下，按<code>r</code>键输入-20~19范围中的数字后，重新设置一个任务的调度优先级（nice值）。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-k.png" alt=""></p><h2 id="命令行实例"><a href="#命令行实例" class="headerlink" title="命令行实例"></a>命令行实例</h2><p><strong>实例：<code>-p</code>：监控特定的PID</strong><br>描述：-p选项监控指定的PID。PID的值为0将被作为top命令自身的PID。<br>命令：<code>top -p 0</code></p><p><strong>实例：<code>-u或-U</code>: 用户名或者UID</strong><br>描述：可以用这些选项浏览特定用户的进程。用户名或者UID可以在选项中指定。-p、-u和-U选项是互斥的，同时只可以使用这其中一个选项。试图组合使用这些选项时，会得到一个错误:<br>命令：<code>top -p 1248 -u root</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-U-p-u-error.png" alt=""></p><p><strong>实例：<code>-b</code>：批处理模式</strong><br>描述：-b选项以批处理模式启动top命令，在文件中保存输出时是很有用的。</p><p><strong>实例：<code>-c</code>：命令/程序名 触发:</strong><br>描述：显示进程启动时的完整路径和程序名。</p><p><strong>实例：<code>-d</code>：设置延迟间隔</strong><br>描述：设置top的显示间隔(以秒计)。<br>命令：<code>top -d 1</code></p><p><strong>实例：<code>-i</code>：切换显示空闲进程</strong><br>命令：<code>top -i</code></p><p><strong>实例：<code>-n</code>：特定重复次数后退出</strong><br>描述：top输出保持刷新，直到按q键或者到达指定次数。下面的命令将在10次重复之后自动退出。<br>命令：<code>top -n 10</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;top&lt;/code&gt;命令可以实时动态地查看系统的整体运行情况，是一个综合了多方信息监测系统性能和运行信息的使用工具。&lt;code&gt;top&lt;/code&gt;命令提供了互动式的界面，用热键管理。这个命令是一个非常重要和常用的命令，但是同时也有点复杂，参数较多，怎么能够掌握好呢？用了这么多年，也都一直没有用好。老老实实读一遍手册，总体了解一下都有什么才好去做整理，有的时候可能连它都有什么功能都不知道。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://www.oxysun.cn/categories/Linux/"/>
    
      <category term="Shell" scheme="https://www.oxysun.cn/categories/Linux/Shell/"/>
    
    
      <category term="Linux" scheme="https://www.oxysun.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Git：Git merge的--ff和--no-ff</title>
    <link href="https://www.oxysun.cn/git/git-git-merge-ff-no-ff.html"/>
    <id>https://www.oxysun.cn/git/git-git-merge-ff-no-ff.html</id>
    <published>2018-07-12T14:07:00.000Z</published>
    <updated>2018-07-24T14:12:15.162Z</updated>
    
    <content type="html"><![CDATA[<p>Git：Git merge的–ff和–no-ff。<br><a id="more"></a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Git merge最容易糊涂的地方就是这个<code>--ff</code>参数和<code>--no-ff</code> 参数，通过本文，把这个整理清楚。</p><p>其实官网讲的非常清楚，不过可能因为是英文的，所以大家阅读起来会有一些障碍。（PS：其实还是应该逐步逐步提高自己阅读英文文档的能力，想达到一个更高的高度，是需要客服自己本身很多的弱点的）</p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>假设合并前的分支是这样，这个一个非常常见的场景，如果不明白，可以参考另外一篇文章Git Flow工作流：<br><img src="https://git-scm.com/book/en/v2/images/basic-branching-4.png" alt="这里写图片描述"><br>这是一个很常见的用例，功能开发分支是<code>iss53</code>，在开发新功能，<code>master</code>分支是线上分支，出现了问题，开辟了<code>hotfix</code>分支进行修复，修复完成，进行合并，需要把<code>hotfix</code>合并回<code>master</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">$ git merge hotfix</span><br><span class="line">Updating f42c576..3a0874c</span><br><span class="line">Fast-forward</span><br><span class="line"> index.html | 2 ++</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br></pre></td></tr></table></figure><p>步骤如下：</p><ol><li>切换回master分支。</li><li>将hotfix分支合并会master分支。<br>然后看到了<code>Fast-forward</code> 的字样，这个词组的意思就是快进，播放电影的时候，可以注意一下，快进按钮上面就是这个词组。<br>那么实际变成了什么样呢？<br><img src="https://git-scm.com/book/en/v2/images/basic-branching-5.png" alt="这里写图片描述"><br>仅仅是<code>master</code>指针指向了这个提交<code>C4</code>。这样是一种比较快的合并方式，轻量级，简单。<br>这个时候，我们往往会删掉<code>hotfix</code>分支，因为它的历史作用已经结束，这个时候，我们的<code>iss53</code>这个功能又向前开发，进行了一次提交，到了<code>C5</code>，那么变成了这样：<br><img src="https://git-scm.com/book/en/v2/images/basic-branching-6.png" alt="这里写图片描述"><br>然后，我们要把<code>iss53</code> 这个分支合并回<code>master</code>，就变成了这样：<br><img src="https://git-scm.com/book/en/v2/images/basic-merging-2.png" alt="这里写图片描述"><br>这个时候生成了一个新的<code>commit</code>号，这种提交就不是<code>fast-forward</code>（这个时候也无法生成<code>fast-forward</code>提交，因为要将两个版本的内容进行合并，只有在没有需要合并内容的时候，会有这个<code>fast-forward</code> 方式的提交）。<br>如果我们对第一次合并，使用了<code>--no-ff</code>参数，那么也会产生这样的结果，生成一个新的提交，实际上等于是对<code>C4</code> 进行一次复制，创建一个新的<code>commit</code>，这就是<code>--no-ff</code>的作用。<br><img src="https://i.stack.imgur.com/FMD5h.png" alt="这里写图片描述"></li></ol><p>参考：<a href="https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging，这里讲了原理。" target="_blank" rel="noopener">https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging，这里讲了原理。</a><br>参考：<a href="https://git-scm.com/docs/git-merge，这里是参考。" target="_blank" rel="noopener">https://git-scm.com/docs/git-merge，这里是参考。</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git：Git merge的–ff和–no-ff。&lt;br&gt;
    
    </summary>
    
      <category term="Git" scheme="https://www.oxysun.cn/categories/Git/"/>
    
    
      <category term="Git" scheme="https://www.oxysun.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu：新增和删除用户</title>
    <link href="https://www.oxysun.cn/linux/ubuntu-user-add-delete.html"/>
    <id>https://www.oxysun.cn/linux/ubuntu-user-add-delete.html</id>
    <published>2018-07-12T03:15:00.000Z</published>
    <updated>2018-07-18T11:09:55.846Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu：新增和删除用户，修改用户组信息。<br><a id="more"></a><br>参考：<a href="https://www.digitalocean.com/community/tutorials/how-to-add-and-delete-users-on-ubuntu-16-04#how-to-delete-a-user。" target="_blank" rel="noopener">https://www.digitalocean.com/community/tutorials/how-to-add-and-delete-users-on-ubuntu-16-04#how-to-delete-a-user。</a></p><p><code>Linux</code>上root用户是权力最大的用户，但是也非常危险，处于安全考虑，增加个人用户是必要的方法，下文讲了讲在<code>Ubuntu</code>上如何新增和删除用户。</p><h1 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h1><p><strong>实例：</strong> <code>root</code>用户新增用户<code>chenming</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">root@iZhp3fz3iqsadyes2s8ay8Z:~# adduser chenming</span><br><span class="line">Adding user `chenming&apos; ...</span><br><span class="line">Adding new group `chenming&apos; (1000) ...</span><br><span class="line">Adding new user `chenming&apos; (1000) with group `chenming&apos; ...</span><br><span class="line">Creating home directory `/home/chenming&apos; ...</span><br><span class="line">Copying files from `/etc/skel&apos; ...</span><br><span class="line">Enter new UNIX password: </span><br><span class="line">Retype new UNIX password: </span><br><span class="line">passwd: password updated successfully</span><br><span class="line">Changing the user information for chenming</span><br><span class="line">Enter the new value, or press ENTER for the default</span><br><span class="line">Full Name []: </span><br><span class="line">Room Number []: </span><br><span class="line">Work Phone []: </span><br><span class="line">Home Phone []: </span><br><span class="line">Other []: </span><br><span class="line">Is the information correct? [Y/n] y</span><br></pre></td></tr></table></figure></p><p>首先创建了一个新的用户组<code>chenming</code>。<br>在这个组内新建了用户<code>chenming</code>。<br>要求你输入密码。<br>要求输入一些其他信息，可以按回车略过。<br>最后按下<code>y</code>对以上信息进行确认。</p><p><strong>实例：</strong>非<code>root</code>用户新增用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sudo adduser chenming</span><br></pre></td></tr></table></figure><h1 id="给用户授权"><a href="#给用户授权" class="headerlink" title="给用户授权"></a>给用户授权</h1><p><strong>实例：</strong>把<code>chenming</code>加到<code>sudo</code>组里面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@iZhp3fz3iqsadyes2s8ay8Z:~# groups chenming</span><br><span class="line">chenming : chenming</span><br></pre></td></tr></table></figure><p>可以看到，<code>chenming</code>只在<code>chenming</code>的组里面（前面是用户名，冒号后面是组名）。在这个组里面，可能很多命令你都不能执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@iZhp3fz3iqsadyes2s8ay8Z:~# usermod -aG sudo chenming</span><br></pre></td></tr></table></figure><p>再来看一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@iZhp3fz3iqsadyes2s8ay8Z:~# groups chenming</span><br><span class="line">chenming : chenming sudo</span><br></pre></td></tr></table></figure><p>look，进入了sudo组了，这下你可以臭屁了。</p><p>还有一种方法可以加入<code>sodu</code>组。<br>如果是<code>root</code>用户。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@iZhp3fz3iqsadyes2s8ay8Z:~# visudo</span><br></pre></td></tr></table></figure></p><p>这个时候会打开一个文本编辑器，去编辑<code>/etc/sudoer</code>这个文件，可能是<code>vim</code>，也可能是<code>nano</code>。<br>找到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># User privilege specification</span><br><span class="line">root    ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure><p>在下面加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chenming ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure><p>保存（vim下是<code>:x</code>，<code>nano</code>下是<code>ctrl+x</code>），退出，这样<code>chenming</code>这个用户就加入了<code>sudo</code>组。</p><h1 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h1><p>仅仅删除用户：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@iZhp3fz3iqsadyes2s8ay8Z:~# deluser chenming</span><br><span class="line">Removing user `chenming&apos; ...</span><br><span class="line">Warning: group `chenming&apos; has no more members.</span><br><span class="line">Done.</span><br></pre></td></tr></table></figure></p><p>将用户的目录也删除：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@iZhp3fz3iqsadyes2s8ay8Z:~# deluser --remove-home chenming</span><br></pre></td></tr></table></figure></p><p>但这个时候，这个已经被删除的用户还是在<code>sudo</code>组里面。<br>参照上面的过程，使用visudo命令，删掉增加的那一行即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ubuntu：新增和删除用户，修改用户组信息。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://www.oxysun.cn/categories/Linux/"/>
    
      <category term="Ubuntu" scheme="https://www.oxysun.cn/categories/Linux/Ubuntu/"/>
    
    
      <category term="Linux" scheme="https://www.oxysun.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>JS：NPM依赖包版本号脱字符&quot;^&quot;</title>
    <link href="https://www.oxysun.cn/js/js-npm-symbol-caret.html"/>
    <id>https://www.oxysun.cn/js/js-npm-symbol-caret.html</id>
    <published>2018-07-11T15:07:00.000Z</published>
    <updated>2018-07-18T11:09:55.841Z</updated>
    
    <content type="html"><![CDATA[<p>JS：NPM依赖包版本号脱字符”^”。<br><a id="more"></a></p><p>参考官网：<a href="https://github.com/npm/node-semver#functions。" target="_blank" rel="noopener">https://github.com/npm/node-semver#functions。</a></p><blockquote><p>Caret Ranges ^1.2.3 ^0.2.5 ^0.0.4<br>Allows changes that do not modify the left-most non-zero digit in the [major, minor, patch] tuple. In other words, this allows patch and minor updates for versions 1.0.0 and above, patch updates for versions 0.X &gt;=0.1.0, and no updates for versions 0.0.X.<br><br>Many authors treat a 0.x version as if the x were the major “breaking-change” indicator.</p></blockquote><p>大概意思是：允许的改变不能发生在最左侧非零的数字上，NPM采用的是3元组的版本控制，[major，minor，patch]。换句话说，对于版本<code>1.0.0</code>，允许变更的是<code>minor</code>和<code>patch</code>，对于<code>0.X</code>的，<code>patch</code>可以变更，而对于<code>0.0.X</code>，啥都不能变了。<br>这里说的改变是说，npm在自动安装时去获取的这个包的版本，如果使用了脱字符或者波浪线等符号，它可以去获取的版本就是在一个范围之内，而不是固定的，这两个符号就是去约束这个范围的。这里还涉及一个版本锁定的概念，涉及yarn的一些理念，回头再讨论。</p><blockquote><p>Caret ranges are ideal when an author may make breaking changes between 0.2.4 and 0.3.0 releases, which is a common practice. However, it presumes that there will not be breaking changes between 0.2.4 and 0.2.5. It allows for changes that are presumed to be additive (but non-breaking), according to commonly observed practices.</p></blockquote><p>“^”这个符号叫做脱字符（caret），这好像是原来打字机的一个功能，现在叫这个名字感觉是有些陌生的。<br>以下是一些例子，感觉也没有太多可讲的。</p><blockquote><ul><li>^1.2.3 := &gt;=1.2.3 &lt;2.0.0（解释：如果是^1.2.3，那么获取包的范围就是版本&gt;=1.2.3，并且&lt;2.0.0。）</li><li>^0.2.3 := &gt;=0.2.3 &lt;0.3.0</li><li>^0.0.3 := &gt;=0.0.3 &lt;0.0.4</li><li>^1.2.3-beta.2 := &gt;=1.2.3-beta.2 &lt;2.0.0 Note that prereleases in the 1.2.3 version will be allowed, if they are greater than or equal to beta.2. So, 1.2.3-beta.4 would be allowed, but 1.2.4-beta.2 would not, because it is a prerelease of a different [major, minor, patch] tuple.</li><li>^0.0.3-beta := &gt;=0.0.3-beta &lt;0.0.4 Note that prereleases in the 0.0.3 version only will be allowed, if they are greater than or equal to beta. So, 0.0.3-pr.2 would be allowed.</li></ul></blockquote><blockquote><p>When parsing caret ranges, a missing patch value desugars to the number 0, but will allow flexibility within that value, even if the major and minor versions are both 0.</p></blockquote><blockquote><ul><li>^1.2.x := &gt;=1.2.0 &lt;2.0.0</li><li>^0.0.x := &gt;=0.0.0 &lt;0.1.0</li><li>^0.0 := &gt;=0.0.0 &lt;0.1.0</li></ul></blockquote><blockquote><p>A missing minor and patch values will desugar to zero, but also allow flexibility within those values, even if the major version is zero.</p></blockquote><blockquote><ul><li>^1.x := &gt;=1.0.0 &lt;2.0.0</li><li>^0.x := &gt;=0.0.0 &lt;1.0.0</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JS：NPM依赖包版本号脱字符”^”。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.oxysun.cn/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>JS：NPM依赖包版本号波浪字符&quot;~&quot;</title>
    <link href="https://www.oxysun.cn/js/js-npm-symbol-tilde.html"/>
    <id>https://www.oxysun.cn/js/js-npm-symbol-tilde.html</id>
    <published>2018-07-11T15:07:00.000Z</published>
    <updated>2018-07-18T11:09:55.842Z</updated>
    
    <content type="html"><![CDATA[<p>JS：NPM依赖包版本号波浪字符”~”。<br><a id="more"></a></p><p>参考官网：<a href="https://github.com/npm/node-semver#functions。" target="_blank" rel="noopener">https://github.com/npm/node-semver#functions。</a></p><blockquote><p>Tilde Ranges ~1.2.3 ~1.2 ~1<br>Allows patch-level changes if a minor version is specified on the comparator. Allows minor-level changes if not.</p></blockquote><p>如果minor被指定，则允许patch被改变；如果没有，允许minor被改变。（个别知识需要参考前面的帖子）</p><blockquote><p>~1.2.3 := &gt;=1.2.3 &lt;1.(2+1).0 := &gt;=1.2.3 &lt;1.3.0<br>~1.2 := &gt;=1.2.0 &lt;1.(2+1).0 := &gt;=1.2.0 &lt;1.3.0 (Same as 1.2.x)<br>~1 := &gt;=1.0.0 &lt;(1+1).0.0 := &gt;=1.0.0 &lt;2.0.0 (Same as 1.x)<br>~0.2.3 := &gt;=0.2.3 &lt;0.(2+1).0 := &gt;=0.2.3 &lt;0.3.0<br>~0.2 := &gt;=0.2.0 &lt;0.(2+1).0 := &gt;=0.2.0 &lt;0.3.0 (Same as 0.2.x)<br>~0 := &gt;=0.0.0 &lt;(0+1).0.0 := &gt;=0.0.0 &lt;1.0.0 (Same as 0.x)<br>~1.2.3-beta.2 := &gt;=1.2.3-beta.2 &lt;1.3.0 Note that prereleases in the 1.2.3 version will be allowed, if they are greater than or equal to beta.2. So, 1.2.3-beta.4 would be allowed, but 1.2.4-beta.2 would not, because it is a prerelease of a different [major, minor, patch] tuple.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JS：NPM依赖包版本号波浪字符”~”。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.oxysun.cn/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux下shell命令用法及常见用例：tar</title>
    <link href="https://www.oxysun.cn/linux/shell-command-tar.html"/>
    <id>https://www.oxysun.cn/linux/shell-command-tar.html</id>
    <published>2018-07-10T15:06:00.000Z</published>
    <updated>2018-07-18T11:09:55.844Z</updated>
    
    <content type="html"><![CDATA[<p>tar命令用来归档多个文件或目录到单个归档文件中，并且归档文件可以进一步使用gzip或者bzip2等技术进行压缩。</p><a id="more"></a><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>tar [OPTION...] [FILE]...</code></p><h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>Tar（Tape ARchive，磁带归档的缩写，最初设计用于将文件打包到磁带上，现在大都使用它来实现备份某个分区或者某些重要的目录）是类Unix系统中使用最广泛的命令，用于归档多个文件或目录到单个归档文件中，并且归档文件可以进一步使用gzip或者bzip2等技术进行压缩，还能保留其文件权限。换言之，tar命令也可以用于备份：先是归档多个文件和目录到一个单独的tar文件或归档文件，然后在需要之时将tar文件中的文件和目录释放出来。</p><h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><table><thead><tr><th style="text-align:left">选项</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">-A或–catenate</td><td style="text-align:left">新增文件到以存在的备份文件</td></tr><tr><td style="text-align:left">-B</td><td style="text-align:left">设置区块大小</td></tr><tr><td style="text-align:left">-c或–create</td><td style="text-align:left">建立新的备份文件</td></tr><tr><td style="text-align:left">-C&lt;目录&gt;</td><td style="text-align:left">这个选项用在解压缩，若要在特定目录解压缩，可以使用这个选项</td></tr><tr><td style="text-align:left">-d</td><td style="text-align:left">记录文件的差别</td></tr><tr><td style="text-align:left">-x或–extract或–get</td><td style="text-align:left">从备份文件中还原文件</td></tr><tr><td style="text-align:left">-t或–list</td><td style="text-align:left">列出备份文件的内容</td></tr><tr><td style="text-align:left">-z或–gzip或–ungzip</td><td style="text-align:left">通过gzip指令处理备份文件</td></tr><tr><td style="text-align:left">-Z或–compress或–uncompress</td><td style="text-align:left">通过compress指令处理备份文件</td></tr><tr><td style="text-align:left">-f&lt;备份文件&gt;或–file=&lt;备份文件&gt;</td><td style="text-align:left">指定备份文件</td></tr><tr><td style="text-align:left">-v或–verbose</td><td style="text-align:left">显示指令执行过程</td></tr><tr><td style="text-align:left">-r</td><td style="text-align:left">添加文件到已经压缩的文件</td></tr><tr><td style="text-align:left">-u</td><td style="text-align:left">添加改变了和现有的文件到已经存在的压缩文件</td></tr><tr><td style="text-align:left">-j</td><td style="text-align:left">支持bzip2解压文件</td></tr><tr><td style="text-align:left">-v</td><td style="text-align:left">显示操作过程</td></tr><tr><td style="text-align:left">-l</td><td style="text-align:left">文件系统边界设置</td></tr><tr><td style="text-align:left">-k</td><td style="text-align:left">保留原有文件不覆盖</td></tr><tr><td style="text-align:left">-m</td><td style="text-align:left">保留文件不被覆盖</td></tr><tr><td style="text-align:left">-w</td><td style="text-align:left">确认压缩文件的正确性</td></tr><tr><td style="text-align:left">-p或–same-permissions</td><td style="text-align:left">用原来的文件权限还原文件</td></tr><tr><td style="text-align:left">-P或–absolute-names</td><td style="text-align:left">文件名使用绝对名称，不移除文件名称前的“/”号</td></tr><tr><td style="text-align:left">-N</td><td style="text-align:left">&lt;日期格式&gt;或–newer=&lt;日期时间&gt;只将较指定日期更新的文件保存到备份文件里</td></tr><tr><td style="text-align:left">–exclude=&lt;范本样式&gt;</td><td style="text-align:left">排除符合范本样式的文件</td></tr></tbody></table><h2 id="什么是“文件压缩”？"><a href="#什么是“文件压缩”？" class="headerlink" title="什么是“文件压缩”？"></a>什么是“文件压缩”？</h2><p>我们知道，在计算机系统中文件的内容是信息，信息实际上就是一个由值0和值1组成的位（又称为比特）序列，8个位被组织成一组，称为字节。一般来说，一个字节的8位是没有被全部利用起来的，这些没有被利用的位占据了一个文件的大部分空间，而“文件压缩”就是利用复杂的计算方式，将这些没有利用的空间腾出来，以让文件占用的空间变小。</p><p>简单来说，「压缩」就是把文件中没有完全填满的空间填满。压缩过的文件不能直接被操作系统所使用，因此，「解压缩」就是指把文件「还原」为未压缩之前的模样。压缩前与压缩后的文件所占用的磁盘空间大小之比就是「压缩比」。</p><!-- more --><h2 id="常见的压缩格式"><a href="#常见的压缩格式" class="headerlink" title="常见的压缩格式"></a>常见的压缩格式</h2><p>Linux 中常见的压缩格式有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*.Z：compress 程序压缩的文件。</span><br><span class="line">*.gz：gzip 程序压缩的文件。</span><br><span class="line">*.bz2：bzip2 程序压缩的文件。</span><br><span class="line">*.tar：tar 程序打包的数据，没有被压缩过。</span><br><span class="line">*.tar.gz（简写为 .tgz）：tar 程序打包的数据，经过 gzip 的压缩。</span><br><span class="line">*.tar.bz2（简写为 .tbz2）：tar 程序打包的数据，经过 bzip2 的压缩。</span><br></pre></td></tr></table></figure><p>上面的压缩格式中，主要是gzip和bzip2两个压缩命令，它们是GNU计划的中的一部分，在此之前是compress命令，但它已经不再流行了。bzip2比gzip的压缩比很好，不过bzip2通常只能针对一个文件来压缩和解压缩。如果是这样的话，压缩整个开发环境目录就太繁琐了。</p><p>因此tar命令就出现了，tar不是一个 “压缩命令”，而是一个“打包命令”。也就是说，tar可以把很多文件「打包」成一个文件，甚至连目录也可以进行打包。一开始tar命令的确是不支持压缩的功能，后来GNU计划为了提供给使用者更方便并且更加强大的压缩与打包功能，就把整个tar与压缩的功能结合在一起了。</p><p>仅仅打包起来的tar文件俗称tarfile文件，经过压缩的tar文件叫做tarball文件。</p><h2 id="全能的-tar-命令"><a href="#全能的-tar-命令" class="headerlink" title="全能的 tar 命令"></a>全能的 tar 命令</h2><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p>tar可以将多个目录或文件打成一个大文件，同时支持gzip/bzip2</p><p>归档：tar {-c} [option…] -f destination source<br>追加归档：tar {-r | -u} -f source [option…] destination<br>解压：tar {-t | -x} -f source [option…] -C destination</p><p>最简单的使用 tar 只要记住下面的方式：</p><ul><li>压缩：tar -jcv -f filename.tar.bz2 被压缩的文件或目录名称</li><li>查看文件：tar -jtv -f filename.tar.bz2 </li><li>解压缩：tar -jxv -f filename.tar.gz -C 解压到哪里</li></ul><p>filename.tar.bz2 既然tar不是一个压缩命令，是个打包命令，那么是如何做到打包并压缩的呢？我们先来看一下tar命令的常用参数：</p><h3 id="模式参数"><a href="#模式参数" class="headerlink" title="模式参数"></a>模式参数</h3><ul><li>-c（–create）：创建新的归档文件。</li><li>-r（–append）：与-c一样创建新的归档文件，但这是以追加的模式，只能往未压缩过的归档文件中追加，要求指定-f参数。</li><li>-t：查看归档文件的内容含有哪些文件，可以看到包括文件名在内的详细信息。</li><li>-u：与-r一样，但是只往归档文件添加更新的文件。</li><li>-x：解压缩归档文件。如果一个归档文件里有相同文件名的多个文件，那么会先将每个文件解压，最新的文件将覆盖旧的文件。</li></ul><p>tar分为三种模式，-c，-r，-u三个一类，为归档/压缩模式，在该模式下，tar会递归遍历指定目录下的所有目录和文件，并创建归档文件。-x表示为去归档/解压模式，-t表示为打印列表模式。</p><h3 id="通用参数"><a href="#通用参数" class="headerlink" title="通用参数"></a>通用参数</h3><ul><li>-j：使用bzip2的支持进行压缩和解压缩，文件名最好为*.tar.bz2。</li><li>-z：使用gzip的支持进行压缩和解压缩，文件名最好为*.tar.gz。</li><li>-v：在压缩/解压缩的过程中，将正在处理的文件名显示出来。</li><li>-f：后面接被处理的文件名，最好把-f单独出来写一个参数。</li><li>-C：指定解压的目录。</li><li>-p：保留文件的原始信息，权限等等</li><li>-P：解压时保留绝对路径。</li><li>–exclude=FILE：在打包压缩的时候，不要将FILE打包。</li></ul><h3 id="打包并创建归档文件"><a href="#打包并创建归档文件" class="headerlink" title="打包并创建归档文件"></a><strong>打包并创建归档文件</strong></h3><p>示例：打包一个目录。<br>描述：将/home/test这个目录打包，生成文件名为command-18-06-02.tar的归档文件，保存在当前目录下。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> tar -cv -f command-18-06-02.tar /home/test</span><br><span class="line">/home/test/.bash_logout</span><br><span class="line">/home/test/.bashrc</span><br><span class="line">/home/test/apache-tomcat-9.0.7.tar.gz</span><br><span class="line">/home/test/.bash_profile</span><br><span class="line">/home/test/nginx-1.10.1.tar.gz</span><br></pre></td></tr></table></figure></p><p>-c（–create的简写）参数，这表示为指定的文件或者目录创建新的归档文件。使用-f指定读取或者写入的归档文件，可以用-表示标准输入或者标准输出，-f可以与其他参数连起来写，必须保证f参数后面跟的是文件名。但不推荐这样写，因为参数调换顺序是允许的，如果写成-cfv就会导致压缩后的文件名变成了v。</p><p>使用-v表示生成详细的输出，在压缩或者解压的模式中，会列出正在向归档文件读或者写的文件名字。</p><h3 id="创建tar-gz归档文件"><a href="#创建tar-gz归档文件" class="headerlink" title="创建tar.gz归档文件"></a><strong>创建tar.gz归档文件</strong></h3><p>示例：打包并且使用gzip压缩。<br>描述：将/home/test/images目录下的所有文件以及目录中的文件打包，并用gzip进行压缩，生成名为MyImages-18-06-02.tar.gz的归档文件，放在当前目录下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> tar -zcv -f MyImages-18-06-02.tar.gz /home/test/images</span><br><span class="line">OR</span><br><span class="line"><span class="meta">#</span> tar -zcv -f MyImages-18-06-02.tar.tgz /home/test/images</span><br><span class="line">/home/test/images/alejandro-gonzalez-17189.jpg</span><br><span class="line">/home/test/images/brooke-lark-275181.jpg</span><br><span class="line">/home/test/images/brenda-godinez-228181.jpg</span><br><span class="line">/home/test/images/artur-rutkowski-97622.jpg</span><br><span class="line">/home/test/images/ben-white-138743.jpg</span><br></pre></td></tr></table></figure><p>-z表示要使用gzip支持来压缩或者解压文件，注意gzip的压缩的文件格式最好写成tar.gz。（注：tar.gz 和 tgz 是同一个意思）</p><h3 id="打包压缩排除某些文件"><a href="#打包压缩排除某些文件" class="headerlink" title="打包压缩排除某些文件"></a><strong>打包压缩排除某些文件</strong></h3><p>示例：打包压缩并排除某些文件。<br>描述：将/home/test/images目录下，排除brooke-lark-275181.jpg和ben-white-138743.jpg之外的所有文件打包，并用gzip进行压缩，生成名为MyImages-18-06-02.tar.gz的归档文件，放在当前目录下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> tar -czv -f MyImages-18-06-02.tar.gz --exclude=./brooke-lark-275181.jpg --exclude=./ben-white-138743.jpg /home/test/images</span><br><span class="line">/home/test/images/alejandro-gonzalez-17189.jpg</span><br><span class="line">/home/test/images/brenda-godinez-228181.jpg</span><br><span class="line">/home/test/images/artur-rutkowski-97622.jpg</span><br></pre></td></tr></table></figure><h3 id="解压归档文件（默认）"><a href="#解压归档文件（默认）" class="headerlink" title="解压归档文件（默认）"></a><strong>解压归档文件（默认）</strong></h3><p>示例：解压，默认解压。<br>描述：将名为MyImages-18-06-02.tar的归档文件解压至当前目录下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> tar -xvf MyImages-18-06-02.tar</span><br><span class="line">home/test/images/alejandro-gonzalez-17189.jpg</span><br><span class="line">home/test/images/brenda-godinez-228181.jpg</span><br><span class="line">home/test/images/artur-rutkowski-97622.jpg</span><br></pre></td></tr></table></figure><p>其中，-x参数表示去解压一个归档文件，如果归档文件中有两个相同名字的文件，那么每一个文件都会被解压出来，然后最新的会覆盖旧的文件。注意这里没有指定-j参数，因为tar看到指定了-x参数，就知道这是解压操作，会自动判断该解压包的压缩类型。</p><h3 id="解压归档文件并指定目录"><a href="#解压归档文件并指定目录" class="headerlink" title="解压归档文件并指定目录"></a><strong>解压归档文件并指定目录</strong></h3><p>示例：解压到一个指定目录。<br>描述：将名为MyImages-18-06-02.tar.gz的归档文件解压至一个指定的目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> tar -xv -f MyImages-18-06-02.tar -C /home/test/public_images</span><br><span class="line">home/test/public_images/alejandro-gonzalez-17189.jpg</span><br><span class="line">home/test/public_images/brenda-godinez-228181.jpg</span><br><span class="line">home/test/public_images/artur-rutkowski-97622.jpg</span><br></pre></td></tr></table></figure><h3 id="查看压缩包文件信息"><a href="#查看压缩包文件信息" class="headerlink" title="查看压缩包文件信息"></a><strong>查看压缩包文件信息</strong></h3><p>示例：查看压缩包文件信息。<br>描述：列出MyImages-18-06-02.tar.bz2中的文件信息，-v参数，会生成与ls(1)命令相近的输出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> tar -tv -f MyImages-18-06-02.tar.gz</span><br><span class="line">OR</span><br><span class="line"><span class="meta">#</span> tar -tv -f MyImages-18-06-02.tar.bz2</span><br><span class="line">-rw-r--r-- root/root   2176861 2018-06-02 21:26 home/test/images/alejandro-gonzalez-17189.jpg</span><br><span class="line">-rw-r--r-- root/root   8452524 2018-06-02 21:26 home/test/images/brenda-godinez-228181.jpg</span><br><span class="line">-rw-r--r-- root/root   1131986 2018-06-02 21:26 home/test/images/artur-rutkowski-97622.jpg</span><br></pre></td></tr></table></figure><h3 id="解压单个文件"><a href="#解压单个文件" class="headerlink" title="解压单个文件"></a><strong>解压单个文件</strong></h3><p>示例：解压单个文件。<br>描述：将home/test/.bashrc这一个文件从归档文件中提取出来。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> tar -xv -f command-18-06-02.tar home/test/.bashrc</span><br><span class="line">home/test/.bashrc</span><br></pre></td></tr></table></figure><h3 id="解压多个指定的文件"><a href="#解压多个指定的文件" class="headerlink" title="解压多个指定的文件"></a><strong>解压多个指定的文件</strong></h3><p>示例：解压多个指定的文件。<br>描述：将file1、file2等多个文件从归档文件中提取出来，可以用空格隔开多个文件，也可以用通配符的形式。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> tar -zxv -f MyImages-18-06-02.tar.gz "file 1" "file 2"</span><br><span class="line">OR</span><br><span class="line"><span class="meta">#</span> tar -zxv -f MyImages-18-06-02.tar.gz --wildcards '*b*.jpg'</span><br><span class="line">home/test/images/brooke-lark-275181.jpg</span><br><span class="line">home/test/images/brenda-godinez-228181.jpg</span><br><span class="line">home/test/images/ben-white-138743.jpg</span><br><span class="line">home/test/images/aleks-dahlberg-274646.jpg</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;tar命令用来归档多个文件或目录到单个归档文件中，并且归档文件可以进一步使用gzip或者bzip2等技术进行压缩。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://www.oxysun.cn/categories/Linux/"/>
    
      <category term="Shell" scheme="https://www.oxysun.cn/categories/Linux/Shell/"/>
    
    
      <category term="Linux" scheme="https://www.oxysun.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>CSS：文档流</title>
    <link href="https://www.oxysun.cn/css/css-normal-flow.html"/>
    <id>https://www.oxysun.cn/css/css-normal-flow.html</id>
    <published>2018-07-09T15:24:00.000Z</published>
    <updated>2018-07-18T11:09:55.837Z</updated>
    
    <content type="html"><![CDATA[<p>CSS的文档流介绍。<br><a id="more"></a></p><p>官网：<a href="https://www.w3.org/TR/2016/WD-CSS22-20160412/visuren.html#normal-flow。" target="_blank" rel="noopener">https://www.w3.org/TR/2016/WD-CSS22-20160412/visuren.html#normal-flow。</a></p><h1 id="文档流"><a href="#文档流" class="headerlink" title="文档流"></a>文档流</h1><p>文档流其实应该叫正常流，英文是<code>Normal flow</code>，我的理解呢，就是接收到的文档的内容，因为这些内容一直从服务端传输过来，边传输边需要处理，就像水流一样，所以称为流。</p><p>在文档流中的盒子是需要归属于一个上下文的，块级盒子参与到块格式化上下文中，内联级盒子参与到内联格式化上下文中，还有表格格式化上下文。</p><h2 id="块格式化上下文（Block-formatting-contexts）"><a href="#块格式化上下文（Block-formatting-contexts）" class="headerlink" title="块格式化上下文（Block formatting contexts）"></a>块格式化上下文（Block formatting contexts）</h2><p>块格式化上下文，简称<code>BFC</code>，是按照从上到下，一个一个垂直排列的，块之间的间距是靠<code>margin</code>来控制的。</p><blockquote><p>In a block formatting context, boxes are laid out one after the other, vertically, beginning at the top of a containing block. The vertical distance between two sibling boxes is determined by the ‘margin’ properties. Vertical margins between adjacent block-level boxes in a block formatting context collapse.</p></blockquote><p>翻译：在块格式化上下文中，框从一个包含块的顶部开始一个接一个地垂直排列。 两个兄弟盒子之间的垂直距离由“margin”属性决定。 块格式化上下文中相邻块级盒子之间的垂直<code>margin</code>会折叠。</p><p>##内联格式化上下文（Inline formatting contexts）<br>内联格式化上下文，简称<code>IFC</code>，主要是水平排列的，水平对齐是由一些参数来控制的。</p><blockquote><p>An inline formatting context is established by a block container box that contains no block-level boxes. In an inline formatting context, boxes are laid out horizontally, one after the other, beginning at the top of a containing block. Horizontal margins, borders, and padding are respected between these boxes. The boxes may be aligned vertically in different ways: their bottoms or tops may be aligned, or the baselines of text within them may be aligned. The rectangular area that contains the boxes that form a line is called a line box.</p></blockquote><p>翻译：内联格式化上下文由不包含块级框的块容器盒子建立。 在内联格式化上下文中，盒子从一个接一个地开始，从一个包含块的顶部开始。 这些框之间会考虑水平边距，边框和填充。 盒子可以以不同的方式垂直对齐：它们的底部或顶部可以对齐，或者它们内的文本的基线可以对齐。 包含形成一条线的框的矩形区域称为线盒子<code>line box</code>。</p><p>这里面有一些父容器和子布局的一些关系，需要梳理。</p><h2 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h2><p>相对定位是根据这个盒子原本在文档流中的位置或者floated进行一些偏移。</p><p>未完，待续……</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSS的文档流介绍。&lt;br&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://www.oxysun.cn/categories/CSS/"/>
    
    
  </entry>
  
  <entry>
    <title>Java：Tomcat的部署实例之资源目录</title>
    <link href="https://www.oxysun.cn/java/java-deploy-resource-folder.html"/>
    <id>https://www.oxysun.cn/java/java-deploy-resource-folder.html</id>
    <published>2018-07-07T11:55:00.000Z</published>
    <updated>2018-07-18T11:09:55.840Z</updated>
    
    <content type="html"><![CDATA[<p>Tomcat上部署应用后，原本目录是否会被移除。<br><a id="more"></a></p><p><strong>实例：</strong><br>一个项目的资源放在了WebContent下面，这样每次打包，都会将这些文件打包进去，这样在打包时，导致打出来的war包有好几百兆，这样上传Git也非常不方便。</p><p>方案1：<br>分析：如果删除掉本地WebContent下的资源文件，再部署到服务器上，war包其实是一个压缩包，加压后覆盖原本目录下的相同内容，因为新上传的war包没有相同的资源文件，这样就不会覆盖原本的资源文件。<br>结果：加压后的项目目录也不存在资源文件了，看来这个部署过程，是会删掉原本的项目目录的。</p><p>方案2：<br>分析：因为webapps是web服务根目录，那么把资源文件从项目目录移到webapps下面，这样应该也可以被访问到。<br>结果：成功，可以被访问到。</p><p>为了验证这个，上网查了很多帖子，众说纷纭，最后还是在<a href="https://tomcat.apache.org/tomcat-8.0-doc/deployer-howto.html" target="_blank" rel="noopener">官网</a>找到这么一段话：</p><blockquote><p>The following deployment sequence will occur on Tomcat startup in that case:</p><ol><li>Any Context Descriptors will be deployed first.</li><li>Exploded web applications not referenced by any Context Descriptor will then be deployed. If they have an associated .WAR file in the appBase and it is newer than the exploded web application, the exploded directory will be removed and the webapp will be redeployed from the .WAR</li><li>.WAR files will be deployed</li></ol></blockquote><p>注意这里<code>the exploded directory will be removed and the webapp will be redeployed from the .WAR</code>，原本的解压目录会被移除，应用会被重新从<code>war</code>文件中部署。</p><p>寻根究底，而不人云亦云，这样才是端正的学习的态度。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Tomcat上部署应用后，原本目录是否会被移除。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.oxysun.cn/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Git：工作流程Git Flow</title>
    <link href="https://www.oxysun.cn/git/git-git-flow.html"/>
    <id>https://www.oxysun.cn/git/git-git-flow.html</id>
    <published>2018-07-06T13:22:00.000Z</published>
    <updated>2018-07-24T14:12:08.004Z</updated>
    
    <content type="html"><![CDATA[<p>Git的工作流程Git Flow介绍。<br><a id="more"></a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>参考：<a href="https://nvie.com/posts/a-successful-git-branching-model/，" target="_blank" rel="noopener">https://nvie.com/posts/a-successful-git-branching-model/，</a> 这篇帖子是10年发表的，而我大概是08、09年接触的Git，当时因为刚刚花了好大气力研究明白SVN的流程，所以对Git很排斥，这也是我工作中一直以来的一个问题，因为在一项老技术上花了太多气力，而导致对新技术的出现本能地产生很大的排斥。如果当时仔细去研究一下Git，应该会发现Git不是来革我们这些SVN拥趸的命，而是提供完善和丰富了SVN的功能。</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>从CVS到SVN，再从SVN到Git。<br>从中心化到去中心化的中心化（Decentralized but centralized），这句话挺有挺有深意。</p><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><h2 id="长期分支"><a href="#长期分支" class="headerlink" title="长期分支"></a>长期分支</h2><p>项目存在两个长期分支：</p><ul><li>主分支master。</li><li>开发分支develop或者dev。</li></ul><blockquote><p>We consider origin/master to be the main branch where the source code of HEAD always reflects a production-ready state.<br>We consider origin/develop to be the main branch where the source code of HEAD always reflects a state with the latest delivered development changes for the next release. Some would call this the “integration branch”. This is where any automatic nightly builds are built from.</p></blockquote><p>这里的HEAD是Git的一个指针，指向当前的分支上。<br>上面的话的意思大概是master分支总是指向“等待上生产”状态的代码。develop分支往往是最近交付的开发修改。这个过程是和原本的SVN工作流是很接近的，一个开发分支，一个线上分支。开发完，测试后，发布到线上。SVN流程推荐在测试时分叉一个branch出来进行测试，这个时候不影响trunk上业务的继续开发，这个工作流没有这么明说，但是因为Git的灵活性，建立一个临时的测试分支也是没有问题的。Git好就好在非常灵活，不过也正是因为如此，导致了一些问题，之前有一个小朋友，把所有的功能分支都保存了下来，还说这样会更加方便，我很难理解，这样怎么会方便呢？每个人分支都需要不断同步。灵活也应该是相对的，在一个相对固定的流程下，适当的灵活，是可以提高效率的。</p><p><img src="https://nvie.com/img/main-branches@2x.png" width="50%" height="50%"></p><h2 id="支持分支"><a href="#支持分支" class="headerlink" title="支持分支"></a>支持分支</h2><p>原文叫做supporting branches。这里面的每一个分支都有指定的目的和约束的规则，如何产生和如何合并。</p><ul><li>Feature branches</li><li>Release branches</li><li>Hotfix branches</li></ul><h3 id="功能分支"><a href="#功能分支" class="headerlink" title="功能分支"></a>功能分支</h3><p>可以产生于:<br>develop<br>必须合并到:<br>develop<br>分支命名约定:<br>除了master, develop, release-<em>, or hotfix-</em> 都可以，前面几个作为保留。</p><p>功能分支用于开发未来的一项功能，目标的发布此时可能还不确定。这个分支最终会被合并回develop（采用了）或者被抛弃掉（不采用）。<br>功能分支更多存在于用户仓库，而不是origin仓库。<br><img src="https://nvie.com/img/merge-without-ff@2x.png" width="50%" height="50%"></p><p><strong>创建：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b myfeature develop</span><br><span class="line">Switched to a new branch &quot;myfeature&quot;</span><br></pre></td></tr></table></figure></p><p><strong>合并回develop：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout develop</span><br><span class="line">Switched to branch &apos;develop&apos;</span><br><span class="line">$ git merge --no-ff myfeature</span><br><span class="line">Updating ea1b82a..05e9557</span><br><span class="line">(Summary of changes)</span><br><span class="line">$ git branch -d myfeature</span><br><span class="line">Deleted branch myfeature (was 05e9557).</span><br><span class="line">$ git push origin develop</span><br></pre></td></tr></table></figure><p>对于–no-ff，参考：<a href="https://git-scm.com/docs/git-merge，有待更进一步的解释。" target="_blank" rel="noopener">https://git-scm.com/docs/git-merge，有待更进一步的解释。</a></p><h3 id="发布分支"><a href="#发布分支" class="headerlink" title="发布分支"></a>发布分支</h3><p>可以产生于:<br>develop<br>必须合并到:<br>develop和master分支<br>分支命名约定:<br>release-*</p><p>我理解的，这里主要用于准备一个发布版的功能已经开发完成，等待一些信息最后的确认，为了不影响下一个开发版的正常进行，打出一个发布分支。</p><p><strong>创建一个发布分支</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b release-1.2 develop</span><br><span class="line">Switched to a new branch &quot;release-1.2&quot;</span><br><span class="line">$ ./bump-version.sh 1.2</span><br><span class="line">Files modified successfully, version bumped to 1.2.</span><br><span class="line">$ git commit -a -m &quot;Bumped version number to 1.2&quot;</span><br><span class="line">[release-1.2 74d9424] Bumped version number to 1.2</span><br><span class="line">1 files changed, 1 insertions(+), 1 deletions(-)</span><br></pre></td></tr></table></figure></p><p><strong>结束一个发布分支</strong><br>合并回master分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch &apos;master&apos;</span><br><span class="line">$ git merge --no-ff release-1.2</span><br><span class="line">Merge made by recursive.</span><br><span class="line">(Summary of changes)</span><br><span class="line">$ git tag -a 1.2</span><br></pre></td></tr></table></figure></p><p>合并回develop分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout develop</span><br><span class="line">Switched to branch &apos;develop&apos;</span><br><span class="line">$ git merge --no-ff release-1.2</span><br><span class="line">Merge made by recursive.</span><br><span class="line">(Summary of changes)</span><br></pre></td></tr></table></figure></p><p>删除原分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d release-1.2</span><br><span class="line">Deleted branch release-1.2 (was ff452fe).</span><br></pre></td></tr></table></figure></p><h3 id="热修复分支"><a href="#热修复分支" class="headerlink" title="热修复分支"></a>热修复分支</h3><p>可以产生于:<br>master<br>必须合并到:<br>develop和master分支<br>分支命名约定:<br>hotfix-*</p><p>主要用于对线上代码进行热修复用，线上代码出现了问题，开出一个分支进行修复，等修复完成，合并回master和develop分支。</p><p><strong>创建</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b hotfix-1.2.1 master</span><br><span class="line">Switched to a new branch &quot;hotfix-1.2.1&quot;</span><br><span class="line">$ ./bump-version.sh 1.2.1</span><br><span class="line">Files modified successfully, version bumped to 1.2.1.</span><br><span class="line">$ git commit -a -m &quot;Bumped version number to 1.2.1&quot;</span><br><span class="line">[hotfix-1.2.1 41e61bb] Bumped version number to 1.2.1</span><br><span class="line">1 files changed, 1 insertions(+), 1 deletions(-)</span><br></pre></td></tr></table></figure><p><strong>提交</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &quot;Fixed severe production problem&quot;</span><br><span class="line">[hotfix-1.2.1 abbe5d6] Fixed severe production problem</span><br><span class="line">5 files changed, 32 insertions(+), 17 deletions(-)</span><br></pre></td></tr></table></figure><p><strong>结束</strong><br>合并回master<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch &apos;master&apos;</span><br><span class="line">$ git merge --no-ff hotfix-1.2.1</span><br><span class="line">Merge made by recursive.</span><br><span class="line">(Summary of changes)</span><br><span class="line">$ git tag -a 1.2.1</span><br></pre></td></tr></table></figure></p><p>合并回develop<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout develop</span><br><span class="line">Switched to branch &apos;develop&apos;</span><br><span class="line">$ git merge --no-ff hotfix-1.2.1</span><br><span class="line">Merge made by recursive.</span><br><span class="line">(Summary of changes)</span><br></pre></td></tr></table></figure></p><p>删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d hotfix-1.2.1</span><br><span class="line">Deleted branch hotfix-1.2.1 (was abbe5d6).</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git的工作流程Git Flow介绍。&lt;br&gt;
    
    </summary>
    
      <category term="Git" scheme="https://www.oxysun.cn/categories/Git/"/>
    
    
      <category term="Git" scheme="https://www.oxysun.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Linux下shell命令用法及常见用例：netstat</title>
    <link href="https://www.oxysun.cn/linux/shell-command-netstat.html"/>
    <id>https://www.oxysun.cn/linux/shell-command-netstat.html</id>
    <published>2018-07-05T07:14:47.000Z</published>
    <updated>2018-07-18T11:09:55.843Z</updated>
    
    <content type="html"><![CDATA[<p>netstat命令用来查看系统中所有的网络套接字连接情况。</p><a id="more"></a><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p>netstat [选项]</p><p>参考：<a href="https://linux.die.net/man/8/netstat。" target="_blank" rel="noopener">https://linux.die.net/man/8/netstat。</a></p><p><code>netstat</code>命令用来查看系统中所有的网络套接字连接情况。</p><!-- more --><h2 id="命令格式-1"><a href="#命令格式-1" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>netstat</code> [选项]</p><p>参考：<a href="https://linux.die.net/man/8/netstat。" target="_blank" rel="noopener">https://linux.die.net/man/8/netstat。</a></p><p><code>netstat</code>命令用来查看系统中所有的网络套接字连接情况。</p><!-- more --><h2 id="命令格式-2"><a href="#命令格式-2" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>netstat</code> [选项]</p><h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p><code>netstat</code>命令用来查看系统中所有的网络套接字连接情况，包括TCP、UDP和Unix套接字。也可以显示路由表，接口状态，masquerade 连接，多播成员（Multicast Memberships）等等。另外，它还可以列出处于监听状态（等待接入请求）的套接字，比如想确认系统中的web服务是否起来，就可以查看80端口有没有打开。</p><h2 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h2><ul><li>-a或–all：显示所有选项，默认不显示LISTEN相关。</li><li>-t或–tcp：(TCP)仅显示TCP相关选项。</li><li>-u或–udp：(UDP)仅显示UDP相关选项。</li><li>-x或–unix：此参数的效果和指定”-A unix”参数相同。</li><li>-n或–numeric：拒绝显示别名，能显示数字的全部转化成数字。</li><li>-l或–listening：仅列出有在Listen(监听)的服务状态。</li><li>-g或–groups：显示多重广播功能群组组员名单。</li><li>-p或–programs：显示建立相关链接的程序名和PID。</li><li>-r或–route：显示路由信息，路由表。</li><li>-e或–extend：显示扩展信息，例如UID等。</li><li>-s或–statistics：按各个协议进行统计。</li><li>-c或–continuous：每隔一个固定时间，执行该netstat命令。</li><li>-g或–groups：显示多重广播功能群组组员名单。</li></ul><p>提示：LISTEN和LISTENING的状态只有用-a或者-l才能看到。</p><h2 id="输出信息含义"><a href="#输出信息含义" class="headerlink" title="输出信息含义"></a>输出信息含义</h2><p><code>netstat</code>的输出结构可以分为两个部分：<br>一个是Active Internet connections，称为有源TCP连接。其中”Recv-Q”和”Send-Q”指的是接收队列和发送队列。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Active Internet connections (w/o servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State      </span><br><span class="line">tcp        0      0 VM01.root:ssh           61.149.11.230:21859     ESTABLISHED</span><br><span class="line">tcp        0      0 localhost:51476         localhost:27017         ESTABLISHED</span><br><span class="line">tcp        0      0 VM01.root:ssh           61.149.11.230:50883     ESTABLISHED</span><br><span class="line">tcp        0      0 VM01.root:58300         47.89.193.173:3666      ESTABLISHED</span><br></pre></td></tr></table></figure></p><p>另一个是Active UNIX domain sockets，称为有源Unix域套接口(和网络套接字一样，但是只能用于本机通信，性能可以提高一倍)。Proto显示连接使用的协议，RefCnt表示连接到本套接口上的进程号，Types显示套接口的类型，State显示套接口当前的状态，Path表示连接到套接口的其它进程使用的路径名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Active UNIX domain sockets (w/o servers)</span><br><span class="line">Proto RefCnt Flags       Type       State         I-Node   Path</span><br><span class="line">unix  2      [ ]         DGRAM                    15049    /run/user/0/systemd/notify</span><br><span class="line">unix  3      [ ]         DGRAM                    13640    /run/systemd/notify</span><br><span class="line">unix  2      [ ]         DGRAM                    13645    /run/systemd/journal/syslog</span><br><span class="line">unix  8      [ ]         DGRAM                    13660    /run/systemd/journal/socket</span><br><span class="line">unix  25     [ ]         DGRAM                    10467    /run/systemd/journal/dev-log</span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><strong>实例：</strong>列出当前所有的连接（-a）<br>命令：<code>netstat -a</code><br>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@iZhp3fz3iqsadyes2s8ayeZ:~# netstat -a</span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State      </span><br><span class="line">tcp        0      0 *:8838                  *:*                     LISTEN     </span><br><span class="line">tcp        0      0 localhost:27017         *:*                     LISTEN     </span><br><span class="line">tcp        0      0 *:8330                  *:*                     LISTEN     </span><br><span class="line">tcp        0      0 localhost:submission    *:*                     LISTEN </span><br><span class="line">......</span><br></pre></td></tr></table></figure><p><strong>实例：</strong>列出所有TCP端口（-t）<br>命令：<code>netstat -at</code><br>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@iZhp3fz3iqsadyes2s8ayeZ:~# netstat -at</span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State      </span><br><span class="line">tcp        0      0 *:8838                  *:*                     LISTEN     </span><br><span class="line">tcp        0      0 localhost:27017         *:*                     LISTEN     </span><br><span class="line">tcp        0      0 *:8330                  *:*                     LISTEN     </span><br><span class="line">tcp        0      0 localhost:submission    *:*                     LISTEN</span><br></pre></td></tr></table></figure><p><strong>示例：</strong>列出所有监听TCP的端口，数字显示<br>描述：查看本机监听的（-l）TCP连接（-t）的IP地址的数字显示（-n）。不适用-n的话，就会用端口的约定名称来显示，例如80端口，会显示成http。<br>命令：<code>netstat -tnl</code><br>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@iZhp3fz3iqsadyes2s8ayeZ:~# netstat -tnl</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State      </span><br><span class="line">tcp        0      0 0.0.0.0:8838            0.0.0.0:*               LISTEN     </span><br><span class="line">tcp        0      0 127.0.0.1:27017         0.0.0.0:*               LISTEN     </span><br><span class="line">tcp        0      0 0.0.0.0:8330            0.0.0.0:*               LISTEN</span><br></pre></td></tr></table></figure><p><strong>示例：</strong>获取本机的所有的TCP连接的进程名、进程号以及用户ID<br>描述：使用-p选项查看进程信息，-ep选项可以同时查看进程名和用户名。另外，-n和-e选项一起使用，User列的属性就是用户ID，而不是用户名。<br>查看本机所有的（al）TCP连接的（t）进程名（p）和用户名ID（ne）。<br>命令：<code>netstat -altpen</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@iZhp3fz3iqsadyes2s8ayeZ:~# netstat -altpen</span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       User       Inode       PID/Program name</span><br><span class="line">tcp        0      0 0.0.0.0:8838            0.0.0.0:*               LISTEN      0          11863750    31212/bnewd     </span><br><span class="line">tcp        0      0 127.0.0.1:27017         0.0.0.0:*               LISTEN      110        2945745     18546/mongod    </span><br><span class="line">tcp        0      0 0.0.0.0:8330            0.0.0.0:*               LISTEN      0          22250263    13550/btnd      </span><br><span class="line">tcp        0      0 127.0.0.1:587           0.0.0.0:*               LISTEN      0          12285119    11792/sendmail: MTA</span><br></pre></td></tr></table></figure><p>这个可能是最屌的命令了，也可能是最常用的命令了。</p><p>还有一些实例，暂时不常用，有待完善。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;netstat命令用来查看系统中所有的网络套接字连接情况。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://www.oxysun.cn/categories/Linux/"/>
    
      <category term="Shell" scheme="https://www.oxysun.cn/categories/Linux/Shell/"/>
    
    
      <category term="Linux" scheme="https://www.oxysun.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB：聚合之累加操作符</title>
    <link href="https://www.oxysun.cn/mongodb/mongodb-collection-aggregator-accumulate-operator.html"/>
    <id>https://www.oxysun.cn/mongodb/mongodb-collection-aggregator-accumulate-operator.html</id>
    <published>2018-07-04T15:29:00.000Z</published>
    <updated>2018-07-18T11:09:55.847Z</updated>
    
    <content type="html"><![CDATA[<p>MongoDB的聚合之累加操作符。<br><a id="more"></a></p><p>官网：<a href="https://docs.mongodb.com/manual/reference/operator/aggregation/group/#considerations。" target="_blank" rel="noopener">https://docs.mongodb.com/manual/reference/operator/aggregation/group/#considerations。</a></p><h1 id="累加操作符"><a href="#累加操作符" class="headerlink" title="累加操作符"></a>累加操作符</h1><p>感觉这个没有太多可说的，简单翻译一下。</p><table><thead><tr><th>名字</th><th>描述</th></tr></thead><tbody><tr><td>$avg</td><td>Returns an average of numerical values. Ignores non-numeric values.（返回平均值）</td></tr><tr><td>$first</td><td>Returns a value from the first document for each group. Order is only defined if the documents are in a defined order.（返回第一个）</td></tr><tr><td>$last</td><td>Returns a value from the last document for each group. Order is only defined if the documents are in a defined order.（返回最后一个）</td></tr><tr><td>$max</td><td>Returns the highest expression value for each group.（返回最大值）</td></tr><tr><td>$min</td><td>Returns the lowest expression value for each group.（返回最小值）</td></tr><tr><td>$push</td><td>Returns an array of expression values for each group.</td></tr><tr><td>$addToSet</td><td>Returns an array of unique expression values for each group. Order of the array elements is undefined.（）</td></tr><tr><td>$stdDevPop</td><td>Returns the population standard deviation of the input values.</td></tr><tr><td>$stdDevSamp</td><td>Returns the sample standard deviation of the input values.</td></tr><tr><td>$sum</td><td>Returns a sum of numerical values. Ignores non-numeric values.（返回总和）</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB的聚合之累加操作符。&lt;br&gt;
    
    </summary>
    
      <category term="MongoDB" scheme="https://www.oxysun.cn/categories/MongoDB/"/>
    
    
  </entry>
  
  <entry>
    <title>MongoDB：聚合之介绍</title>
    <link href="https://www.oxysun.cn/mongodb/mongodb-collection-aggregation-introduction.html"/>
    <id>https://www.oxysun.cn/mongodb/mongodb-collection-aggregation-introduction.html</id>
    <published>2018-07-04T15:24:00.000Z</published>
    <updated>2018-07-18T11:09:55.847Z</updated>
    
    <content type="html"><![CDATA[<p>MongoDB的聚合功能介绍。<br><a id="more"></a></p><p>官网：<a href="https://docs.mongodb.com/manual/aggregation/#single-purpose-agg-operations。" target="_blank" rel="noopener">https://docs.mongodb.com/manual/aggregation/#single-purpose-agg-operations。</a></p><p>初衷：MongoDB的使用还是有一定难度的，官网讲解的一环牵扯一环，不容易一下子把握住重点，也不利于快速查询操作，所以整理一下。</p><p>聚合函数是对记录集（data records）进行操作，是把多条记录集合（group）在一起，进行处理，与此相对应的是sql的group by等操作，这是数据处理的一个方面。</p><p>MongoDB提供三种聚合方法：</p><ol><li>聚合管道。</li><li>map-reduce函数。</li><li>单一功能的聚合方法。</li></ol><h1 id="聚合管道"><a href="#聚合管道" class="headerlink" title="聚合管道"></a>聚合管道</h1><p>接触过<code>linux shell</code>的人应该对管道不会陌生，管道就是对输入的数据进行一系列的处理、转换，变成新的数据。</p><p>这里的聚合管道是对记录集进行多阶段的转换，产出新聚合结果，例如：<br><img src="https://docs.mongodb.com/manual/_images/aggregation-pipeline.bakedsvg.svg" alt="这里写图片描述"></p><p>解释一下：</p><ol><li>数据集合：<code>orders</code>，共有4条记录，这里省略了<code>_id</code> 这个域。</li><li>需求：查找所有<code>status=&quot;A&quot;</code> 的记录，根据cust_id进行分组，计算每个组的<code>amount</code>的和。</li><li>分析：<br><code>{$match: {status: &quot;A&quot;}}</code>，第一个阶段，匹配阶段，查找所有<code>status=&quot;A&quot;</code> 的记录。<br><code>{$group: {_id: &quot;$cust_id&quot;, total: {$sum: &quot;$amount&quot;}}}</code>，第二个阶段，分组计算，根据<code>cust_id</code>进行分组，对每个组的<code>amount</code>进行求和。这里涉及<code>$group</code> 的语法，如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; $group: &#123; _id: &lt;expression&gt;, &lt;field1&gt;: &#123; &lt;accumulator1&gt; : &lt;expression1&gt; &#125;, ... &#125; &#125;</span><br></pre></td></tr></table></figure><p>其中，_id是强制的，后面是可选的。<br><code>&lt;accumulator1&gt;</code>是累加操作符，参考<a href="/mongodb/mongodb-collection-aggregator-accumulate-operator.html">这里</a>，例如这里的<code>$sum</code>，注意，这里必须要加<code>$</code>。<br><code>&lt;expression1&gt;</code>是表达式，<a href="https://docs.mongodb.com/manual/meta/aggregation-quick-reference/#aggregation-expressions" target="_blank" rel="noopener">有待补充</a>， <code>&quot;$amount&quot;</code> , 表示是去取上一个结果中的<code>amount</code> 这个域，对其进行累加，并把结果存入新的域<code>total</code>中。</p><p>这个例子看明白了，聚合就基本明白了。</p><h1 id="Map-Reduce"><a href="#Map-Reduce" class="headerlink" title="Map-Reduce"></a>Map-Reduce</h1><p>map-reduce操作分为两个阶段：map阶段，处理每一条记录，产出一个或多个对象；reduce阶段，合并map阶段的输出。作为可选，map-reduce可以有一个最终阶段来对结果进行最终的操作。map-reduce也可以进行查询、排序和限制输出结果。<br><img src="https://docs.mongodb.com/manual/_images/map-reduce.bakedsvg.svg" alt="这里写图片描述"></p><h1 id="单一功能的聚合方法"><a href="#单一功能的聚合方法" class="headerlink" title="单一功能的聚合方法"></a>单一功能的聚合方法</h1><p>MongoDB也提供<code>db.collection.count()</code>（求和）和<code>db.collection.distinct()</code>（去重）函数。<br><img src="https://docs.mongodb.com/manual/_images/distinct.bakedsvg.svg" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB的聚合功能介绍。&lt;br&gt;
    
    </summary>
    
      <category term="MongoDB" scheme="https://www.oxysun.cn/categories/MongoDB/"/>
    
    
  </entry>
  
  <entry>
    <title>MongoDB集合的基本操作：查找记录（查）</title>
    <link href="https://www.oxysun.cn/mongodb/mongodb-collection-find-1.html"/>
    <id>https://www.oxysun.cn/mongodb/mongodb-collection-find-1.html</id>
    <published>2018-07-02T13:03:00.000Z</published>
    <updated>2018-07-23T14:18:52.063Z</updated>
    
    <content type="html"><![CDATA[<p>MongoDB集合的基本操作：查找记录（查）。<br><a id="more"></a></p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection.find(query, projection)</span><br></pre></td></tr></table></figure><p>在集合或者视图的文档中进行选择，并且返回一个指向被选中的文档的游标。（原文是：Selects documents in a collection or view and returns a cursor to the selected documents.）<br>参数|类型|描述<br>-|-|-<br>query|文档型|可选。使用查询操作符(<a href="https://www.oxysun.cn/mongodb/mongodb-collection-find-projection-operator.html">参考这里</a>)，指定了查询过滤器。 想要返回集合中所有的文档，忽略这个参数，或者传一个空的文档({})。<br>projection|文档型|可选。制定了匹配查询过滤器，要返回的文档的域。想要返回匹配的文档中的所有域，忽略这个参数。 </p><p>projection参数决定了哪些域需要被返回。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; field1: &lt;value&gt;, field2: &lt;value&gt; ... &#125;</span><br></pre></td></tr></table></figure><p><code>&lt;value&gt;</code>可以是:</p><ul><li>1 或 true 表示要在返回文档中包含这个域。</li><li>0 或 false 表示不包含这个域。</li><li>表达式使用了投影操作符（有待解释）。</li></ul><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>基本的查找参考上面的语法即可，下面也有实例，其实较为难以掌握的是组合查找，例如逻辑关系是<code>AND</code>的，或者是<code>OR</code>的，还有<code>IN</code>的，这几个需要梳理一下。</p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p><strong>实例</strong> 查找<a href="https://blog.csdn.net/chaiyu2002/article/details/80862002" target="_blank" rel="noopener">上文</a>test集合中的所有文档。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.test.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line">    &quot;_id&quot; : ObjectId(&quot;5abb3b5bce69c048be080199&quot;),</span><br><span class="line">    &quot;meta&quot; : &#123;</span><br><span class="line">        &quot;createAt&quot; : ISODate(&quot;2018-03-28T06:51:07.579Z&quot;),</span><br><span class="line">        &quot;updateAt&quot; : ISODate(&quot;2018-03-28T06:51:07.579Z&quot;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;a&quot; : &quot;1&quot;,</span><br><span class="line">    &quot;b&quot; : &quot;1&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;_id&quot; : ObjectId(&quot;5abb3b5bce69c048be080120&quot;),</span><br><span class="line">    &quot;meta&quot; : &#123;</span><br><span class="line">        &quot;createAt&quot; : ISODate(&quot;2018-03-28T06:51:07.579Z&quot;),</span><br><span class="line">        &quot;updateAt&quot; : ISODate(&quot;2018-03-28T06:51:07.579Z&quot;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;a&quot; : &quot;1&quot;,</span><br><span class="line">    &quot;b&quot; : &quot;3&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>pretty()</code>是用来让展示更加舒适。</p><p><strong>实例</strong> 查找test集合中的<code>b=&quot;3&quot;</code>的记录，这里要注意<code>“3”</code>和<code>3</code>是不一样的，这里是要符合js的语法，字符串和数字表示方式是不同的。做一个好的程序员，一定要严谨，而做到了严谨，可以帮你更快地提高，更快地产出，更好地规避错误，其实加快了你的职场发展节奏。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.test.find(&#123;b: &quot;3&quot;&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">&quot;_id&quot; : ObjectId(&quot;5abb3b5bce69c048be080120&quot;),</span><br><span class="line">&quot;meta&quot; : &#123;</span><br><span class="line">&quot;createAt&quot; : ISODate(&quot;2018-03-28T06:51:07.579Z&quot;),</span><br><span class="line">&quot;updateAt&quot; : ISODate(&quot;2018-03-28T06:51:07.579Z&quot;)</span><br><span class="line">&#125;,</span><br><span class="line">&quot;a&quot; : &quot;1&quot;,</span><br><span class="line">&quot;b&quot; : &quot;3&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到，这次只查出了一条符合条件的记录。</p><p><strong>实例</strong> 查找test集合中的<code>b=&quot;3&quot;</code>的记录a和b两个域，不要其它域。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.test.find(&#123;b: &quot;3&quot;&#125;, &#123;a: 1, b: 1&#125;).pretty()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5abb3b5bce69c048be080120&quot;), &quot;a&quot; : &quot;1&quot;, &quot;b&quot; : &quot;3&quot; &#125;</span><br></pre></td></tr></table></figure><p>可以看到，没有涉及的域就没有再获取出来，这样在一些情况下是可以节省网络开销和分析成本的，在《高性能MySQL》也是讲过类似的原理，不要大而全地去把所有内容获取回来，对于资源的使用，应该是有规划的、经济地去使用。</p><p><strong>实例</strong> 查找test集合中的<code>b=&quot;3&quot;</code> 并且<code>a=&quot;4&quot;</code>的记录。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.test.find(&#123;b: &quot;3&quot;, a: &quot;4&quot;&#125;&#125;).pretty()</span><br></pre></td></tr></table></figure></p><p>可以看到，在第一个<code>{}</code> 中逗号分隔开的是<code>AND</code>的查询关系。</p><p><strong>实例</strong> 查找test集合中的<code>b=&quot;3&quot;</code> 或者<code>b=&quot;4&quot;</code>的记录。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.test.find(&#123;b: &#123;$in: [&quot;3&quot;, &quot;4&quot;]&#125;&#125;).pretty()</span><br></pre></td></tr></table></figure></p><p>这个语法的原则是操作符<code>$in</code>在前，作为JSON名值对的名，<code>[&quot;3&quot;, &quot;4&quot;]</code>是它的值，然后整个<code>{$in: [&quot;3&quot;, &quot;4&quot;]}</code>作为b的值，从JSON语法的角度去思考和记忆这个语法，就容易一些了。</p><p><strong>实例</strong> 修改一下上面的例子，查找test集合中的<code>b=&quot;3&quot;</code> 或者<code>a=&quot;4&quot;</code>的记录。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.test.find(&#123;$or: [&#123;b: &quot;3&quot;&#125;, &#123;a: &quot;4&quot;&#125;]&#125;).pretty()</span><br></pre></td></tr></table></figure></p><p>这个语法和<code>IN</code> 的道理是一样的，其实<code>AND</code>也可以这么用，上面那种是隐式的用法，显式的用法是这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.test.find(&#123;$and: [&#123;b: &quot;3&quot;&#125;, &#123;a: &quot;4&quot;&#125;]&#125;).pretty()</span><br></pre></td></tr></table></figure></p><p>查询操作符还有一些大于、小于等操作，具体参考查询操作符一节。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://docs.mongodb.com/manual/reference/method/db.collection.find/。" target="_blank" rel="noopener">https://docs.mongodb.com/manual/reference/method/db.collection.find/。</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB集合的基本操作：查找记录（查）。&lt;br&gt;
    
    </summary>
    
      <category term="MongoDB" scheme="https://www.oxysun.cn/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="https://www.oxysun.cn/tags/MongoDB/"/>
    
  </entry>
  
</feed>
