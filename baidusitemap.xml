<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">


    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-sed.html</loc>
    <lastmod>2018-07-01T05:13:36.245Z</lastmod>
    <data>
        <display>
        <title>Linux下shell命令用法及常见用例：sed</title>
        <pubTime>2018-06-09T08:17:44.000Z</pubTime>   
         <content><p><code>sed</code>是stream editor（流式编辑器）的缩写，是一个非交互式的流编辑器，用于过滤或者转换文本。<br><a id="more"></a></p>
<p>#概要<br>sed 选项…  [脚本]  [输入文件…]</p>
<p>#描述<br><code>sed</code>编辑器被称作流编辑器(stream editor)，和普通的交互式文本编辑器恰好相反。在交互式文本编辑器中(比如vim)，你可以用键盘命令来交互式地插入、删除或替换数据中的文本。流编辑器则会在编辑器处理数据之前基于预先提供的一组规则来编辑数据流。<br><code>sed</code>编辑器可以根据命令来处理数据流中的数据，这些命令要么从命令行中输入，要么存储在一个命令文本文件中。sed编辑器会执行下列操作。<br>(1) 一次从输入中读取一行数据。<br>(2) 根据所提供的编辑器命令匹配数据。<br>(3) 按照命令修改流中的数据。<br>(4) 将新的数据输出到STDOUT。 在流编辑器将所有命令与一行数据匹配完毕后，它会读取下一行数据并重复这个过程。在流编辑器处理完流中的所有数据行后，它就会终止。 由于命令是按顺序逐行给出的，sed编辑器只需对数据流进行一遍处理就可以完成编辑操作。<br>这使得sed编辑器要比交互式编辑器快得多，你可以快速完成对数据的自动修改。</p>
<p>#理解<br>这个命令使用起来有些复杂，复杂在于功能强大，需要逐步消化。</p>
<p>#常见用例<br><strong>实例</strong> 替换input.txt文件中所有的“hello”为“world”，并且输出到output.txt中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed &apos;s/hello/world/&apos; input.txt &gt; output.txt</span><br></pre></td></tr></table></figure>
<p>这可能是最常用的例子了（至少在我工作这么多年的经验中），这里使用了<code>sed</code>的命令<code>s</code>。如果想输出到原文件的话，使用<code>-i</code>参数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &apos;s/hello/world/&apos; input.txt</span><br></pre></td></tr></table></figure>
<p>这个在mac下表现会不一样，参考：<a href="https://blog.csdn.net/cuiaamay/article/details/49495885。" target="_blank" rel="noopener">https://blog.csdn.net/cuiaamay/article/details/49495885。</a></p>
<p>参考：<a href="https://www.gnu.org/software/sed/manual/sed.html。" target="_blank" rel="noopener">https://www.gnu.org/software/sed/manual/sed.html。</a></p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-awk.html</loc>
    <lastmod>2018-07-01T02:24:34.754Z</lastmod>
    <data>
        <display>
        <title>Linux下shell命令用法及常见用例： awk</title>
        <pubTime>2018-06-09T08:17:44.000Z</pubTime>   
         <content><p>awk命令在文件或字符串中基于指定规则浏览和抽取信息。<br><a id="more"></a></p>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>awk是一种小巧的编程语言及命令行工具。（其名称得自于它的创始人Alfred Aho、Peter Weinberger 和 Brian Kernighan姓氏的首个字母）。它非常适合服务器上的日志处理，主要是因为awk可以对文件进行操作，通常以可读文本构建行。<br>awk命令在文件或字符串中基于指定规则浏览和抽取信息。awk抽取信息后，才能进行其他文本操作，awk脚本通常用来格式化文本文件中的信息。</p>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p>有三种方式调用awk，第一种是命令行方式，例如：<br><code>awk [-F field-separator] &#39;commands&#39; input-file(s)</code><br>awk默认使用空格作为缺省的域分隔符。如果要浏览诸如passwd文件，此文件是以冒号作为分隔符，则必须指明-F选项。例如：<br><code>awk -F : &#39;commands&#39; input-file</code><br>第二种方式是将所有awk命令插入一个文件，并使awk程序可执行，然后用awk命令解释器作为脚本的首行，以便通过键入脚本名称来调用它。<br>第三种方式是将所有的awk命令插入一个单独文件，然后调用：<br><code>awl -f awk-script-file input-file(s)</code><br>-f选项指明在文件awk-script-file中的awk脚本，input_file(s)是使用awk进行浏览的文件名。</p>
<h2 id="awk脚本"><a href="#awk脚本" class="headerlink" title="awk脚本"></a>awk脚本</h2><h3 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h3><p>awk脚本的代码结构很简单，就是一系列的模式（pattern）和动作（action）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># comment</span><br><span class="line">Pattern1 &#123; ACTIONS; &#125;</span><br><span class="line"># comment</span><br><span class="line">Pattern2 &#123; ACTIONS; &#125;</span><br><span class="line"># comment</span><br><span class="line">Pattern3 &#123; ACTIONS; &#125;</span><br><span class="line"># comment</span><br><span class="line">Pattern4 &#123; ACTIONS; &#125;</span><br></pre></td></tr></table></figure>
<p>扫描文档的每一行时都必须与每一个模式进行匹配比较，一次只匹配一个模式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this is line 1</span><br><span class="line">this is line 2</span><br></pre></td></tr></table></figure>
<p>this is line 1这行会先Pattern1进行匹配，如果匹配成功，就会执行ACTIONS。然后this is line 1会和Pattern2进行匹配，如果匹配失败，就调到Pattern3进行匹配，以此类推。<br>一旦所有的模式都匹配过了，this is line 2就会以同样的步骤进行匹配。其他的行也一样，直到读取完整个文件。这就是awk的运行模式。</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>awk仅有两个主要的数据类型：字符串和数字，它们可以相互转换。<br>在ACTIONS部分使用=操作符给变量赋值，可以在任意时刻、任意地方声明和使用变量，也可以使用未初始化的变量，默认是空字符串。<br>awk有数组类型，并且它们是动态的一维关联数组。</p>
<h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><p>模式分为三大类：正则表达式、布尔表达式和特殊模式。</p>
<p>所有模式都是可选的，下面的脚本形式会对输入的每一行都会简单地执行ACRIONS。<br><code>{ ACTIONS }</code></p>
<h3 id="特殊的模式"><a href="#特殊的模式" class="headerlink" title="特殊的模式"></a>特殊的模式</h3><p>模式包括两个特殊字段：BEGIN和END。BEGIN在所有输入未被处理之前，即文本浏览动作之前进行匹配。可以初始化脚本变量和所有种类的状态的主要地方。END会在所有的输入都被处理完后，即完成文本浏览动作后进行匹配。可以在退出前进行清除工作和一些最后的输出。<br>最后一类模式，要把它进行归类有点困难。它处于变量和特殊值之间，我们通常称它们为域（Field）。而且名副其实。</p>
<h3 id="域"><a href="#域" class="headerlink" title="域"></a>域</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># According to the following line</span><br><span class="line">#</span><br><span class="line"># $1 $2 $3</span><br><span class="line"># 00:34:23 GET /foo/bar.html</span><br><span class="line"># _____________ _____________/</span><br><span class="line"># $0</span><br><span class="line"> </span><br><span class="line"># Hack attempt?</span><br><span class="line">/admin.html$/ &amp;&amp; $2 == &quot;DELETE&quot; &#123;</span><br><span class="line">print &quot;Hacker Alert!&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>域（默认地）由空格分隔。$0域代表了一整行的字符串。$1 域是第一块字符串（在任何空格之前），$2\$域是后一块，以此类推。<br>awk执行时，其浏览域标记为$1, $2, $3…$n。这种方式称为域标识。使用$1, $3标识表示第1和第3域。使用$0$标识表示所有域。<br>awk浏览到一新行时，即到达域的记录末尾，执行新记录下一行的读动作，重新设置域分隔。</p>
<h3 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h3><p>最常用和最有用的行为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123; print $0; &#125; # prints $0. In this case, equivalent to &apos;print&apos; alone</span><br><span class="line">&#123; exit; &#125; # ends the program</span><br><span class="line">&#123; next; &#125; # skips to the next line of input</span><br><span class="line">&#123; a=$1; b=$0 &#125; # variable assignment</span><br><span class="line">&#123; c[$1] = $2 &#125; # variable assignment (array)</span><br><span class="line"> </span><br><span class="line">&#123; if (BOOLEAN) &#123; ACTION &#125;</span><br><span class="line">else if (BOOLEAN) &#123; ACTION &#125;</span><br><span class="line">else &#123; ACTION &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123; for (i=1; i&lt;x; i++) &#123; ACTION &#125; &#125;</span><br><span class="line">&#123; for (item in c) &#123; ACTION &#125; &#125;</span><br></pre></td></tr></table></figure>
<p>awk里的变量都是全局变量。</p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数的<a href="https://www.gnu.org/software/gawk/manual/html_node/Built_002din.html#Built_002din" target="_blank" rel="noopener">通用文档(regular documentation)</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; somecall($2) &#125;</span><br></pre></td></tr></table></figure>
<p>用户定义的函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># function arguments are call-by-value</span><br><span class="line">function name (parameter-list) &#123;</span><br><span class="line">	ACTIONS; #same actions as usual</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># return is valid keyword</span><br><span class="line">function add (val) &#123;</span><br><span class="line">return val+1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2><p><strong>实例：0. 新建测试文件</strong><br>描述：新建一个device文件，其中(1)为序号，(2)为Android版本，(3)为访问时间，(4)为IP，(5)为访问次数。本文大部分实例根据这一文件进行说明。<br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-origin.png" alt=""></p>
<p><strong>实例：1. 抽取域</strong><br>描述：打印第1个（序号）域和第2个（Android版本）域的内容。print用来输出其后跟着的内容，用大括号把print语句括起来，表示一个打印动作。<br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-partion-domain.png" alt=""></p>
<p><strong>实例：2. 打印所有记录</strong><br>描述：打印所有记录。$0代表所有域。<br>命令：<code>awk &#39;{print $0}&#39; device</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-$0.png" alt=""></p>
<p><strong>实例：3. 打印报告头</strong><br>描述：在序号和IP地址之间用一些空格使之更容易划分，也可以在域间使用tab键加以划分。本例中加入NO和IP两个信息头以及中划线，\n启动新行，并在\n下一行启动打印文本操作。打印信息头放置在BEGIN模式部分，因为打印信息头被界定为一个动作，必须用大括号括起来。在awk查看第一条记录前，信息头被打印。<br>命令：<code>awk &#39;BEGIN {print &quot;NO        IP\n------------------------&quot;} {print $1&quot;\t&quot;$4}&#39; device</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-Begin.png" alt=""></p>
<p><strong>实例：4. 打印信息尾</strong><br>描述：在末行加入end of report信息。END语句在所有文本处理动作执行完之后才被执行，在脚本中的位置是在主要动作之后。<br>命令：<code>awk &#39;BEGIN {print &quot;Version\n-------&quot;} {print $2} END {print &quot;end-of-report&quot;}&#39; device</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-End.png" alt=""></p>
<p><strong>实例：5. 错误信息提示</strong><br>描述：如果将在awk命令中缺少一个双引号，awk将返回错误提示信息。<br>命令：<code>awk &#39;BEGIN {print &quot;Version\n-------&quot;} {print $2} END {print &quot;end-of-report}&#39; device</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-error.png" alt=""></p>
<p>注意：在碰到awk错误时，应从以下几点进行排查：</p>
<ul>
<li>确保整个awk命令引用单引号括起来。</li>
<li>确保命令内所有引号成对出现。</li>
<li>确保用花括号括起动作语句，用圆括号括起条件语句。</li>
<li>可能忘记使用花括号。</li>
</ul>
<p>描述：如果查询的文件不存在，将得到以下错误信息：<br>命令：<code>awk &#39;END {print NR}&#39; device.txt</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-file-not-found.png" alt=""></p>
<h3 id="条件操作符"><a href="#条件操作符" class="headerlink" title="条件操作符"></a>条件操作符</h3><p><strong>实例：1. 匹配</strong><br>描述：如果field-4以数字4开头，打印它。如果条件满足，则打印匹配的记录行。符号~后紧跟正则表达式，使一域号匹配正则表达式，也可以使用if语句。awk的if后面的条件用()括起来。^尖角符号表示行首。<br>命令：<code>awk &#39;{ if ($4 ~ /^4/) print $0}&#39; device</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-if.png" alt=""></p>
<p>等同于：<br><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-same-if.png" alt=""></p>
<p><strong>实例：2. 精确匹配</strong><br>描述：精确匹配访问次数为1次的记录，确保不匹配访问次数为15次的记录。使用等号==，并用单引号括起条件，也可以使用if语句。<br>命令：<code>awk &#39;$5==&quot;1&quot; {print $0}&#39; device</code><br>或者：<code>awk &#39;{if($5==/1/) print $0}&#39; device</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-==.png" alt=""></p>
<p><strong>实例：3. 不匹配</strong><br>描述：不匹配IP地址以4开头的记录。使用!~表示不匹配。<br>命令：<code>awk &#39;$4 !~ /^4/&#39; device</code><br>或者：<code>awk &#39;{ if ($4 !~ /^4/) print $0}&#39; device</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-!~.png" alt=""></p>
<p>注意这里不能用!=，因为用引号或者/括起了^4，将只匹配4而不匹配49.65.119.165等。如果查询非49.65.119.165的记录，可做如下操作：<br><code>awk &#39;$4 != &quot;49.65.119.165&quot;&#39; device</code></p>
<p><strong>实例：4. 小于，小于等于，大于，大于等于</strong><br>描述：匹配访问次数小于序号的记录。同样的有小于等于（&lt;=），大于（&gt;），大于等于（&gt;=）。<br>命令：<code>awk &#39;$4 !~ /^4/&#39; device</code><br>或者：<code>awk &#39;{ if ($4 !~ /^4/) print $0}&#39; device</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-less-than.png" alt=""></p>
<p><strong>实例：5. 设置大小写</strong><br>描述：匹配含有前面是i或I，后面是OS的记录。[]符号可匹配[]内任意字符或单词。<br>命令：<code>awk &#39;/[iI]OS/&#39; device</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-i.png" alt=""></p>
<p><strong>实例：6. 任意字符</strong><br>描述：匹配Android版本，第八个字符是7，打印它。表达式/^…….7/表示行首前7个字符任务，第八个是7。<br>命令：<code>awk &#39;$2 ~ /^.......7/&#39; device</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-dot.png" alt=""></p>
<p><strong>实例：7. 或关系匹配</strong><br>描述：匹配IP地址以4或者3开头的记录。竖线符|意为两边模式之一。可以得到与[]表达式相同的结果。<br>命令：<code>awk &#39;$4 ~ /^(4|3)/&#39; device</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-or.png" alt=""></p>
<p>注意，在使用竖线符时，语句必须用圆括号括起来。另外，除了字符重复出现外，其他的正则表达式在awk中都是合法的。</p>
<p><strong>实例：8. AND</strong></p>
<p>描述：匹配Android版本在7.0以上，并且IP地址以4开头的记录。OR，非与之类似。<br>命令：<code>awk &#39;$2 ~ /^.......7/ &amp;&amp; $4 ~ /^4/&#39; device</code><br>等同于：<code>awk &#39;{ if ($2 ~ /^.......7/ &amp;&amp; $4 ~ /^4/) print $0} &#39; device</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-&amp;&amp;.png" alt=""></p>
<h3 id="awk内置变量"><a href="#awk内置变量" class="headerlink" title="awk内置变量"></a>awk内置变量</h3><p>awk内置变量如下：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-builtin-variable-table-1.png" alt=""></p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-builtin-variable-table-2.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">BEGIN &#123; # Can be modified by the user</span><br><span class="line">FS = &quot;,&quot;; # Field Separator</span><br><span class="line">RS = &quot;n&quot;; # Record Separator (lines)</span><br><span class="line">OFS = &quot; &quot;; # Output Filed Separator</span><br><span class="line">ORS = &quot;n&quot;; # Output Record Separator (lines)</span><br><span class="line">&#125;</span><br><span class="line">&#123; # Can&apos;t be modified by the user</span><br><span class="line">NF # Number of Fileds in the current Record (lines)</span><br><span class="line">NR # Number of Records seen so far</span><br><span class="line">ARGV / ARGC # Script Arguments</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>NF：支持记录域个数，在记录被读之后再设置。<br>NR：已读的记录数。<br>FILENAME：告知系统目前正在浏览的实际文件，因为awk可以同时处理许多文件。</p>
<p><strong>实例：1. NF、NR、FILENAME</strong></p>
<p>描述：所有记录被打印，并带有记录号（第二和第三列），并在最后输出文件名。使用NF变量显示每一条读记录中有多少个域（5个），使用NR显示已读的记录数，使用FILENAME显示正在处理的文件名。<br>命令：<code>awk &#39;{print NF,NR,$0} END {print FILENAME}&#39; device</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-builtin-variable.png" alt=""></p>
<p><strong>实例：2. 判断文件至少有一个记录</strong></p>
<p>描述：先检查文件中至少有一个记录时才查询IP地址。<br>命令：<code>awk &#39;NR &gt; 0 &amp;&amp; $4 ~ /^4/&#39; device</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-NR.png" alt=""></p>
<p><strong>实例：3. 与echo结合使用</strong></p>
<p>描述：将变量$PWD的返回值传入awk并显示其目录。需要指定域分隔符/。<br>命令：<code>echo $PWD | awk -F / &#39;{print $NF}&#39;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-echo.png" alt=""></p>
<p>描述：显示文件名。<br>命令：<code>echo &quot;/etc/vimrc&quot; | awk -F / &#39;{print $NF}&#39;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-show-filename.png" alt=""></p>
<h3 id="awk操作符"><a href="#awk操作符" class="headerlink" title="awk操作符"></a>awk操作符</h3><p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-operator.png" alt=""></p>
<p><strong>实例：1. 设置输入域到域变量名</strong><br>描述：赋值IP地址域为ip，版本域为version，查询版本大于7的记录，并打印IP地址和版本信息。<br>命令：<code>awk &#39;{ip=$4;version=$2; if (version ~ /*7*/) print ip&quot;&quot;version}&#39; device</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-set-variable.png" alt=""></p>
<p><strong>实例：2. 域值比较操作</strong><br>有两种方式测试数值域是否小于另一数值域。</p>
<ul>
<li>在BEGIN中给变量名赋值。</li>
<li>在关系操作中使用实际数值。</li>
</ul>
<p>描述：找出访问次数大于10次的所有记录。<br>命令：<code>awk &#39;{if ($5 &gt; 10) print $0}&#39; device</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-comparable.png" alt=""></p>
<p><strong>实例：3. 修改数值域的值</strong></p>
<p>当在awk中修改任何域时，实际输入文件是不可修改的，修改的只是保存在缓存里的awk副本，awk会在变量NR或NF变量中反映出修改痕迹。</p>
<p>描述：修改序号为6的记录，将其访问次数减一。<br>命令：<code>awk &#39;{if ($1==6) $5=$5-1; print $1, $2, $5 }&#39; device</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-modify-copy-number-domain.png" alt=""></p>
<p><strong>实例：4. 修改文本域</strong></p>
<p>描述：修改序号为6的记录，将其版本修改为iOS11.2.3。修改文本域就是对其重新赋值。<br>命令：<code>awk &#39;{if ($1==6) ($2=&quot;iOS11.2.3&quot;); print $1, $2, $5 }&#39; device</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-modify-text-copy-domain.png" alt=""></p>
<p><strong>实例：5. 只显示修改记录</strong></p>
<p>描述：只显示修改后序号为6的记录。<br>命令：<code>awk &#39;{if ($1==6) {$2=&quot;iOS11.2.3&quot;; print $2}; }&#39; device</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-modify-and-only-show-modified.png" alt=""></p>
<p><strong>实例：6. 创建新的输出域</strong></p>
<p>描述：创建新域6保存目前访问次数大于序号的减法值，表达式为’{$6=$5-$1}’，只打印其值大于零的序号和其新域值。在BEGIN部分加入tab键以对齐报告头。也可以赋给新域更有意义的变量名。<br>命令：<code>awk &#39;BEGIN {print &quot;IP\t Difference&quot;} {if ($5 &gt; $1) {$6=$5-$1; print $1 &quot;\t&quot; $6}}&#39; device</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-add-new-domain.png" alt=""></p>
<p><strong>实例：7. 增加列值</strong></p>
<p>描述：使用+=累加访问次数的值。awk的每一个操作匹配时，如果没有说明打印记录，那默认会打印所有记录。<br>命令：<code>awk &#39;(total+=$5); END {print &quot;total visits : &quot; total}&#39; device</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-add-column-value.png" alt=""></p>
<p><strong>实例：8. 文件长度相加</strong></p>
<p>描述：查看当前目录中所有文件的长度及其综合，但要排除子目录，使用ls -l命令，然后管道输出到awk，awk首先剔除首字符d（/^[^d]/）的记录，然后将文件长度相加，并输出每一文件长度及在END部分输出所有文件的长度。<br>命令：<code>ls -l | awk &#39;/^[^d]/ {print $9&quot;\t&quot;$5} {total+=$5} END {print &quot;total KB: &quot; total}&#39;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-acc-file-size.png" alt=""></p>
<h3 id="内置字符串函数"><a href="#内置字符串函数" class="headerlink" title="内置字符串函数"></a>内置字符串函数</h3><p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-string-function.png" alt=""></p>
<p>gsub类似于sed查找和替换。它允许替换一个字符串或字符为另一个字符串或字符，并以正则表达式的形式执行，第一个函数作用于记录$0，第二个gsub函数允许指定目标，如果未指定，默认是$0。<br>index(s, t)函数返回目标字符串s中查询字符串t的首位置。<br>length函数返回字符串s字符长度。<br>match函数测试字符串s是否包含一个正则表达式r定义的匹配。<br>split函数使用域分隔符fs，将字符串s划分为指定序列a。<br>sprint函数类似于printf函数，返回基本输出格式fmt的结果字符串exp。<br>sub(r, s)函数将用s代替$0中最左边最长的子串，该子串被（r）匹配。<br>sub(s, p)返回字符串s在位置p后的后缀部分。<br>substr(s, p, n)函数返回字符串s在位置p后长度为n的后缀部分。</p>
<p><strong>实例：1. gsub</strong></p>
<p>描述：匹配记录中访问时间为11:35的记录，修改为11:40。注意要用双引号括起来。<br>命令：<code>awk &#39;gsub(/11:35/, &quot;11:40&quot;) {print $0}&#39; device</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-gsub.png" alt=""></p>
<p><strong>实例：2. index</strong><br>描述：匹配字符串Honey中，ney子串第一次出现的位置，即字符个数。<br>命令：<code>awk &#39;BEGIN {print index(&quot;Honey&quot;, &quot;ney&quot;)}&#39;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-index.png" alt=""></p>
<p><strong>实例：3. length</strong></p>
<p>描述：匹配序号为6，第二个域的字符长度。也可以直接使用字符串。<br>命令：<code>awk &#39;$1==6 {print length($2) &quot;---&quot; $2}&#39; device</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-length.png" alt=""></p>
<p><strong>实例：4. match</strong></p>
<p>描述：match测试目标字符串是否包含查找字符的一部分，可以使用正则表达式。<br>命令：<br>在AWK中查找d，因其不存在，所以返回0。<br><code>awk &#39;BEGIN {print match(&quot;AWK&quot;, /d/)}&#39;</code><br>在AWK中查找K，因其存在，所有返回AWK中K出现的首位置字符数。<br><code>awk &#39;BEGIN {print match(&quot;AWK&quot;, /K/)}&#39;</code><br>在序号为6的记录中，查找Android的大版本号。<br><code>awk &#39;$1==6 {print match($2, &quot;7&quot;)}&#39; device</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-match.png" alt=""></p>
<p><strong>实例：5. split</strong></p>
<p>描述：如果域中具有分隔符形式的字符串，使用split函数将其分隔，并保存到一个数组中，最后将数组的第一个元素打印出来。<br>命令：<code>awk &#39;BEGIN {print split(&quot;123#456#789&quot;, myarray, &quot;#&quot;)}&#39;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-split.png" alt=""></p>
<p><strong>实例：6. sub</strong></p>
<p>描述：匹配所有Android，替换为android。注意只在模式第一次出现时进行替换操作。<br>命令：<code>awk &#39;sub(/Android/, &quot;android&quot;)&#39; device</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-sub.png" alt=""></p>
<p><strong>实例：7. substr</strong></p>
<p>描述：匹配第二个域版本信息中，打印从第一个字符开始到第七个字符。如果给定的长度值远大于字符串长度，awk将从起始位置返回所有字符。另一种形式是返回字符串后缀或指定位置后面的字符。<br>命令：<code>awk &#39;$1==5 {print substr($2,1,7)}&#39; device</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-substr.png" alt=""></p>
<p><strong>实例：8. 从shell向awk传入字符串</strong><br>命令：<br>使用管道将字符串powerful传入awk，返回其长度。<br><code>echo &quot;powerful&quot; | awk &#39;{print length($0)}&#39;</code><br>设置文件名为一变量，管道输出到awk，但会不带扩展名的文件名。<br><code>STR=&quot;myawk.txt&quot; | echo $STR | awk &#39;{print substr($STR,1,5)}&#39;</code><br>设置文件名为一变量，管道输出到awk，只返回其扩展名。<br><code>TR=&quot;myawk.txt&quot; | echo $STR | awk &#39;{print substr($STR,7)}&#39;</code></p>
<p>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-shell.png" alt=""></p>
<h3 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h3><p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-escape.png" alt=""></p>
<h3 id="printf修饰符"><a href="#printf修饰符" class="headerlink" title="printf修饰符"></a>printf修饰符</h3><p>基本语法：<code>printf([格式控制符], 参数)</code><br>格式控制符通常在引号里。</p>
<p>awkprintf修饰符：<br><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-printf-table.png" alt=""></p>
<p>awk printf格式：<br><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-printf-format-table.png" alt=""></p>
<p><strong>实例：1. 字符转换</strong><br>描述：通过管道输出65到awk中，printf进行ASCII码字符转换。<br>命令：<br><code>echo &quot;65&quot; | awk &#39;{printf (&quot;%c\n&quot;, $0)}&#39;</code><br>或者<br><code>awk &#39;BEGIN {printf &quot;%c\n&quot;, 65}&#39;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-char-convert.png" alt=""></p>
<p>描述：数字1024转换为浮点数之后，被加入了六个小数点。<br>命令：<br><code>awk &#39;BEGIN {printf &quot;%f\n&quot;, 1024}&#39;</code> </p>
<p>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-number-convert.png" alt=""></p>
<p><strong>实例：2. 格式化输出</strong></p>
<p>描述：BEGIN后的第一个花括号嵌入头信息，第二个花括号打印所有用户的IP地址和访问时间，要求IP地址左对齐，23个字符长度，后跟访问时间。<br>命令：<br><code>awk &#39;BEGIN {print &quot;IP\t\t\tTime&quot;} {printf &quot;%-23s %s\n&quot;, $4, $3}&#39; device</code> </p>
<p>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-printf-format.png" alt=""></p>
<p><strong>实例：3. 向一行awk命令传值</strong></p>
<p>描述：在命令行中设置VISITS等于10，然后传入awk中，查询访问次数大于10的所有记录。<br>命令：<code>awk &#39;{if($5 &gt; VISITS) print $0} &#39; VISITS=10 device</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-command-line-pass-to-awk.png" alt=""></p>
<p>描述：用管道将df -k传入awk，然后抽出第四列，即剩余可利用空间容量。使用$4 ~ /^[0-9]/取得容量数值，最后对命令行if($4 &lt; TRIGGER)上变量TRIGGER的值进行查询。<br>查看文件系统空间容量，观察其是否达到一定水平。因为要监视的已使用空间容量不断在变化，所以需要再命令行指定一个触发值。<br>命令：<code>df -k | awk &#39;($4 ~ /^[0-9]/) {if ($4 &lt; TRIGGER) printf &quot;%-15s %s\n&quot;,$6,$4}&#39; TRIGGER=930000</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-df.png" alt=""></p>
<p>描述：打印当前注册用户，并加入一定信息。<br>命令：<code>who | awk &#39;{print $1 &quot; is logged on&quot;}&#39;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-who.png" alt=""></p>
<p>描述：传入环境变量LOGNAME，显示当前用户名。<br>命令：<code>who | awk &#39;{if ($1 == user) print $1&quot; you are connected to &quot; $2}&#39; user=$LOGNAME&quot;}&#39;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-env-variable.png" alt=""></p>
<p><strong>实例：4. awk脚本文件</strong></p>
<p>描述：第一行#! /usr/bin/awk -f告知脚本系统awk命令的位置。在脚本文件后键入文件名之前，需要先对脚本文件加入可执行权限。<br>命令：<code>chmod u+x user_tot.awk</code><br>user_tot.awk脚本文件：<br><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-script-user-tot.png" alt=""></p>
<p>描述：执行user_tot.awk脚本文件。<br>命令：<code>./user_tot.awk device</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-script-run-user-tot.png" alt=""></p>
<p><strong>实例：5. 在awk中使用FS变量</strong></p>
<p>描述：从/etc/passwd文件中抽取第1和第5域，通过FS变量，指定冒号:分隔passwd文件域。第1域时账号名，第5域是账号所有者。<br><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-script-passwd-file.png" alt=""><br>命令：<code>chmod u+x passwd.awk | ./passwd.awk /etc/passwd</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-script-run-passwd.png" alt=""></p>
<p><strong>实例：6. 向awk脚本传值</strong></p>
<p>向awk脚本传值与向awk一行命令传值的方式大体相同，格式为：<br><code>awk script_file var=value input_file</code></p>
<p>描述：对比检查文件中域号和指定数字。注意不要忘了增加脚本的可执行权限。<br><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-script-fieldcheck-file.png" alt=""><br>命令：<code>chmod u+x fieldcheck.awk | ./fieldcheck.awk MAX=7 FS=&quot;:&quot; /etc/passwd</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-script-run-fieldcheck.png" alt=""></p>
<p>描述：从du命令获得输入，并输出块和字节数。<br><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-script-duawk-file.png" alt=""><br>命令：<code>chmod u+x duawk.awk | du /root | ./duawk.awk</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-script-run-duawk.png" alt=""></p>
<p><strong>实例：9. awk数组</strong></p>
<p>描述：用split将123#456#789划分开，并存入myarray数组，再使用循环打印各数组元素。<br><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-script-array-file.png" alt=""><br>命令：<code>chmod u+x duawk.awk | du /root | ./duawk.awk</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-script-run-array.png" alt=""></p>
<p><strong>实例：10. 处理由通配符指定的多个文件名</strong></p>
<p>描述：打印当前目录中以.txt结尾的文件。nextfile告诉awk停止处理当前的输入文件。下一个输入记录读取来自下一个输入文件。<br>命令：<br><code>awk &#39;{ print FILENAME; nextfile } &#39; *.txt</code><br><code>awk &#39;BEGIN{ print &quot;Starting...&quot;} { print FILENAME; nextfile }END{ print &quot;....DONE&quot;} &#39; *.txt</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/awk/awk-multiple-filename.png" alt=""></p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/mongodb/mongodb-collection-create.html</loc>
    <lastmod>2018-06-30T10:18:39.724Z</lastmod>
    <data>
        <display>
        <title>MongoDB：创建数据集合</title>
        <pubTime>2018-06-30T07:53:48.000Z</pubTime>   
         <content><p>MongoDB如何创建数据集合（collection）。<br><a id="more"></a></p>
<p>官网地址：<a href="https://docs.mongodb.com/manual/reference/method/db.createCollection/#db.createCollection。" target="_blank" rel="noopener">https://docs.mongodb.com/manual/reference/method/db.createCollection/#db.createCollection。</a></p>
<p>这节有点混乱，也有点尴尬，因为原本MongoDB就有些“没有规矩”。</p>
<p>快速创建一个集合，参考<a href="https://blog.csdn.net/chaiyu2002/article/details/80862002" target="_blank" rel="noopener">插入</a>这一节。</p>
<p>集合不存在的情况下，插入一条记录就会创建集合。</p>
<p>稍微啰嗦一点，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.test.insert(&#123;</span><br><span class="line">    &quot;_id&quot; : ObjectId(&quot;5abb3b5bce69c048be080199&quot;),</span><br><span class="line">    &quot;meta&quot; : &#123;</span><br><span class="line">        &quot;createAt&quot; : ISODate(&quot;2018-03-28T06:51:07.579Z&quot;),</span><br><span class="line">        &quot;updateAt&quot; : ISODate(&quot;2018-03-28T06:51:07.579Z&quot;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;a&quot; : &quot;1&quot;,</span><br><span class="line">    &quot;b&quot; : &quot;1&quot;,</span><br><span class="line">&#125;)</span><br><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br></pre></td></tr></table></figure>
<p>这样即会创建集合test，又会给这个集合插入一条记录。</p>
<p>非要规矩地创建（其实是可以设置一些选项），那么：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">db.createCollection(&lt;name&gt;, &#123; capped: &lt;boolean&gt;,</span><br><span class="line">                              autoIndexId: &lt;boolean&gt;,</span><br><span class="line">                              size: &lt;number&gt;,</span><br><span class="line">                              max: &lt;number&gt;,</span><br><span class="line">                              storageEngine: &lt;document&gt;,</span><br><span class="line">                              validator: &lt;document&gt;,</span><br><span class="line">                              validationLevel: &lt;string&gt;,</span><br><span class="line">                              validationAction: &lt;string&gt;,</span><br><span class="line">                              indexOptionDefaults: &lt;document&gt;,</span><br><span class="line">                              viewOn: &lt;string&gt;,</span><br><span class="line">                              pipeline: &lt;pipeline&gt;,</span><br><span class="line">                              collation: &lt;document&gt;,</span><br><span class="line">                              writeConcern: &lt;document&gt;&#125; )</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>字符串</td>
<td>要创建的集合的名称。</td>
</tr>
<tr>
<td>options</td>
<td>文档</td>
<td>可选。一大堆选项，暂时没用到，将来再补充了。</td>
</tr>
</tbody>
</table>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/mongodb/mongodb-dababase-create.html</loc>
    <lastmod>2018-06-30T10:15:14.155Z</lastmod>
    <data>
        <display>
        <title>MongoDB：创建数据库</title>
        <pubTime>2018-06-30T07:53:48.000Z</pubTime>   
         <content><p>MongoDB如何创建数据库。<br><a id="more"></a></p>
<p>官网位置：<a href="https://docs.mongodb.com/manual/mongo/。" target="_blank" rel="noopener">https://docs.mongodb.com/manual/mongo/。</a></p>
<p>初衷：MongoDB的使用还是有一定难度的，官网讲解的一环牵扯一环，不容易一下子把握住重点，也不利于快速查询操作，所以整理一下。</p>
<p>进入mongo：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@iZhp3fz3iqsadyes2s8ayeZ:~# mongo</span><br><span class="line">MongoDB shell version: 2.6.10</span><br><span class="line">connecting to: test</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<p>如果没有mongo这个命令，表示路径没有配置好。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use &lt;database&gt;</span><br></pre></td></tr></table></figure>
<p>尖括号表示需要你替换的变量，别完全照搬，当年我是犯过这种很<code>猪头</code>的错误的，你不要证明你也<code>猪头</code>了。</p>
<p>如果数据库存在，这条命令会切换到该数据库，如果不存在，则创建并切换到该数据库。</p>
<p><strong>实例</strong>：创建一个数据库，名字为my_test。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use my_test</span><br><span class="line">switched to db my_test</span><br></pre></td></tr></table></figure>
<p>好，创建成功。</p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-top.html</loc>
    <lastmod>2018-06-29T14:35:58.159Z</lastmod>
    <data>
        <display>
        <title>Linux top总结</title>
        <pubTime>2018-06-11T04:20:23.000Z</pubTime>   
         <content><p><code>top</code>命令可以实时动态地查看系统的整体运行情况，是一个综合了多方信息监测系统西能和运行信息的使用工具。top命令提供了互动式的界面，用热键管理。</p>
<a id="more"></a>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>top [选项]</code></p>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p><code>top</code>命令用来显示Linux的处理器活动和内核实时管理的任务。它会显示正在使用的处理器和内存以及运行进程等其他信息。</p>
<h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><ul>
<li>-b：以批处理模式操作。</li>
<li>-c：显示完整的命令。</li>
<li>-d：屏幕刷新间隔时间。</li>
<li>-I：忽略失效过程。</li>
<li>-s：保密模式。</li>
<li>-S：累积模式。</li>
<li>-i&lt;时间&gt;：设置间隔时间。</li>
<li>-u&lt;用户名&gt;：指定用户名。</li>
<li>-p&lt;进程号&gt;：指定进程。</li>
<li>-n&lt;次数&gt;：循环显示的次数。</li>
</ul>
<h2 id="top交互命令"><a href="#top交互命令" class="headerlink" title="top交互命令"></a><code>top</code>交互命令</h2><p>在<code>top</code>命令执行过程中可以使用的一些交互命令。这些命令都是单字母的，如果在命令行中使用了-s选项， 其中一些命令可能会被屏蔽。</p>
<ul>
<li>h：显示帮助画面，给出一些简短的命令总结说明。</li>
<li>k：终止一个进程。</li>
<li>i：忽略闲置和僵死进程，这是一个开关式命令。</li>
<li>q：退出程序。</li>
<li>r：重新安排一个进程的优先级别。</li>
<li>S：切换到累计模式。</li>
<li>s：改变两次刷新之间的延迟时间（单位为s），如果有小数，就换算成ms。输入0值则系统将不断刷新，默认值是5s。</li>
<li>f或者F：从当前显示中添加或者删除项目。</li>
<li>o或者O：改变显示项目的顺序。</li>
<li>l：切换显示平均负载和启动时间信息。</li>
<li>m：切换显示内存信息。</li>
<li>t：切换显示进程和CPU状态信息。</li>
<li>c：显示进程启动时的完整路径和程序名。</li>
<li>M：根据驻留内存大小进行排序。</li>
<li>P：根据CPU使用百分比大小进行排序。</li>
<li>T：根据时间/累计时间进行排序。</li>
<li>w：将当前设置写入~/.toprc文件中。</li>
</ul>
<h2 id="界面解释"><a href="#界面解释" class="headerlink" title="界面解释"></a>界面解释</h2><p><img src="http://p9xqnn501.bkt.clouddn.com/top/top-field.png" alt=""></p>
<p>统计信息区前五行是系统整体的统计信息。<br><strong>系统运行时间和平均负载</strong><br>第一行是任务队列信息，同uptime命令的执行结果，可以使用l命令切换uptime的显示。其内容如下：</p>
<ul>
<li>08:42:05：当前时间。</li>
<li>up 8 days, 11:56：系统运行时间。</li>
<li>1 users：当前登录用户数。</li>
<li>load average: 0.10, 0.04, 0.05：系统负载，即任务队列平均长度。分别为1、5、15min前到现在平均值。</li>
</ul>
<p><strong>进程</strong><br>第二行为进程信息。内容如下：</p>
<ul>
<li>62 total：进程总数[键入H可查看线程数]。</li>
<li>2 running：正在运行的进程。</li>
<li>60 sleeping：睡眠进程。</li>
<li>0 stopped：停止的进程。</li>
<li>0 zombie：僵尸进程数。</li>
</ul>
<p><strong>CPU状态</strong><br>第三行为CPU状态信息，当有多个CPU时，这些内容可能会超过两行。内容如下：</p>
<ul>
<li>us, user：运行(未调整优先级的) 用户进程的CPU百分比。</li>
<li>sy，system：运行内核进程的CPU百分比。</li>
<li>ni，niced：运行已调整优先级的用户进程的CPU百分比。</li>
<li>wa，IO wait：用于等待IO完成的CPU百分比。</li>
<li>hi：处理硬件中断的CPU百分比。</li>
<li>si：处理软件中断的CPU百分比。</li>
<li>st：这个虚拟机被hypervisor偷去的CPU百分比。（译注：如果当前处于一个hypervisor下的vm，实际上hypervisor也是要消耗一部分CPU处理时间的）。</li>
</ul>
<p><strong>内存使用</strong><br>倒数第2、3行为内存相关信息，内存显示可以用m命令切换：</p>
<ul>
<li>KiB Mem: 1883724 total, 187736 free：分别是物理内存总量、空闲内存总量。</li>
<li>120536 used, 1575452 buffers：使用物理内存总量、用作内核缓存内存量。</li>
<li>KiB Swap: 1044476 total, 713552 used：分别是交换分区量、使用交换分区总量。</li>
<li>330924 free, 10052032 cached：空闲交换区总量、缓存交换区总量。</li>
</ul>
<p><strong>字段/列</strong><br>最后一行则是进程相关的资源占用信息：</p>
<ul>
<li>PID：进程的ID，进程的唯一标识符。</li>
<li>USER：进程所有者的实际用户名。</li>
<li>PR：进程的优先级别，范围0-39，越小越优先被执行。</li>
<li>NI：nice值。范围-20-19，负值表示高优先级，正值表示低优先级。在top里，PR-NI=20，默认启动一个进程，nice是0。</li>
<li>VIRT：进程占用的虚拟内存。</li>
<li>RES：进程占用的物理内存。</li>
<li>SHR：进程使用的共享内存。</li>
<li>S：进程的状态。<ul>
<li>D：表示不可终端的睡眠状态。</li>
<li>R：表示正在运行。</li>
<li>S：表示休眠。</li>
<li>T：表示作业控制信号下已停止。</li>
<li>t：表示在调试状态的停止。</li>
<li>Z：表示僵死状态。</li>
</ul>
</li>
<li>%CPU：自从上一次更新到现在任务所使用的CPU使用率。</li>
<li>%MEM：进程使用的物理内存和总内存的百分比。</li>
<li>TIME+：该进程启动后占用的总的CPU时间，即占用CPU使用时间的累加值，精确到百分之一秒。</li>
<li>COMMAND：进程启动命令名称。</li>
</ul>
<h2 id="交互命令实例"><a href="#交互命令实例" class="headerlink" title="交互命令实例"></a>交互命令实例</h2><p><strong>实例：<code>l、t、m</code>：切换负载、任务、内存信息的显示</strong><br>描述：相应地切换顶部的平均负载、任务/CPU状态和内存信息的概况显示。<br>输出：<br>不显示平均负载：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-l.png" alt=""><br>不显示CPU概况：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-t.png" alt=""><br>不显示内存和交换内存概况：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-m-noword.png" alt=""><br>可以切换图形显示：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-m-graph.png" alt=""><br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-m-graph-bold.png" alt=""><br>均不显示：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-l-t-m-none.png" alt=""></p>
<p><strong>实例：<code>h</code>：帮助</strong><br>描述：在<code>top</code>状态下，按<code>h</code>键或者<code>?</code>键显示交互命令的帮助菜单。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-h.png" alt=""></p>
<p><strong>实例：手动刷新</strong><br>描述：在<code>top</code>状态下，按空格或者回车进行手动刷新。top命令默认在一个特定间隔（3秒）后刷新显示。</p>
<p><strong>实例：<code>A</code>：切换交替显示模式</strong></p>
<p>描述：在<code>top</code>状态下，按<code>A</code>键，可以在全屏和交替模式间切换。在交替模式下会显示4个窗口。</p>
<ul>
<li>Def（默认字段组）</li>
<li>Job（任务字段组）</li>
<li>Mem（内存字段组）</li>
<li>Usr（用户字段组）</li>
</ul>
<p>这四组字段共有一个独立的可配置的概括区域和它自己的可配置任务区域。4个窗口中只有一个窗口是当前窗口。当前窗口的名称显示在左上方。只有当前窗口才会接受你键盘交互命令。<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-A.png" alt=""><br>可以用<code>a</code>和<code>w</code>在4个窗口间切换，<code>a</code>移到后一个窗口，<code>w</code>移到前一个窗口。用<code>g</code>命令可以输入一个数字来选择当前窗口。<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-switch.png" alt=""></p>
<p><strong>实例：<code>B</code>：粗体显示</strong><br>描述：在<code>top</code>状态下，按<code>B</code>键，会将一些重要信息会以加粗字体显示。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-B.png" alt=""></p>
<p><strong>实例：<code>d</code>或<code>s</code>：设置显示的刷新间隔</strong><br>描述：在<code>top</code>状态下，按<code>d</code>键或者<code>s</code>键，设置显示的刷新间隔为1秒。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-d-s.png" alt=""></p>
<p><strong>实例：<code>f</code>：字段管理</strong><br>描述：在<code>top</code>状态下，按<code>f</code>键进入字段管理界面。d键选择要显示的字段，用*标记的是已选择的。上下光标键在字段内导航，左光标键可以选择字段，右光标键进入排序状态，此时按上下光标键可以进行上下移动，回车确认。s键设置当前排序的字段，q或Esc键退出。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-f.png" alt=""></p>
<p><strong>实例：<code>R</code>：反向排序</strong><br>描述：在<code>top</code>状态下，按<code>R</code>键切换反向/常规排序。</p>
<p><strong>实例：<code>c</code>：切换显示命令名称和完整命令行</strong><br>描述：在<code>top</code>状态下，按<code>c</code>键，切换是否显示进程启动时的完整路径和程序名。也可以使用如下命令行。<br>命令：<code>top -c</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-c.png" alt=""></p>
<p><strong>实例：<code>i</code>：空闲任务</strong><br>描述：在<code>top</code>状态下，按i键，切换显示空闲任务。<br>输出：<br>不显示空闲任务：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-i.png" alt=""></p>
<p><strong>实例：<code>V</code>：树视图</strong><br>描述：在<code>top</code>状态下，按V键，切换树视图。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-V.png" alt=""></p>
<p><strong>实例：<code>z</code>：切换彩色显示</strong><br>描述：在<code>top</code>状态下，按<code>z</code>键，切换彩色，即打开或关闭彩色显示。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-z-normal.png" alt=""></p>
<p><strong>实例：<code>Z</code>：改变配色</strong><br>描述：在<code>top</code>状态下，按<code>Z</code>键，显示一个改变<code>top</code>命令的输出颜色的屏幕。可以为8个任务区域选择8种颜色。<br>输出：<br>设置修改：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-Z.png" alt=""><br>显示效果：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-Z-show.png" alt=""></p>
<p><strong>实例：按照内存使用大小排序</strong><br>描述：在<code>top</code>状态下，按shift+m，可以按照内存使用大小排序进程。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-M.png" alt=""></p>
<p><strong>实例：<code>x、y</code>：切换高亮信息</strong><br>描述：在<code>top</code>状态下，按<code>x</code>键将排序字段高亮显示（纵列）；按<code>y</code>键将运行进程高亮显示（横行）。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-x-y.png" alt=""></p>
<p><strong>实例：<code>u</code>：特定用户的进程</strong><br>描述：在<code>top</code>状态下，按u键将会提示输入用户名，输入首显示特定用户的进程。空白将会显示全部用户。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-u.png" alt=""></p>
<p><strong>实例：<code>n或#</code>：任务的数量</strong><br>描述：在<code>top</code>状态下，按n键或者<code>#</code>键可以设置最大显示的任务数量。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-n-#.png" alt=""></p>
<p><strong>实例：<code>k</code>：结束任务</strong><br>描述：在<code>top</code>状态下，按<code>k</code>键输入<code>PID</code>后，发送信号给任务（通常是结束任务）。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-k.png" alt=""></p>
<p><strong>实例：<code>r</code>：重新设置优先级</strong><br>描述：在<code>top</code>状态下，按<code>r</code>键输入-20~19范围中的数字后，重新设置一个任务的调度优先级（nice值）。<br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-k.png" alt=""></p>
<h2 id="命令行实例"><a href="#命令行实例" class="headerlink" title="命令行实例"></a>命令行实例</h2><p><strong>实例：<code>-p</code>：监控特定的PID</strong><br>描述：-p选项监控指定的PID。PID的值为0将被作为top命令自身的PID。<br>命令：<code>top -p 0</code></p>
<p><strong>实例：<code>-u或-U</code>: 用户名或者UID</strong><br>描述：可以用这些选项浏览特定用户的进程。用户名或者UID可以在选项中指定。-p、-u和-U选项是互斥的，同时只可以使用这其中一个选项。试图组合使用这些选项时，会得到一个错误:<br>命令：<code>top -p 1248 -u root</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/top/top-U-p-u-error.png" alt=""></p>
<p><strong>实例：<code>-b</code>：批处理模式</strong><br>描述：-b选项以批处理模式启动top命令，在文件中保存输出时是很有用的。</p>
<p><strong>实例：<code>-c</code>：命令/程序名 触发:</strong><br>描述：显示进程启动时的完整路径和程序名。</p>
<p><strong>实例：<code>-d</code>：设置延迟间隔</strong><br>描述：设置top的显示间隔(以秒计)。<br>命令：<code>top -d 1</code></p>
<p><strong>实例：<code>-i</code>：切换显示空闲进程</strong><br>命令：<code>top -i</code></p>
<p><strong>实例：<code>-n</code>：特定重复次数后退出</strong><br>描述：top输出保持刷新，直到按q键或者到达指定次数。下面的命令将在10次重复之后自动退出。<br>命令：<code>top -n 10</code></p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-xargs.html</loc>
    <lastmod>2018-06-28T15:01:13.214Z</lastmod>
    <data>
        <display>
        <title>Linux xargs命令用法详解</title>
        <pubTime>2018-06-08T06:36:56.000Z</pubTime>   
         <content><p>xargs命令是给其他命令传递参数的一个过滤器，可以直接将一个程序的输出作为另一个程序的输入（例如文本过滤或模式搜索工具，如grep，sed，awk等）。</p>
<a id="more"></a>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>xargs [选项] [命令]</code></p>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>xargs是给其他命令传递参数的一个过滤器，也是组合多个命令的一个工具。它擅长将标准输入数据转换成命令行参数。xargs能够处理管道或者标准输入，并将其转换成特定命令的命令参数。xargs也可以将单行或多行文本输入转换为其他格式，例如多行变单行，单行变多行。xargs的默认命令是echo，空格是默认分隔符。这意味着通过管道传递给xargs的输入将会包含换行和空白，不过通过xargs的处理，换行和空白将被空格取代。xargs是构建单行命令的重要组件之一。</p>
<h2 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h2><ul>
<li>-0：表示以\0作为分隔符，一般与find结合使用。</li>
<li>-a或–arg-file=&lt;文件&gt;：从文件中读入。</li>
<li>-d或–delimiter=&lt;分隔符&gt;：自定义一个分隔符。</li>
<li>-E：结束符，遇到-e指定的命令行参数，则只会将-e指定的命令行参数之前的参数传递给xargs后面的命令。</li>
<li>-i或–replace=&lt;替换的字符串&gt;：将xargs接收到的每个名称赋给{}，用{}代替。</li>
<li>-I：与-i选项相同，可以用其他字符代替{}，例如[]。</li>
<li>-n或–max-args=&lt;最大的参数数&gt;：每次传递几个参数给后面的命令执行。</li>
<li>-p：并不马上执行命令，而是先输出将要执行的完整的命令（包括命令以及传递给命令的命令行参数），询问是否执行。</li>
<li>-r或–no-run-if-empty：当xargs的输入为空的时候则停止xargs，不再去执行。</li>
<li>-s或–max-chars=&lt;最大的字符数&gt;：xargs后面那个命令的最大命令行字符数。</li>
<li>-t或–verbose：表示先打印命令，然后再执行。</li>
<li>-x或–exit：配合-s使用，退出。</li>
<li>–help：显示帮助信息。</li>
<li>–version：显示版本。</li>
</ul>
<h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2><p><strong>实例：1. 多行变单行</strong><br>描述：将alpha.txt内多行数据处理成单行。<br>命令：<code>cat alpha.txt | xargs</code><br>输出：<br>alpha.txt内容：<br><img src="http://p9xqnn501.bkt.clouddn.com/xargs/xargs-multiple-file.png" alt=""><br>经过xargs处理之后：<br><img src="http://p9xqnn501.bkt.clouddn.com/xargs/xargs-multiple-to-single.png" alt=""></p>
<p><strong>实例：2. 传递字符串给xargs</strong><br>描述：执行cat命令。echo命令将”–help”字符串作为输出重定向给xargs作为输入，并将”–help”做成一个命令参数来运行cat命令。<br>命令：<code>echo &#39;--help&#39; | xargs cat</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/xargs/xargs-echo.png" alt=""></p>
<p><strong>实例：3. 显示执行的命令</strong><br>描述：-t选项在执行前先打印即将执行的命令。<br>命令：<code>echo &#39;--help&#39; | xargs -t cat</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/xargs/xargs-t.png" alt=""></p>
<p><strong>实例：4. 指定分隔符</strong><br>描述：将echo的输出重定向给xargs命令作为输入，xargs将以#为分隔符分隔输入的内容，最后将分隔好的参数全部一次性传给echo命令将其打印出来。-d选项可以自定义一个分隔符。<br>命令：<code>echo &#39;12#34#56#78&#39; | xargs -d &#39;#&#39; echo</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/xargs/xargs-d.png" alt=""></p>
<p>下面多出的一行空白，是因为xargs默认是以空白作为分隔符，换行符也是默认空白符的一种，所以每一条字符串后面实际上是加了换行符。</p>
<p><strong>实例：5. 指定命令行参数个数</strong><br>描述：在上面例子的基础上，-n2表示xargs每次只传递2个参数给后面的echo命令。<br>命令：<code>echo &#39;12#34#56#78&#39; | xargs -n2 -d &#39;#&#39; echo</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/xargs/xargs-n.png" alt=""></p>
<p><strong>实例：6. 执行命令前先提示</strong><br>描述：-p选项使xargs在执行其后面的命令之前先输出即将要执行的完整的命令（包括命令的命令行参数），询问是否执行，输入y才继续执行，否则不执行。<br>命令：<code>echo &#39;12#34#56#78&#39; | xargs -n2 -d &#39;#&#39; -p echo</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/xargs/xargs-p.png" alt=""></p>
<p><strong>实例：7. 指定终止字符串</strong><br>描述：将字符串”56”作为终止字符串。注意-E只有在xargs不指定-d的时候有效。<br>命令：<code>echo &#39;12 34 56 78&#39; | xargs -E &#39;56&#39; echo</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/xargs/xargs-E.png" alt=""></p>
<p><strong>实例：8. 结合find使用</strong><br>描述：find的结果是使用’\0’来分隔的。-0选项使用’\0’来分隔。当尝试用rm删除太多的文件的时候，可能会得到/bin/rm Argument list too long的错误，将下面命令中的echo替换为rm -f即可避免这个问题。<br>命令：<code>find . -name &#39;*.txt&#39; -print0 | xargs -d &#39;\0&#39; echo</code><br>或者：<code>find . -name &#39;*.txt&#39; -print0 | xargs -0 echo</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/xargs/xargs-d-0.png" alt=""></p>
<p><strong>实例：9. 结合wc使用</strong><br>描述：统计当前目录下所有txt文件的行数。<br>命令：<code>find . -type f -name &quot;*.txt&quot; -print0 | xargs -0 wc -l</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/xargs/xargs-wc.png" alt=""></p>
<p><strong>实例：10. 测试属于哪类文件</strong><br>描述：查找当前目录下的每一个普通文件，并测试它们分别属于哪类文件。<br>命令：<code>find . -type f -print | xargs file</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/xargs/xargs-file.png" alt=""></p>
<p><strong>实例：11. 结合IO重定向使用</strong><br>描述：查找当前目录下以.txt结尾的文件，将名字重定向给xargs处理，并传给echo，echo将其作为输出流，写入到/tmp/txt.log文件中。<br>命令：<code>find . -name &quot;*.txt&quot; -print | xargs echo &quot;&quot; &gt; /tmp/txt.log</code></p>
<p><strong>实例：12. 结合chmod使用</strong><br>描述：在当前目录下找到所有用户具有读、写和执行权限的文件，并收回相应的写权限。<br>命令：<code>find . -perm -7 -print | xargs chmod o-w</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/xargs/xargs-chmod.png" alt=""></p>
<p><strong>实例：13. 结合grep使用</strong><br>描述：在当前目录的所有文件中搜索hello这个词。<br>命令：<code>find . -type f -print | xargs grep &quot;hello&quot;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/xargs/xargs-grep.png" alt=""></p>
<p><strong>实例：14. 结合wget使用</strong><br>描述：一次性下载文件中的所有URL链接资源，每行一个URL链接。<br>命令：<code>cat url-list.txt | xargs wget -c</code></p>
<p><strong>实例：15. 结合tar使用</strong><br>描述：查找所有的jpg文件，并且压缩它们。<br>命令：<code>find . -name &quot;*.jpg&quot; | xargs tar -czvf images.tar.gz</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/xargs/xargs-tar.png" alt=""></p>
<p><strong>实例：16. 结合cp使用</strong><br>描述：在当前目录中拷贝所有的图片文件至move目录中。<br>命令：<code>ls *.jpg | xargs -n1 -i cp {} move/</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/xargs/xargs-cp.png" alt=""></p>
<p><strong>实例：17. 指定命令最多的字符数</strong><br>描述：将xyz.txt文件的内容重定向给xargs，xargs限制echo命令的字符数最多为25个（s），如果超过则退出（x），-i选项表示将{}替换成xargs处理得到后的每一项参数，在这里是xyz.txt文件的中的每一行。<br>命令：<code>cat xyz.txt | xargs -i -x -s 25 echo &quot;{}&quot;</code><br>输出：</p>
<p>xyz.txt文件内容：<br><img src="http://p9xqnn501.bkt.clouddn.com/xargs/xargs-s-file.png" alt=""></p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/xargs/xargs-s.png" alt=""></p>
<p><strong>实例：18. 替换{}指定其他代替字符</strong><br>描述：将当前目录下以.jpg结尾的文件移动到move目录中。-i选项默认的前面输出用{}代替，-I选项可以指定其他代替字符，如例子中的[]。<br>命令：<code>find . -name &quot;*.jpg&quot; | xargs -I [] mv [] move/</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/xargs/xargs-I.png" alt=""></p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-uniq.html</loc>
    <lastmod>2018-06-28T15:01:13.213Z</lastmod>
    <data>
        <display>
        <title>Linux uniq命令用法详解</title>
        <pubTime>2018-06-24T00:53:22.000Z</pubTime>   
         <content><p>uniq命令用于报告或忽略文件中的重复行。</p>
<a id="more"></a>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>uniq命令可以轻松地从文件中找到重复的行，而且可以删除重复项，显示重复项出现的次数，只显示重复的行，只显示唯一的行。<br>请注意，除非重复行是相邻的，否则uniq不会删除它们。因此可能需要先对它们进行排序，或将排序命令与uniq组合使用。</p>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>uniq [选项] [文件]</code></p>
<h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><ul>
<li>-c或——count：在每列旁边显示该行重复出现的次数；</li>
<li>-d或–repeated：仅显示重复出现的行列；</li>
<li>-f&lt;栏位&gt;或–skip-fields=&lt;栏位&gt;：忽略比较指定的栏位；</li>
<li>-s&lt;字符位置&gt;或–skip-chars=&lt;字符位置&gt;：忽略比较指定的字符；</li>
<li>-u或——unique：仅显示出一次的行列；</li>
<li>-w&lt;字符位置&gt;或–check-chars=&lt;字符位置&gt;：指定要比较的字符。</li>
</ul>
<h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2><h3 id="实例：删除相邻重复的行"><a href="#实例：删除相邻重复的行" class="headerlink" title="实例：删除相邻重复的行"></a><strong>实例：删除相邻重复的行</strong></h3><p>描述：uniq命令删除了给定文件中所有连续重复的行，剩下显示的行都不重复。可以看到输出中，第1行和第3行重复了，第2行和第5行重复了。这是因为uniq命令只有在相邻的情况下才会删除重复的行。<br>命令：<code>uniq device</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/uniq/uniq.png" alt=""></p>
<h3 id="实例：删除所有重复的行"><a href="#实例：删除所有重复的行" class="headerlink" title="实例：删除所有重复的行"></a><strong>实例：删除所有重复的行</strong></h3><p>描述：经过排序之后，所有相同的行都连续地排在一起，达到了删除所有行的目的。<br>命令：<br><code>sort -u device</code><br><code>sort device | uniq</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/uniq/uniq-sort.png" alt=""></p>
<h3 id="实例：仅显示不连续重复的单一行"><a href="#实例：仅显示不连续重复的单一行" class="headerlink" title="实例：仅显示不连续重复的单一行"></a><strong>实例：仅显示不连续重复的单一行</strong></h3><p>描述：只显示device中不连续重复的单一行，只有10:aaa:43是唯一的。<br>命令：<code>uniq -u device</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/uniq/uniq-u.png" alt=""></p>
<h3 id="实例：找出重复的行"><a href="#实例：找出重复的行" class="headerlink" title="实例：找出重复的行"></a><strong>实例：找出重复的行</strong></h3><p>显示device文件中连续出现的重复行。同样，不连续重复的行被认为是不重复的行。<br>描述：33:fff:221出现了两次，因为它们不是连续的。<br>命令：<code>uniq -d device</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/uniq/uniq-d.png" alt=""></p>
<p>描述：在device文件中的第一行插入一行11:eee:49，但输出中没有出现，因为它们不是连续的。<br>命令：<br><code>vim device &lt;修改文件&gt;</code><br><code>uniq -d device</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/uniq/uniq-d5.png" alt=""></p>
<p>描述：先排序，然后真正找出重复的行。<br>命令：<code>sort device | uniq -d</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/uniq/uniq-d3.png" alt=""></p>
<p>描述：先排序，然后将所有重复的行全部显示出来。<br>命令：<code>sort device | uniq -D</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/uniq/uniq-d4.png" alt=""></p>
<h3 id="实例：统计各行在出现的次数"><a href="#实例：统计各行在出现的次数" class="headerlink" title="实例：统计各行在出现的次数"></a><strong>实例：统计各行在出现的次数</strong></h3><p>描述：-c选项统计device文件中各行重复的次数。<br>命令：<code>uniq -c device</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/uniq/uniq-c.png" alt=""></p>
<p>描述：下面的例子，检查给定文件中每一行重复出现的行数。<br>命令：<code>sort device | uniq -c | sort -nr</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/uniq/uniq-c-sort.png" alt=""></p>
<h3 id="实例：将比较限制为N个字符"><a href="#实例：将比较限制为N个字符" class="headerlink" title="实例：将比较限制为N个字符"></a><strong>实例：将比较限制为N个字符</strong></h3><p>描述：只比较每行的第一个字符。输出中可以看到，前两行被当做相同的行。-d选项将比较限制为N个字符。<br>命令：<code>uniq -d -w 1 device</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/uniq/uniq-w.png" alt=""></p>
<h3 id="实例：忽略N个字符后比较"><a href="#实例：忽略N个字符后比较" class="headerlink" title="实例：忽略N个字符后比较"></a><strong>实例：忽略N个字符后比较</strong></h3><p>描述：下面的命令将忽略在文件中每行的前七个字符后，再进行比较。-s选项来忽略比较前N个字符。<br>命令：<code>uniq -d -s 7 device</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/uniq/uniq-s.png" alt=""></p>
<h3 id="实例：忽略N个字段后比较"><a href="#实例：忽略N个字段后比较" class="headerlink" title="实例：忽略N个字段后比较"></a><strong>实例：忽略N个字段后比较</strong></h3><p>描述：先将device文件的内容排序后，用awk格式化输出。-t和-F指定sort和awk的域分隔符。<br>命令：<code>sort -t: device | awk -F: &#39;{print $1&quot; &quot;$2&quot; &quot;$3}&#39;</code></p>
<p>描述：忽略两个字段后进行比较。从输出中看到，第三个字段只有49和221是重复的。-f选项指定忽略N个字段后，再进行比较。<br>命令：<code>sort -t: device | awk -F: &#39;{print $1&quot; &quot;$2&quot; &quot;$3}&#39; | uniq -d -f 2</code></p>
<p>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/uniq/uniq-f.png" alt=""></p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-wc.html</loc>
    <lastmod>2018-06-28T15:01:13.213Z</lastmod>
    <data>
        <display>
        <title>Liunx wc命令用法详解</title>
        <pubTime>2018-06-19T16:43:34.000Z</pubTime>   
         <content><p>wc命令可以计算文件的新行、字符数、字节数。</p>
<a id="more"></a>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>wc命令可以计算文件的新行、字符数、字节数。如果指定多于一个文件，也列出总的行数。单词是由空格分隔的非零长度的字符序列。如果没有指定文件，或当文件为-，则读取标准输入。</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/wc/wc-man.png" alt=""></p>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p>wc [OPTION]… [FILE]…<br>wc [OPTION]… –files0-from=F</p>
<h2 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h2><ul>
<li>-c或–bytes或——chars：只显示Bytes数；</li>
<li>-l或——lines：只显示列数；</li>
<li>-w或——words：只显示字数。</li>
<li>-m或——chars：只显示字符数。</li>
<li>-L或–max-line-length：打印最长行的长度。</li>
<li>–files0-from=F：从文件读取文件名，文件名应该是NUL-terminated空字符结尾。如果是-则从标准输入中读取。</li>
</ul>
<h2 id="命令实例"><a href="#命令实例" class="headerlink" title="命令实例"></a>命令实例</h2><h3 id="打印字节数"><a href="#打印字节数" class="headerlink" title="打印字节数"></a><strong>打印字节数</strong></h3><p>描述：打印letter文件的行数，字符数，字节数和文件名。默认没有参数。<br>命令：<code>wc letter</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/wc/wc.png" alt=""></p>
<h3 id="打印字节数-1"><a href="#打印字节数-1" class="headerlink" title="打印字节数"></a><strong>打印字节数</strong></h3><p>描述：打印file.txt文件的字节数，包含29个字节。-c选项打印字节数。<br>命令：<code>wc -c file.txt</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/wc/wc-c.png" alt=""></p>
<h3 id="打印字符数"><a href="#打印字符数" class="headerlink" title="打印字符数"></a><strong>打印字符数</strong></h3><p>描述：打印file.txt文件的字符数，包含29个字符。-m选项打印字符数。<br>命令：<code>wc -m file.txt</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/wc/wc-m.png" alt=""></p>
<h3 id="打印换行数"><a href="#打印换行数" class="headerlink" title="打印换行数"></a><strong>打印换行数</strong></h3><p>描述：打印file.txt文件中的新行数，包含4行。-l选项打印新行数。<br>命令：<code>wc -l file.txt</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/wc/wc-l.png" alt=""></p>
<h3 id="打印单词数"><a href="#打印单词数" class="headerlink" title="打印单词数"></a><strong>打印单词数</strong></h3><p>描述：打印file.txt文件中的单词数，包含6个单子。-w选项打印单词数。<br>命令：<code>wc -w file.txt</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/wc/wc-w.png" alt=""></p>
<h3 id="打印最长行长度"><a href="#打印最长行长度" class="headerlink" title="打印最长行长度"></a><strong>打印最长行长度</strong></h3><p>描述：打印file.txt文件中的最长行的长度，最长行长度为11。-L选项打印输入文件中最长行的长度。<br>命令：<code>wc -L file.txt</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/wc/wc-width-L.png" alt=""></p>
<h3 id="统计目录中文件或目录的数量"><a href="#统计目录中文件或目录的数量" class="headerlink" title="统计目录中文件或目录的数量"></a><strong>统计目录中文件或目录的数量</strong></h3><p>描述：统计目录中文件夹和文件的数量。ls -1将每个文件夹或文件放在新行上，然后通过wc -l来计算换行数。<br>命令：<code>ls -1 | wc -l</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/wc/wc-pipe.png" alt=""></p>
<h3 id="更多命令信息"><a href="#更多命令信息" class="headerlink" title="更多命令信息"></a><strong>更多命令信息</strong></h3><p><img src="http://p9xqnn501.bkt.clouddn.com/wc/wc-more-detail.png" alt=""></p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-type.html</loc>
    <lastmod>2018-06-28T15:01:13.212Z</lastmod>
    <data>
        <display>
        <title>Linux type命令用法详解</title>
        <pubTime>2018-06-13T00:56:25.000Z</pubTime>   
         <content><p>type命令用于查找Linux命令的信息。</p>
<a id="more"></a>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>type命令用来显示指定命令的类型，可以轻松找出给定的命令是否是别名、shell内置命令、文件、函数或关键字。另外，也可以找到命令的实际路径。</p>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>type [选项] 命令</code></p>
<h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><ul>
<li>-t：仅找出 Linux 命令的类型，输出“file”、“alias”或者“builtin”，分别表示给定的指令为“外部指令”、“命令别名”或者“内部指令”。</li>
<li>-p：如果给出的指令为外部指令，则显示其绝对路径。</li>
<li>-a：在环境变量“PATH”指定的路径中，显示给定指令的信息，包括命令别名。</li>
</ul>
<h2 id="命令类型"><a href="#命令类型" class="headerlink" title="命令类型"></a>命令类型</h2><ul>
<li>alias：别名。</li>
<li>keyword：函数，Shell保留字。</li>
<li>function：函数，Shell函数。</li>
<li>builtin：内建命令，Shell内建命令。</li>
<li>file：文件，磁盘文件，外部命令。</li>
<li>unfound：没有找到。</li>
</ul>
<h2 id="实用示例"><a href="#实用示例" class="headerlink" title="实用示例"></a>实用示例</h2><p><strong>实例：1. 仅找出Linux命令的类型</strong><br>描述：-t选项仅找出Linux命令的类型。例如别名，它不显示被别名的内容。如果该命令找不到，你将在终端中看不到任何内容。<br>命令：<br><code>type -t ls</code><br><code>type -t mkdir</code><br><code>type -t pwd</code><br><code>type -t if</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/type/type-t.png" alt=""></p>
<p><strong>实例：2. 找出命令的绝对路径</strong><br>描述：-p选项可以找出给定Linux命令的绝对路径，这与which命令很像。如果给定的命令是别名、内建命令或是函数，则不会打印任何内容。在这种情况下，-P选项将强制查找路径查找。<br>命令：<br><code>type -p date</code><br><code>type -p cat</code><br><code>type -p pwd</code><br><code>type -P pwd</code><br><code>which pwd</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/type/type-p-P.png" alt=""></p>
<p><strong>实例：3. 显示命令的所有信息</strong><br>描述：-a选项显示命令的所有信息，包括给定命令的类型及其绝度路径。<br>命令：<br><code>type -a ls</code><br><code>type -a echo</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/type/type-a.png" alt=""></p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-touch.html</loc>
    <lastmod>2018-06-28T15:01:13.212Z</lastmod>
    <data>
        <display>
        <title>Linux touch命令用法详解</title>
        <pubTime>2018-06-14T05:12:08.000Z</pubTime>   
         <content><p>touch命令用来创建文件，也可以更改和修改一个文件的时间戳。<br><a id="more"></a></p>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>touch命令用来创建文件，也可以更改和修改一个文件的时间戳。Linux中的每个文件都与时间戳相关联，而且每个文件都存储上次访问时间，上次修改时间，上次更改时间的信息。因为，无论何时创建一个新文件，访问或者修改现有文件，时间戳都会被自动更新。</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/touch/touch-man.png" alt=""></p>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>touch [选项] [参数]</code></p>
<h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><p>Linux中的文件有三个时间：</p>
<ul>
<li>access time（atime）：访问时间，对一次文件的内容就会更新。例如cat，vi/vim，cp，touch命令。</li>
<li>modification time（mtime）：修改时间，对文件内容修改一次就会更新。例如touch，vi/vim命令。</li>
<li>status time（ctime）：状态改动时间。通过chmod/chown/chgrp等命令更改一次文件属性，通过touch准确地修改时间等，这个时间就会更新。例如mv，touch，chmod/chown/chgrp，vi/vim等命令。</li>
</ul>
<p>touch命令选项：</p>
<ul>
<li>-a，只改变访问时间。</li>
<li>-c，如果文件不存在，那就不创建。</li>
<li>-d，更新访问时间和修改时间。</li>
<li>-m，只改变修改时间。</li>
<li>-r，将参照文件ref_file相应的时间戳作为指定文件file时间戳的新值。</li>
<li>-t，用指定的时间创建文件，格式是[[CC]YY]MMDDhhmm[.SS]。CCYY的范围在1969~2068之内。SS为秒数，范围在0~61之间，这样可以处理闰秒。由于系统的限制，早于1970年1月1日的时间是错误的。</li>
</ul>
<h3 id="示例：1-创建空文件"><a href="#示例：1-创建空文件" class="headerlink" title="示例：1. 创建空文件"></a>示例：1. 创建空文件</h3><p>描述：若文件不存在，使用touch命令可以轻松地创建一个空文件，或是创建多个。如果文件已存在，那么文件的3个时间：修改时间（mtime）、状态改动时间（ctime）和访问时间（atime）都会被更新为当前时间。stat命令可以查看文件时间。<br>命令：<br><code>touch my_one</code><br><code>stat my_one</code><br><code>touch my_one my_two my_three</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/touch/touch.png" alt=""></p>
<h3 id="示例：2-只改变文件的修改时间（mtime）和状态改动时间（ctime）"><a href="#示例：2-只改变文件的修改时间（mtime）和状态改动时间（ctime）" class="headerlink" title="示例：2. 只改变文件的修改时间（mtime）和状态改动时间（ctime）"></a>示例：2. 只改变文件的修改时间（mtime）和状态改动时间（ctime）</h3><p>描述：只改变my_three文件的修改时间为当前时间，同时状态改动时间会在命令执行后更新为当前时间。这个操作并不需要修改文件内容。-m选项只更改文件的修改时间。<br>命令：<code>touch -m my_three</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/touch/touch-m.png" alt=""></p>
<h3 id="示例：3-只改变文件访问时间（atime）和状态改动时间（ctime）"><a href="#示例：3-只改变文件访问时间（atime）和状态改动时间（ctime）" class="headerlink" title="示例：3. 只改变文件访问时间（atime）和状态改动时间（ctime）"></a>示例：3. 只改变文件访问时间（atime）和状态改动时间（ctime）</h3><p>描述：只改变my_three文件的访问时间为当前时间，同时状态改动时间会在命令执行后更新为当前时间。如果文件不存在，会创建新的空文件。-a选项只更改文件的访问时间。<br>命令：<code>touch -a my_three</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/touch/touch-a.png" alt=""></p>
<h3 id="示例：4-指定文件的访问时间和修改时间"><a href="#示例：4-指定文件的访问时间和修改时间" class="headerlink" title="示例：4. 指定文件的访问时间和修改时间"></a>示例：4. 指定文件的访问时间和修改时间</h3><p>描述：同时设置文件的访问时间和修改时间为指定时间，同时会更新状态改变时间为当前命令执行后的时间。如果文件不存在，会创建新的空文件。-d选项同时改变文件的访问时间和修改时间。<br>命令：<code>touch -d &quot;2018-06-14 14:00:00&quot; my_three</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/touch/touch-d.png" alt=""></p>
<p>描述：将my_three文件的访问时间和修改时间修改成两天前。touch还支持像date命令那样修改文件的时间。<br>命令：<code>touch -d &quot;2 days ago&quot; my_three</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/touch/touch-d-date.png" alt=""></p>
<h3 id="示例：5-避免创建新文件"><a href="#示例：5-避免创建新文件" class="headerlink" title="示例：5. 避免创建新文件"></a>示例：5. 避免创建新文件</h3><p>描述：更新atime、ctime、mtime，如果文件不存在，-c选项不会创建新的文件。<br>命令：<code>touch -c leena</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/touch/touch-a.png" alt=""></p>
<h3 id="示例：6-使用另一个文件的时间戳"><a href="#示例：6-使用另一个文件的时间戳" class="headerlink" title="示例：6. 使用另一个文件的时间戳"></a>示例：6. 使用另一个文件的时间戳</h3><p>描述：-r选项将my_three的时间戳作为my_two文件的时间戳的新值，这两个文件有相同的时间戳。<br>命令：<code>touch -r my_three my_two</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/touch/touch-r.png" alt=""></p>
<h3 id="示例：7-使用指定的时间戳创建一个文件"><a href="#示例：7-使用指定的时间戳创建一个文件" class="headerlink" title="示例：7. 使用指定的时间戳创建一个文件"></a>示例：7. 使用指定的时间戳创建一个文件</h3><p>描述：将my_four文件的时间戳指定为1997年6月14日17点00分55秒。时间格式是[[CC]YY]MMDDhhmm[.SS]。<br>命令：<code>touch -t 199706141700.55 my_four</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/touch/touch-t.png" alt=""></p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-tee.html</loc>
    <lastmod>2018-06-28T15:01:13.211Z</lastmod>
    <data>
        <display>
        <title>Linux tee命令用法详解</title>
        <pubTime>2018-06-09T10:15:07.000Z</pubTime>   
         <content><p>tee命令把输出的一个副本输送到标准输出，另一个副本拷贝到相应的文件中。</p>
<a id="more"></a>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>tee [选项] [文件]</code></p>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>tee命令把输出的一个副本输送到标准输出，另一个副本拷贝到相应的文件中。<br>tee命令从标准输入中复制到每一个文件，并输出到标准输出。</p>
<h2 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h2><ul>
<li>-a或–append：向文件中重定向时使用追加模式。</li>
<li>-i或–ignore-interrupts：忽略中断（interrupt）信号。</li>
</ul>
<h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2><p><strong>实例：1. 输出的标准输出的同时输出到文件</strong><br>描述：将ping的内容输出到标准输出，同时也输出到output.txt文件中。<br>命令：<code>ping yahoo.com | tee output.txt</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/tee/tee.png" alt=""></p>
<p><strong>实例：2. 向输出文件追加内容</strong><br>描述：将ping的内容输出到标准输出，同时也以追加的方式输出到output.txt文件中。<br>命令：<code>ping baidu.com | tee -a output.txt</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/tee/tee-a.png" alt=""></p>
<p><strong>实例：3. 输出到标准输出两次</strong><br>描述：输出到标准输出两次，-表示标准输出。<br>命令：<code>ls | tee -</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/tee/tee--.png" alt=""></p>
<p><strong>实例：4. 同时写入多个文件</strong><br>描述：将ping的内容输出到标准输出两次，同时也以追加的方式输出到output.txt文件中。<br>命令：<code>ping yahoo.com | tee output.txt log.txt -</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/tee/tee-multiple--.png" alt=""></p>
<p><strong>实例：5. tee命令的输出内容直接作为另一个命令的输入内容</strong><br>描述：列出当前目录下的文件，同时写入到output.txt文件中，然后再将内容通过管道重定向给wc命令统计行数。<br>命令：<code>ls -ilh | tee output.txt | wc -l</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/tee/tee-other.png" alt=""></p>
<p><strong>实例：6. 提升文件写入权限</strong><br>描述：使用Vim编辑器打开文件，并且做了跟多更改，然后当尝试保存修改会得到一个报错，那是一个root所拥有的文件，意味着你需要使用sudo权限保存修改。在Vim内使用tee命令来提高权限。<br>命令：<code>:w !sudo tee %</code><br>上述命令需要输入root密码，然后就可以保存修改了。</p>
<p><strong>实例：7. 忽视中断</strong><br>描述：-i命令行选项使tee命令忽视通常由ctrl+c组合键发起的中断信号（SIGINT）。tee命令可以优雅的退出。<br>命令：<code>ping yahoo.com | tee -i output.txt</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/tee/tee-i.png" alt=""></p>
<p><strong>实例：8. 把标准错误输出也保存到文件</strong><br>描述：使用tee命令把标准错误输出也保存到文件。<br>命令：<code>ls &quot;*&quot; 2&gt;&amp;1 | tee ls.txt</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/tee/tee-error.png" alt=""></p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-tar.html</loc>
    <lastmod>2018-06-28T15:01:13.210Z</lastmod>
    <data>
        <display>
        <title>Linux tar命令用法详解</title>
        <pubTime>2018-06-02T08:26:43.000Z</pubTime>   
         <content><p>tar命令用来归档多个文件或目录到单个归档文件中，并且归档文件可以进一步使用gzip或者bzip2等技术进行压缩。</p>
<a id="more"></a>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>tar [OPTION...] [FILE]...</code></p>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>Tar（Tape ARchive，磁带归档的缩写，最初设计用于将文件打包到磁带上，现在大都使用它来实现备份某个分区或者某些重要的目录）是类Unix系统中使用最广泛的命令，用于归档多个文件或目录到单个归档文件中，并且归档文件可以进一步使用gzip或者bzip2等技术进行压缩，还能保留其文件权限。换言之，tar命令也可以用于备份：先是归档多个文件和目录到一个单独的tar文件或归档文件，然后在需要之时将tar文件中的文件和目录释放出来。</p>
<h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><p>表:tar命令选项</p>
<table>
<thead>
<tr>
<th style="text-align:left">选项</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-A或–catenate</td>
<td style="text-align:left">新增文件到以存在的备份文件</td>
</tr>
<tr>
<td style="text-align:left">-B</td>
<td style="text-align:left">设置区块大小</td>
</tr>
<tr>
<td style="text-align:left">-c或–create</td>
<td style="text-align:left">建立新的备份文件</td>
</tr>
<tr>
<td style="text-align:left">-C&lt;目录&gt;</td>
<td style="text-align:left">这个选项用在解压缩，若要在特定目录解压缩，可以使用这个选项</td>
</tr>
<tr>
<td style="text-align:left">-d</td>
<td style="text-align:left">记录文件的差别</td>
</tr>
<tr>
<td style="text-align:left">-x或–extract或–get</td>
<td style="text-align:left">从备份文件中还原文件</td>
</tr>
<tr>
<td style="text-align:left">-t或–list</td>
<td style="text-align:left">列出备份文件的内容</td>
</tr>
<tr>
<td style="text-align:left">-z或–gzip或–ungzip</td>
<td style="text-align:left">通过gzip指令处理备份文件</td>
</tr>
<tr>
<td style="text-align:left">-Z或–compress或–uncompress</td>
<td style="text-align:left">通过compress指令处理备份文件</td>
</tr>
<tr>
<td style="text-align:left">-f&lt;备份文件&gt;或–file=&lt;备份文件&gt;</td>
<td style="text-align:left">指定备份文件</td>
</tr>
<tr>
<td style="text-align:left">-v或–verbose</td>
<td style="text-align:left">显示指令执行过程</td>
</tr>
<tr>
<td style="text-align:left">-r</td>
<td style="text-align:left">添加文件到已经压缩的文件</td>
</tr>
<tr>
<td style="text-align:left">-u</td>
<td style="text-align:left">添加改变了和现有的文件到已经存在的压缩文件</td>
</tr>
<tr>
<td style="text-align:left">-j</td>
<td style="text-align:left">支持bzip2解压文件</td>
</tr>
<tr>
<td style="text-align:left">-v</td>
<td style="text-align:left">显示操作过程</td>
</tr>
<tr>
<td style="text-align:left">-l</td>
<td style="text-align:left">文件系统边界设置</td>
</tr>
<tr>
<td style="text-align:left">-k</td>
<td style="text-align:left">保留原有文件不覆盖</td>
</tr>
<tr>
<td style="text-align:left">-m</td>
<td style="text-align:left">保留文件不被覆盖</td>
</tr>
<tr>
<td style="text-align:left">-w</td>
<td style="text-align:left">确认压缩文件的正确性</td>
</tr>
<tr>
<td style="text-align:left">-p或–same-permissions</td>
<td style="text-align:left">用原来的文件权限还原文件</td>
</tr>
<tr>
<td style="text-align:left">-P或–absolute-names</td>
<td style="text-align:left">文件名使用绝对名称，不移除文件名称前的“/”号</td>
</tr>
<tr>
<td style="text-align:left">-N</td>
<td style="text-align:left">&lt;日期格式&gt;或–newer=&lt;日期时间&gt;只将较指定日期更新的文件保存到备份文件里</td>
</tr>
<tr>
<td style="text-align:left">–exclude=&lt;范本样式&gt;</td>
<td style="text-align:left">排除符合范本样式的文件</td>
</tr>
</tbody>
</table>
<h2 id="什么是“文件压缩”？"><a href="#什么是“文件压缩”？" class="headerlink" title="什么是“文件压缩”？"></a>什么是“文件压缩”？</h2><p>我们知道，在计算机系统中文件的内容是信息，信息实际上就是一个由值0和值1组成的位（又称为比特）序列，8个位被组织成一组，称为字节。一般来说，一个字节的8位是没有被全部利用起来的，这些没有被利用的位占据了一个文件的大部分空间，而“文件压缩”就是利用复杂的计算方式，将这些没有利用的空间腾出来，以让文件占用的空间变小。</p>
<p>简单来说，「压缩」就是把文件中没有完全填满的空间填满。压缩过的文件不能直接被操作系统所使用，因此，「解压缩」就是指把文件「还原」为未压缩之前的模样。压缩前与压缩后的文件所占用的磁盘空间大小之比就是「压缩比」。</p>
<!-- more -->
<h2 id="常见的压缩格式"><a href="#常见的压缩格式" class="headerlink" title="常见的压缩格式"></a>常见的压缩格式</h2><p>Linux 中常见的压缩格式有：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*.Z：compress 程序压缩的文件。</span><br><span class="line">*.gz：gzip 程序压缩的文件。</span><br><span class="line">*.bz2：bzip2 程序压缩的文件。</span><br><span class="line">*.tar：tar 程序打包的数据，没有被压缩过。</span><br><span class="line">*.tar.gz（简写为 .tgz）：tar 程序打包的数据，经过 gzip 的压缩。</span><br><span class="line">*.tar.bz2（简写为 .tbz2）：tar 程序打包的数据，经过 bzip2 的压缩。</span><br></pre></td></tr></table></figure>
<p>上面的压缩格式中，主要是gzip和bzip2两个压缩命令，它们是GNU计划的中的一部分，在此之前是compress命令，但它已经不再流行了。bzip2比gzip的压缩比很好，不过bzip2通常只能针对一个文件来压缩和解压缩。如果是这样的话，压缩整个开发环境目录就太繁琐了。</p>
<p>因此tar命令就出现了，tar不是一个 “压缩命令”，而是一个“打包命令”。也就是说，tar可以把很多文件「打包」成一个文件，甚至连目录也可以进行打包。一开始tar命令的确是不支持压缩的功能，后来GNU计划为了提供给使用者更方便并且更加强大的压缩与打包功能，就把整个tar与压缩的功能结合在一起了。</p>
<p>仅仅打包起来的tar文件俗称tarfile文件，经过压缩的tar文件叫做tarball文件。</p>
<h2 id="全能的-tar-命令"><a href="#全能的-tar-命令" class="headerlink" title="全能的 tar 命令"></a>全能的 tar 命令</h2><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p>tar可以将多个目录或文件打成一个大文件，同时支持gzip/bzip2</p>
<p>归档：tar {-c} [option…] -f destination source<br>追加归档：tar {-r | -u} -f source [option…] destination<br>解压：tar {-t | -x} -f source [option…] -C destination</p>
<p>最简单的使用 tar 只要记住下面的方式：</p>
<ul>
<li>压缩：tar -jcv -f filename.tar.bz2 被压缩的文件或目录名称</li>
<li>查看文件：tar -jtv -f filename.tar.bz2 </li>
<li>解压缩：tar -jxv -f filename.tar.gz -C 解压到哪里</li>
</ul>
<p>filename.tar.bz2 既然tar不是一个压缩命令，是个打包命令，那么是如何做到打包并压缩的呢？我们先来看一下tar命令的常用参数：</p>
<h3 id="模式参数"><a href="#模式参数" class="headerlink" title="模式参数"></a>模式参数</h3><ul>
<li>-c（–create）：创建新的归档文件。</li>
<li>-r（–append）：与-c一样创建新的归档文件，但这是以追加的模式，只能往未压缩过的归档文件中追加，要求指定-f参数。</li>
<li>-t：查看归档文件的内容含有哪些文件，可以看到包括文件名在内的详细信息。</li>
<li>-u：与-r一样，但是只往归档文件添加更新的文件。</li>
<li>-x：解压缩归档文件。如果一个归档文件里有相同文件名的多个文件，那么会先将每个文件解压，最新的文件将覆盖旧的文件。</li>
</ul>
<p>tar分为三种模式，-c，-r，-u三个一类，为归档/压缩模式，在该模式下，tar会递归遍历指定目录下的所有目录和文件，并创建归档文件。-x表示为去归档/解压模式，-t表示为打印列表模式。</p>
<h3 id="通用参数"><a href="#通用参数" class="headerlink" title="通用参数"></a>通用参数</h3><ul>
<li>-j：使用bzip2的支持进行压缩和解压缩，文件名最好为*.tar.bz2。</li>
<li>-z：使用gzip的支持进行压缩和解压缩，文件名最好为*.tar.gz。</li>
<li>-v：在压缩/解压缩的过程中，将正在处理的文件名显示出来。</li>
<li>-f：后面接被处理的文件名，最好把-f单独出来写一个参数。</li>
<li>-C：指定解压的目录。</li>
<li>-p：保留文件的原始信息，权限等等</li>
<li>-P：解压时保留绝对路径。</li>
<li>–exclude=FILE：在打包压缩的时候，不要将FILE打包。</li>
</ul>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>本文讲解的案例在CentOS Linux release 7.4.1708下进行。</p>
<h3 id="打包并创建归档文件"><a href="#打包并创建归档文件" class="headerlink" title="打包并创建归档文件"></a><strong>打包并创建归档文件</strong></h3><p>示例：打包一个目录。<br>描述：将/home/nijun这个目录打包，生成文件名为command-18-06-02.tar的归档文件，保存在当前目录下。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> tar -cv -f command-18-06-02.tar /home/nijun</span><br><span class="line">/home/nijun/.bash_logout</span><br><span class="line">/home/nijun/.bashrc</span><br><span class="line">/home/nijun/apache-tomcat-9.0.7.tar.gz</span><br><span class="line">/home/nijun/.bash_profile</span><br><span class="line">/home/nijun/nginx-1.10.1.tar.gz</span><br></pre></td></tr></table></figure></p>
<p>-c（–create的简写）参数，这表示为指定的文件或者目录创建新的归档文件。使用-f指定读取或者写入的归档文件，可以用-表示标准输入或者标准输出，-f可以与其他参数连起来写，必须保证f参数后面跟的是文件名。但不推荐这样写，因为参数调换顺序是允许的，如果写成-cfv就会导致压缩后的文件名变成了v。</p>
<p>使用-v表示生成详细的输出，在压缩或者解压的模式中，会列出正在向归档文件读或者写的文件名字。</p>
<h3 id="创建tar-gz归档文件"><a href="#创建tar-gz归档文件" class="headerlink" title="创建tar.gz归档文件"></a><strong>创建tar.gz归档文件</strong></h3><p>示例：打包并且使用gzip压缩。<br>描述：将/home/nijun/images目录下的所有文件以及目录中的文件打包，并用gzip进行压缩，生成名为MyImages-18-06-02.tar.gz的归档文件，放在当前目录下。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> tar -zcv -f MyImages-18-06-02.tar.gz /home/nijun/images</span><br><span class="line">OR</span><br><span class="line"><span class="meta">#</span> tar -zcv -f MyImages-18-06-02.tar.tgz /home/nijun/images</span><br><span class="line">/home/nijun/images/alejandro-gonzalez-17189.jpg</span><br><span class="line">/home/nijun/images/brooke-lark-275181.jpg</span><br><span class="line">/home/nijun/images/brenda-godinez-228181.jpg</span><br><span class="line">/home/nijun/images/artur-rutkowski-97622.jpg</span><br><span class="line">/home/nijun/images/ben-white-138743.jpg</span><br></pre></td></tr></table></figure>
<p>-z表示要使用gzip支持来压缩或者解压文件，注意gzip的压缩的文件格式最好写成tar.gz。（注：tar.gz 和 tgz 是同一个意思）</p>
<h3 id="打包压缩排除某些文件"><a href="#打包压缩排除某些文件" class="headerlink" title="打包压缩排除某些文件"></a><strong>打包压缩排除某些文件</strong></h3><p>示例：打包压缩并排除某些文件。<br>描述：将/home/nijun/images目录下，排除brooke-lark-275181.jpg和ben-white-138743.jpg之外的所有文件打包，并用gzip进行压缩，生成名为MyImages-18-06-02.tar.gz的归档文件，放在当前目录下。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> tar -czv -f MyImages-18-06-02.tar.gz --exclude=./brooke-lark-275181.jpg --exclude=./ben-white-138743.jpg /home/nijun/images</span><br><span class="line">/home/nijun/images/alejandro-gonzalez-17189.jpg</span><br><span class="line">/home/nijun/images/brenda-godinez-228181.jpg</span><br><span class="line">/home/nijun/images/artur-rutkowski-97622.jpg</span><br></pre></td></tr></table></figure>
<h3 id="解压归档文件（默认）"><a href="#解压归档文件（默认）" class="headerlink" title="解压归档文件（默认）"></a><strong>解压归档文件（默认）</strong></h3><p>示例：解压，默认解压。<br>描述：将名为MyImages-18-06-02.tar的归档文件解压至当前目录下。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> tar -xvf MyImages-18-06-02.tar</span><br><span class="line">home/nijun/images/alejandro-gonzalez-17189.jpg</span><br><span class="line">home/nijun/images/brenda-godinez-228181.jpg</span><br><span class="line">home/nijun/images/artur-rutkowski-97622.jpg</span><br></pre></td></tr></table></figure>
<p>其中，-x参数表示去解压一个归档文件，如果归档文件中有两个相同名字的文件，那么每一个文件都会被解压出来，然后最新的会覆盖旧的文件。注意这里没有指定-j参数，因为tar看到指定了-x参数，就知道这是解压操作，会自动判断该解压包的压缩类型。</p>
<h3 id="解压归档文件并指定目录"><a href="#解压归档文件并指定目录" class="headerlink" title="解压归档文件并指定目录"></a><strong>解压归档文件并指定目录</strong></h3><p>示例：解压到一个指定目录。<br>描述：将名为MyImages-18-06-02.tar.gz的归档文件解压至一个指定的目录。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> tar -xv -f MyImages-18-06-02.tar -C /home/nijun/public_images</span><br><span class="line">home/nijun/public_images/alejandro-gonzalez-17189.jpg</span><br><span class="line">home/nijun/public_images/brenda-godinez-228181.jpg</span><br><span class="line">home/nijun/public_images/artur-rutkowski-97622.jpg</span><br></pre></td></tr></table></figure>
<h3 id="查看压缩包文件信息"><a href="#查看压缩包文件信息" class="headerlink" title="查看压缩包文件信息"></a><strong>查看压缩包文件信息</strong></h3><p>示例：查看压缩包文件信息。<br>描述：列出MyImages-18-06-02.tar.bz2中的文件信息，-v参数，会生成与ls(1)命令相近的输出。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> tar -tv -f MyImages-18-06-02.tar.gz</span><br><span class="line">OR</span><br><span class="line"><span class="meta">#</span> tar -tv -f MyImages-18-06-02.tar.bz2</span><br><span class="line">-rw-r--r-- root/root   2176861 2018-06-02 21:26 home/nijun/images/alejandro-gonzalez-17189.jpg</span><br><span class="line">-rw-r--r-- root/root   8452524 2018-06-02 21:26 home/nijun/images/brenda-godinez-228181.jpg</span><br><span class="line">-rw-r--r-- root/root   1131986 2018-06-02 21:26 home/nijun/images/artur-rutkowski-97622.jpg</span><br></pre></td></tr></table></figure>
<h3 id="解压单个文件"><a href="#解压单个文件" class="headerlink" title="解压单个文件"></a><strong>解压单个文件</strong></h3><p>示例：解压单个文件。<br>描述：将home/nijun/.bashrc这一个文件从归档文件中提取出来。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> tar -xv -f command-18-06-02.tar home/nijun/.bashrc</span><br><span class="line">home/nijun/.bashrc</span><br></pre></td></tr></table></figure>
<h3 id="解压多个指定的文件"><a href="#解压多个指定的文件" class="headerlink" title="解压多个指定的文件"></a><strong>解压多个指定的文件</strong></h3><p>示例：解压多个指定的文件。<br>描述：将file1、file2等多个文件从归档文件中提取出来，可以用空格隔开多个文件，也可以用通配符的形式。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> tar -zxv -f MyImages-18-06-02.tar.gz "file 1" "file 2"</span><br><span class="line">OR</span><br><span class="line"><span class="meta">#</span> tar -zxv -f MyImages-18-06-02.tar.gz --wildcards '*b*.jpg'</span><br><span class="line">home/nijun/images/brooke-lark-275181.jpg</span><br><span class="line">home/nijun/images/brenda-godinez-228181.jpg</span><br><span class="line">home/nijun/images/ben-white-138743.jpg</span><br><span class="line">home/nijun/images/aleks-dahlberg-274646.jpg</span><br></pre></td></tr></table></figure>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-tail.html</loc>
    <lastmod>2018-06-28T15:01:13.210Z</lastmod>
    <data>
        <display>
        <title>Linux tail命令用法详解</title>
        <pubTime>2018-06-26T03:31:58.000Z</pubTime>   
         <content><p>tail命令用于显示来自文件或者管道结尾（最新实时）的内容。</p>
<a id="more"></a>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>tail命令用于显示来自文件或者管道结尾（最新实时）的内容。默认情况下，tail命令显示文件的最后10行内容。支持多文件处理，在输出每个文件之前都有一个标识文件名的标题。如果未指定文件，或者文件被指定为破折号「-」，则tail命令从标准输入中读取。</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/tail/tail-man.png" alt=""></p>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>tail [选项] [文件(s)]</code></p>
<h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><ul>
<li>–retry：即是在tail命令启动时，文件不可访问或者文件稍后变得不可访问，都始终尝试打开文件。使用此选项时需要与选项“——follow=name”连用；</li>
<li>-c<n>或——bytes=<n>：输出文件尾部的N（N为整数）个字节内容；</n></n></li>
<li>-f&lt;name/descriptor&gt;或；–follow<nameldescript>：显示文件最新追加的内容。“name”表示以文件名的方式监视文件的变化。“-f”与“-fdescriptor”等效；</nameldescript></li>
<li>-F：与选项“-follow=name”和“–retry”连用时功能相同；</li>
<li>-n<n>或——line=<n>：输出文件的尾部N（N位数字）行内容。</n></n></li>
<li>–pid=&lt;进程号&gt;：与“-f”选项连用，当指定的进程号的进程终止后，自动退出tail命令；</li>
<li>-q或——quiet或——silent：当有多个文件参数时，不输出各个文件名；</li>
<li>-s&lt;秒数&gt;或——sleep-interal=&lt;秒数&gt;：与“-f”选项连用，指定监视文件变化时间隔的秒数；</li>
<li>-v或——verbose：当有多个文件参数时，总是输出各个文件名；</li>
<li>–help：显示指令的帮助信息；</li>
<li>–version：显示指令的版本信息。tail -f  /usr/local/webserver/tomcat/logs/catalina.out</li>
</ul>
<h2 id="实用示例"><a href="#实用示例" class="headerlink" title="实用示例"></a>实用示例</h2><p><strong>实例：1. 查看文件的后十行</strong><br>描述：查看words文件的后10行。默认情况下，tail命令显示文件的最后10行内容。<br>命令：<code>tail letter</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/tail/tail.png" alt=""></p>
<p><strong>实例：2. 限制要显示的行数</strong><br>描述：显示words文件的最后3行。-n选项限制要显示的行数。<br>命令：<br><code>tail -n 3 letter</code><br><code>tail -3 letter</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/tail/tail-n.png" alt=""></p>
<p>描述：显示words文件的最后1000行。可以在num后加上后缀，例如：b，KB，K等等。<br>命令：<code>tail -n 1K /usr/share/dict/words</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/tail/tail-n-1K.png" alt=""></p>
<p><strong>实例：3. 监视日志文件</strong><br>描述：显示words文件（日志文件）的最后10行，并且一直监视它，一旦有新的内容加入，就立即打印出来。-f选项将监视文件的更新。<br>命令：<code>tail -f /usr/share/dict/words</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/tail/tail-f-CTRL-C.png" alt=""><br>注意：tail -f将一直监视着文件，要停止它，按CTRL+C。</p>
<p><strong>实例：4. 监视日志文件并只输出指定内容</strong><br>描述：tail将监视access.log文件，它将通过管道传送access.log的最后十行和任何新加入到文件中的行给grep。grep读取从tail传送过来的输出，只打印出包含IP地址10.10.10.10的那些行。<br>命令：<code>tail -f access.log | grep 10.10.10.10</code></p>
<p><strong>实例：5. 监视日志文件并指定刷新间隔</strong><br>描述：tail将监视access.log文件，其监视的时间间隔为5秒。<br>命令：<code>tail -f -s 5 access.log</code></p>
<p><strong>实例：6. tail -f的代替命令</strong><br>描述：与tail -f效果相同的命令是less。使用下面命令打开文件后，按下shift+f，就与tail -f的效果相同了。<br>命令：<br><code>less /usr/share/dict/words</code><br>press<code>SHIFT+F</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/tail/tail-less.png" alt=""></p>
<p><strong>实例：7. 限制要显示的字节数</strong><br>描述：显示words文件的最后32个字节。-c选项限制显示的字节数。<br>命令：<code>tail -c 32 /usr/share/dict/words</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/tail/tail-c.png" alt=""></p>
<p><strong>实例：8. 显示多个文件</strong><br>描述：显示多个文件的前十行，同时标题会显示哪个文件正在显示。<br>命令：<code>tail /usr/share/dict/words /usr/share/dict/propernames</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/tail/tail-multi-file.png" alt=""></p>
<p><strong>实例：9. 多个文件不显示标题</strong><br>描述：显示多个文件的前3行，不显示正在显示文件的标题。<br>命令：<code>tail -n 3 -q /usr/share/dict/words /usr/share/dict/propernames</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/tail/tail-q.png" alt=""></p>
<p><strong>实例：10. 与管道配合使用</strong><br>描述：显示/etc/目录下的最近修改的前5个文件或文件夹。tail命令可以接受其他命令通过管道传送过来的信息。<br>命令：<code>cat letter | tail -n 5</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/tail/tail-pipe.png" alt=""></p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-sort.html</loc>
    <lastmod>2018-06-28T15:01:13.209Z</lastmod>
    <data>
        <display>
        <title>Linux sort命令用法详解</title>
        <pubTime>2018-06-16T10:40:13.000Z</pubTime>   
         <content><p>sort命令用于对单个或多个文本文件内容进行排序。</p>
<a id="more"></a>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>sort命令将许多不同的域按不同的列顺序分类。sort命令以空格作为字段分隔符，将一行分割为多个关键字对文件进行排序。需要注意的是sort命令并不对文件内容进行实际的排序(即文件内容没有修改)，只是将文件内容按有序输出。</p>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>sort -cmu -o output_file [other_options] +pos1 +pos2 input_files</code></p>
<h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><ul>
<li>-c：检查文件是否已经按照顺序排序。</li>
<li>-m：将几个排序号的文件进行合并。</li>
<li>-u：删除所有重复行。</li>
<li>-o&lt;输出文件&gt;：将排序后的结果存入指定的文件。</li>
<li>-b：忽略每行前面开始出的空格字符。</li>
<li>-h：人类可阅读的格式。</li>
<li>-d：排序时，处理英文字母、数字及空格字符外，忽略其他的字符。</li>
<li>-f：排序时，将小写字母视为大写字母。</li>
<li>-i：排序时，除了040至176之间的ASCII字符外，忽略其他的字符。</li>
<li>-M：将前面3个字母依照月份的缩写进行排序。</li>
<li>-n：按照数值的大小排序。</li>
<li>-r：以相反的顺序来排序。</li>
<li>-t&lt;分隔字符&gt;：指定排序时所用的栏位分隔字符。</li>
<li>+&lt;起始栏位&gt;-&lt;结束栏位&gt;：以指定的栏位来排序，范围由起始栏位到结束栏位的前一栏位。</li>
</ul>
<h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2><p><strong>实例：0. 测试文件</strong><br>描述：下面是device_sort的清单，包含了用户设备登录次数情况，各域为：（1）用户ID，（2）手机系统版本，（3）登录访问次数。域分隔符为冒号。域号从0开始，第1列用户ID为域0，即分类键0，以此类推。</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/sort/sort-origin-file.png" alt=""></p>
<p><strong>实例：1. 文件是否已分类</strong><br>描述：检查device文件的域用户ID是否已经有序。sort不加任何参数默认以域0（也就是第一列）进行排序，-c选项检查文件是否已按某种顺序排序。<br>命令：<code>sort -c device</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/sort/sort-origin-file.png" alt=""></p>
<p><strong>实例：2. 使用分隔符</strong><br>描述：将device用:作为域分隔符分类，然后按第一列进行排序。实际上读文件时sort操作将行中各域进行比较，这里只返回基于第一域sort的结果。<br>命令：<code>sort -t : device</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/sort/sort-t.png" alt=""></p>
<p><strong>实例：3. 排序求逆</strong><br>描述：反转实例2中的排序结果。这里先按照第一列进行排序，然后反转其结果。<br>命令：<code>sort -t: -r device</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/sort/sort-r.png" alt=""></p>
<p><strong>实例：4.  使用选项k按指定列排序</strong><br>描述：使用选项k指定第1列进行排序。<br>命令：<code>sort -k1 -t: device</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/sort/sort-k.png" alt=""></p>
<p><strong>实例：5. 数值域排序</strong></p>
<p>描述：使用n选项指明对数值内容进行排序，否则会按字符串从第一个字符开始进行比较。<br>命令：<code>sort -nk3 -t: device</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/sort/sort-n.png" alt=""></p>
<p><strong>实例：6. 唯一性排序</strong></p>
<p>描述：使用u选项过滤所有重复的行，每个重复的行只显示一次。<br>命令：<code>sort -u -t: device</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/sort/sort-u.png" alt=""></p>
<p><strong>实例：7. 两个文件进行排序、合并，并且删除重复行</strong></p>
<p>描述：两个文件进行排序、合并，并且删除重复行。<br>命令：<code>sort -u device device2</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/sort/sort-u-merge.png" alt=""></p>
<p><strong>实例：8. pos用法</strong></p>
<p>格式：<code>F[.C][OPTS][,F[.C][OPTS]]</code><br>解释：指定排序域开始和结束的位置，F是字段的序号，C是字符的序号，两者初始都是1，结束位置可以不指定，默认是到行结束位置。如果-t和-b选项都没有指定，那么字段中的字符从前面的空白开始计数。OPTS由一个或多个单个字母排序的选项[bdfgiMhnRrV]，它们将重写全局排序选项，如果没有排序键被指定，sort就会以一整行作为键。-b选项去除每个键的前导空白。</p>
<p>假设有五列字段。<br>-k 2：表示从第二列开始到最后一列作为排序的关键字。<br>-k 2,5：表示从第二列开始到第五列作为排序的关键字。<br>-k 2,2：表示仅以第二列作为排序的关键字。<br>-k 4 -k 5：-k5是多余的。<br>-k 2,2 -k 1,1：先以第二列进行排序，再以第一列排序。<br>-k 2.2,2.5 -k 4.3,4.5：先以第二列的第二个字符开始到第五个字符进行排序，然后先以第四列的第三个字符开始到第五个字符进行排序。</p>
<p>格式：<code>sort +field_number .characters_in</code><br>描述：从第三列的第二个字符开始排序。<br>命令：<code>sort -k3.2 -t: device</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/sort/sort-pos.png" alt=""></p>
<p>描述：对/root目录执行ls -l的命令，其结果通过管道传递给sort进行排序，先以第二列排序，然后第五列，最后是第九列倒序。<br>命令：<code>ls -l /root | sort -k 2,2n -k 5,5n -r -k 9,9</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/sort/sort-k-pos.png" alt=""></p>
<p><strong>实例：9. head和tail与sort配合使用</strong></p>
<p>格式：<code>sort +field_number .characters_in</code><br>描述：以第三列的数值形式进行排序，从结果中抽取前3条和倒数3条记录。<br>命令：<br><code>sort -nk3 -t: device | head -3</code><br><code>sort -nk3 -t: device | tail -3</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/sort/sort-head-tail.png" alt=""></p>
<p><strong>实例：10. awk与sort配合使用</strong></p>
<p>描述：将sort结果用awk进行加一点附加信息。<br>命令：<code>sort -nk3 -t: device | tail -1 | awk -F: &#39;{print $1&quot;--&quot;$2&quot;--&quot;$3}&#39;</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/sort/sort-awk.png" alt=""></p>
<p><strong>实例：11. 两个输入文件进行sort，然后把它们连接成一行</strong><br>描述：创建两个文件，并用数据填充，然后对这两个文件排序并连接。<br>命令：<br><code>echo -e &quot;5 Reliable\n2 Fast\n3 Secure\n1 open-source\n4 customizable&quot; &gt; file1.txt</code><br><code>echo -e &quot;3 RedHat\n1 Debian\n5 Ubuntu\n2 Kali\n4 Fedora&quot; &gt; file2.txt</code><br><code>join &lt;(sort -n file1.txt) &lt;(sort file2.txt)
1 open-source Debian</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/sort/sort-join.png" alt=""></p>
<p><strong>实例：12. 将两个分类文件合并</strong></p>
<p>描述：device_sorted和device_sorted2是两个已排好序的文件，文件合并前，它们必须以被分类。<br>命令：<code>sort -t: -m -k1 device_sorted device_sorted2</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/sort/sort-merge.png" alt=""></p>
<p><strong>实例：13. 按照月份顺序进行排序</strong></p>
<p>描述：M选项对month.txt文件按照月份顺序进行排序。sort命令需要至少3个字符来确认月份名称。<br>命令：<code>sort -M month.txt</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/sort/sort-M.png" alt=""></p>
<p><strong>实例：14. 把数据整理成方便人们阅读的形式</strong></p>
<p>描述：-h选项将把数据整理成方便人们阅读的形式，比如1K、2M、3G、2T，这里面的K、G、M、T代表千、兆、吉、梯。<br>命令：<code>ls -lh /root | sort -h -k5</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/sort/sort-h.png" alt=""></p>
<p><strong>实例：15. 随机化结果</strong><br>描述：-R选项将结果进行hash随机化排序。<br>命令：<code>ls -lh /root | sort -k5 -R</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/sort/sort-Random.png" alt=""></p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-stat.html</loc>
    <lastmod>2018-06-28T15:01:13.209Z</lastmod>
    <data>
        <display>
        <title>Linux stat命令用法详解</title>
        <pubTime>2018-06-20T17:14:22.000Z</pubTime>   
         <content><p>stat命令用来显示文件或文件系统的状态。</p>
<a id="more"></a>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>stat命令用来显示文件或文件系统的状态。stat命令从文件的索引节点获取信息，它们包括文件类型的信息，八进制访问权限和人类可读形式的权限，SELinux安全上下文字符串，文件创建时间，上次访问时间，上次数据修改时间，上次状态改变时间以及Epoch以来的秒数等等。因此，stat命令的输出信息比ls命令的输出信息要更详细。见touch命令。</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/stat/stat-man.png" alt=""></p>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p>stat [OPTION]… FILE…</p>
<h2 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h2><ul>
<li>-c或–format：使用特定或自定义格式而不是默认格式，在每一行结束之后打印一个新行。</li>
<li>-L：支持符号连接。</li>
<li>-f：显示文件系统状态而非文件状态。</li>
<li>–printf：类似于format，但它能够解释反斜线转义，并关闭后续换行符的打印，可以手动添加\n打印新行。</li>
<li>-t：以简洁方式输出信息。</li>
<li>–help：显示指令的帮助信息。</li>
<li>–version：显示指令的版本信息。</li>
</ul>
<h2 id="命令实例"><a href="#命令实例" class="headerlink" title="命令实例"></a>命令实例</h2><h3 id="stat显示更多信息"><a href="#stat显示更多信息" class="headerlink" title="stat显示更多信息"></a><strong>stat显示更多信息</strong></h3><p>描述：使用ls命令的长列表模式和使用stat命令查看文件信息。<br>命令：<br><code>ls -l names.txt</code><br><code>stat names.txt</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/stat/stat-ls.png" alt=""><br>说明：图中，文件状态改变和文件修改的日期/时间是相同的，而访问时间是更近的时间。文件使用了8个块，以两个格式显示文件权限，八进制（0664）和-rw-rw-r–格式。在第三行显示索引为393342，文件没有其他硬链接（Links:1）。这个文件是一个常规文件。</p>
<h3 id="显示文件系统的状态"><a href="#显示文件系统的状态" class="headerlink" title="显示文件系统的状态"></a><strong>显示文件系统的状态</strong></h3><p>描述：f选项将显示指定文件系统的信息。需要提供一个目录/文件系统作为参数。<br>命令：<br><code>stat -f /dev/vda1</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/stat/stat-file-system.png" alt=""></p>
<h3 id="重命名改变状态时间"><a href="#重命名改变状态时间" class="headerlink" title="重命名改变状态时间"></a><strong>重命名改变状态时间</strong></h3><p>描述：重命名文件将会改变状态时间，即ctime。文件创建的时候ctime存储文件的创建日期和时间，修改文件后就变为记录文件的状态改动时间。<br>命令：<br><code>mv fairy fairy2</code><br><code>stat fairy2</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/stat/stat-mv.png" alt=""></p>
<h3 id="查看多个文件"><a href="#查看多个文件" class="headerlink" title="查看多个文件"></a><strong>查看多个文件</strong></h3><p>描述：使用通配符查看多个文件的状态。<br>命令：<code>stat t*</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/stat/stat-wild.png" alt=""></p>
<h3 id="用ls获取额外的信息"><a href="#用ls获取额外的信息" class="headerlink" title="用ls获取额外的信息"></a><strong>用ls获取额外的信息</strong></h3><p>描述：ls的u选项显示最后访问时间，c选项显示状态改动时间。<br>命令：<br><code>ls -lu fairy2</code><br><code>ls -lc fairy2</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/stat/stat-ls-u-c.png" alt=""></p>
<h3 id="用ls获取额外的信息-1"><a href="#用ls获取额外的信息-1" class="headerlink" title="用ls获取额外的信息"></a><strong>用ls获取额外的信息</strong></h3><p>描述：ls的u选项显示最后访问时间，c选项显示状态改动时间。<br>命令：<br><code>ls -lu fairy2</code><br><code>ls -lc fairy2</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/stat/stat-ls-u-c.png" alt=""></p>
<h3 id="显示指定的信息"><a href="#显示指定的信息" class="headerlink" title="显示指定的信息"></a><strong>显示指定的信息</strong></h3><p>--format选项可以单独显示具体的信息。可用的选项如下：</p>
<p>表: 文件的格式序列</p>
<table>
<thead>
<tr>
<th style="text-align:left">选项</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">%a</td>
<td style="text-align:left">八进制表示的访问权限</td>
</tr>
<tr>
<td style="text-align:left">%A</td>
<td style="text-align:left">可读格式表示的访问权限</td>
</tr>
<tr>
<td style="text-align:left">%b</td>
<td style="text-align:left">分配的块数（参见%B）</td>
</tr>
<tr>
<td style="text-align:left">%B</td>
<td style="text-align:left">%b参数显示的每个块的字节数</td>
</tr>
<tr>
<td style="text-align:left">%d</td>
<td style="text-align:left">十进制表示的设备号</td>
</tr>
<tr>
<td style="text-align:left">%D</td>
<td style="text-align:left">十六进制表示的设备号</td>
</tr>
<tr>
<td style="text-align:left">%f</td>
<td style="text-align:left">十六进制表示的Raw模式</td>
</tr>
<tr>
<td style="text-align:left">%F</td>
<td style="text-align:left">文件类型</td>
</tr>
<tr>
<td style="text-align:left">%g</td>
<td style="text-align:left">属主的组ID</td>
</tr>
<tr>
<td style="text-align:left">%G</td>
<td style="text-align:left">属主的组名</td>
</tr>
<tr>
<td style="text-align:left">%h</td>
<td style="text-align:left">硬连接数</td>
</tr>
<tr>
<td style="text-align:left">%i</td>
<td style="text-align:left">Inode号</td>
</tr>
<tr>
<td style="text-align:left">%n</td>
<td style="text-align:left">文件名</td>
</tr>
<tr>
<td style="text-align:left">%N</td>
<td style="text-align:left">如果是符号链接，显示器所链接的文件名</td>
</tr>
<tr>
<td style="text-align:left">%o</td>
<td style="text-align:left">I/O块大小</td>
</tr>
<tr>
<td style="text-align:left">%s</td>
<td style="text-align:left">全部占用的字节大小</td>
</tr>
<tr>
<td style="text-align:left">%t</td>
<td style="text-align:left">十六进制的主设备号</td>
</tr>
<tr>
<td style="text-align:left">%T</td>
<td style="text-align:left">十六进制的副设备号</td>
</tr>
<tr>
<td style="text-align:left">%u</td>
<td style="text-align:left">属主的用户ID</td>
</tr>
<tr>
<td style="text-align:left">%U</td>
<td style="text-align:left">属主的用户名</td>
</tr>
<tr>
<td style="text-align:left">%x</td>
<td style="text-align:left">最后访问时间</td>
</tr>
<tr>
<td style="text-align:left">%X</td>
<td style="text-align:left">最后访问时间，自Epoch开始的秒数</td>
</tr>
<tr>
<td style="text-align:left">%y</td>
<td style="text-align:left">最后修改时间</td>
</tr>
<tr>
<td style="text-align:left">%Y</td>
<td style="text-align:left">最后修改时间，自Epoch开始的秒数</td>
</tr>
<tr>
<td style="text-align:left">%z</td>
<td style="text-align:left">最后改变时间</td>
</tr>
<tr>
<td style="text-align:left">%Z</td>
<td style="text-align:left">最后改变时间，自Epoch开始的秒数</td>
</tr>
</tbody>
</table>
<p>表: 文件系统的格式序列</p>
<table>
<thead>
<tr>
<th style="text-align:left">选项</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">%a</td>
<td style="text-align:left">普通用户可用的块数</td>
</tr>
<tr>
<td style="text-align:left">%b</td>
<td style="text-align:left">文件系统的全部数据块数</td>
</tr>
<tr>
<td style="text-align:left">%c</td>
<td style="text-align:left">文件系统的全部文件节点数</td>
</tr>
<tr>
<td style="text-align:left">%d</td>
<td style="text-align:left">文件系统的可用文件节点数</td>
</tr>
<tr>
<td style="text-align:left">%f</td>
<td style="text-align:left">文件系统的可用节点数</td>
</tr>
<tr>
<td style="text-align:left">%C</td>
<td style="text-align:left">SELinux的安全上下文</td>
</tr>
<tr>
<td style="text-align:left">%i</td>
<td style="text-align:left">十六进制表示的文件系统ID</td>
</tr>
<tr>
<td style="text-align:left">%l</td>
<td style="text-align:left">文件名的最大长度</td>
</tr>
<tr>
<td style="text-align:left">%n</td>
<td style="text-align:left">文件系统的文件名</td>
</tr>
<tr>
<td style="text-align:left">%s</td>
<td style="text-align:left">块大小（用于更快的传输）</td>
</tr>
<tr>
<td style="text-align:left">%S</td>
<td style="text-align:left">基本块大小（用于块计数）</td>
</tr>
<tr>
<td style="text-align:left">%t</td>
<td style="text-align:left">十六进制表示的文件系统类型</td>
</tr>
<tr>
<td style="text-align:left">%T</td>
<td style="text-align:left">可读格式表示的文件系统类型</td>
</tr>
</tbody>
</table>
<p>描述：–format选项可以一次显示所有指定的信息。例如只查看文件类型，和硬链接数。<br>命令：<br><code>stat --format=%F %h fairy2</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/stat/stat-F-h.png" alt=""></p>
<p>描述：以两种格式查看权限，查看文件的最后访问时间，自Epoch开始的秒数，还查看了文件的属主。–format或-c选项可以打印特定或自定义格式，在每一行结束之后打印一个新行。<br>命令：<br><code>stat --format=%a fairy2</code><br><code>stat --format=%A fairy2</code><br><code>stat --format=%X fairy2</code><br><code>stat --format=%U fairy2</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/stat/stat-format.png" alt=""></p>
<p>描述：以两种格式查看权限，查看文件的最后访问时间，自Epoch开始的秒数，还查看了文件的属主。–printf类似于format，但它能够解释反斜线转义，并关闭后续换行符的打印，可以手动添加\n打印新行。<br>命令：<br><code>stat --printf=&quot;%a\n&quot; fairy2</code><br><code>stat --printf=&quot;%A\n&quot; fairy2</code><br><code>stat --printf=&quot;%X\n&quot; fairy2</code><br><code>stat --printf=&quot;%U\n&quot; fairy2</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/stat/stat-printf.png" alt=""></p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-scp.html</loc>
    <lastmod>2018-06-28T15:01:13.208Z</lastmod>
    <data>
        <display>
        <title>Linux scp命令用法详解</title>
        <pubTime>2018-06-11T06:16:41.000Z</pubTime>   
         <content><p>scp命令用来在服务器之间安全传输文件，scp传输是加密的。</p>
<a id="more"></a>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>top source_file_name username@destination_host:destination_folder</code></p>
<p>一句话解释：以username用户拷贝source_file到destination_host上的destination_folder里。</p>
<h2 id="命令作用"><a href="#命令作用" class="headerlink" title="命令作用"></a>命令作用</h2><p>scp命令是安全拷贝协议Secure Copy Protocol的缩写，和众多Linux/Unix使用者所熟知的拷贝（cp）命令一样。scp的使用方式类似于cp命令，cp命令将一个文件或文件夹从本地操作系统的一个位置（源）拷贝到目标位置（目的），而scp用来将文件或文件夹从网络上的一个主机拷贝到另一个主机当中去。</p>
<h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><ul>
<li>-1：强制scp命令使用协议ssh1。</li>
<li>-2：强制scp命令使用协议ssh2。</li>
<li>-4：强行使用IPV4地址。</li>
<li>-6：强行使用IPV6地址。</li>
<li>-B：采取批量模式（避免询问密码或口令）。</li>
<li>-C：启用压缩。通过指明-C参数来开启压缩模式。</li>
<li>-c：加密方式<ul>
<li>选择在传输过程中用来加密的加密方式 这个选项会被直接传递到ssh。</li>
</ul>
</li>
<li>-F：ssh配置<ul>
<li>给ssh指定一个用来替代默认配置的配置文件。这个选项会被直接传递到ssh。</li>
</ul>
</li>
<li>-i：identity_file从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。  </li>
<li>-l：限速<ul>
<li>限制命令使用的带宽，默认单位是Kbit/s。</li>
</ul>
</li>
<li>-P：端口<ul>
<li>指定需要的连接的远程主机的端口。  </li>
<li>注意，这个选项使用的是一个大写的“P”，因为小写的“-p”已经用来保留目标文件的时间和模式相关信息。</li>
</ul>
</li>
<li>-p：保留文件原来的修改时间，访问时间以及权限模式。</li>
<li>-q：静默模式：不显示来自ssh命令的进度信息，警告和诊断信息。</li>
<li>-r：递归拷贝整个目录。<ul>
<li>注意，scp命令在树形遍历的时候同样会跟随符号连接，复制所连接的文件。</li>
</ul>
</li>
<li>-v：详细模式。scp和ssh将会打印出处理过程中的调试信息。这可以帮助你调试连接、认证和配置方面的问题。</li>
</ul>
<h2 id="实用示例"><a href="#实用示例" class="headerlink" title="实用示例"></a>实用示例</h2><p><strong>实例：1. 从远程服务器复制文件到本地目录</strong><br>描述：从远程39.106.99.114机器上的/root/develop/目录中下载scp.tar.gz文件到本地/root/目录中。<br>命令：<code>scp root@39.106.99.114:/root/develop/scp.tar.gz /root/</code></p>
<p><strong>实例：2. 从远程服务器复制目录到本地</strong><br>描述：从远程39.106.99.114机器上的/root/develop/目录中下载所有文件到本地/root/目录中。<br>命令：<code>scp -r root@39.106.99.114:/root/develop/ /root/</code></p>
<p><strong>实例：3. 上传本地目录文件到远程服务器</strong><br>描述：将本地当前目录中的scp.tar.gz文件上传到39.106.99.114机器上的/root/develpop/目录中。<br>命令：<code>scp scp.tar.gz root@39.106.99.114:/root/develop/</code></p>
<p><strong>实例：4. 上传本地目录到远程服务器</strong><br>描述：将本地root/dev/目录中所有文件上传到39.106.99.114机器上的/root/develop/目录中。<br>命令：<code>scp -r /root/dev/ root@39.106.99.114:/root/develop/</code></p>
<h2 id="基础示例"><a href="#基础示例" class="headerlink" title="基础示例"></a>基础示例</h2><p><strong>实例：1. v：得到认证、调试等相关细节信息</strong><br>描述：-v选项，可以得到认证、调试等相关细节信息。<br>命令：<code>scp -v index.html root@39.106.99.114:/root/scp/</code></p>
<p><strong>实例：2. r：递归拷贝整个目录</strong><br>描述：-r选项，递归拷贝整个目录。<br>命令：<code>scp -r ./iweeek root@39.106.99.114:/root/scp/</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/scp/scp-r.png" alt=""></p>
<p><strong>实例：3. q：静默模式</strong><br>描述：-q选项，可以关闭进度信息以及警告和诊断信息。<br>命令：<code>scp -r -q ./iweeek root@39.106.99.114:/root/scp/</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/scp/scp-q.png" alt=""></p>
<p><strong>实例：4. l：限制命令使用的带宽</strong><br>描述：-l选项来指定命令使用的带宽，在此我们将速度限制为512Kbit/s，也就是64KB/s。因为带宽是以千比特/秒（kbps）表示的，而8比特等于1字节。<br>命令：<code>scp -l 512 index.html root@39.106.99.114:/root/scp/</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/scp/scp-l.png" alt=""></p>
<p><strong>实例：5. p：保留原始信息</strong><br>描述：-p选项，可以保留目标文件的更新时间，访问时间和权限模式。<br>命令：<code>scp -c blowfish index.html root@39.106.99.114:/root/</code></p>
<p><strong>实例：6. P：指定端口</strong><br>描述：ssh默认使用22端口，-p选项可以指定所需的端口号。<br>命令：<code>scp -P 2222 index.html root@39.106.99.114:/root/</code></p>
<p><strong>实例：7. C：开启压缩模式</strong><br>描述：-C选项开启压缩模式，scp会不停压缩所传输的文件来节省传输过程中的带宽和时间。它特别之处在于压缩是在网络传输中进行，当文件传到目标服务器时，它会变回压缩之前的原始大小。<br>压缩的方法不是适用于所有文件。当源文件已经被压缩过了，那就没办法再压缩很多了。诸如那些像.zip，.rar，pictures和.iso的文件，用-C参数就没什么意义。<br>命令：<code>scp -C index.html root@39.106.99.114:/root/</code></p>
<p><strong>实例：8. c：选择加密数据的加密方式</strong><br>描述：scp默认使用AES-128的加密方式，可以通过-c参数来指定其他的加密方式。<br>命令：<code>scp -c blowfish index.html root@39.106.99.114:/root/</code></p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-route.html</loc>
    <lastmod>2018-06-28T15:01:13.208Z</lastmod>
    <data>
        <display>
        <title>Linux route命令用法详解</title>
        <pubTime>2018-06-12T07:23:32.000Z</pubTime>   
         <content><p>route命令用来显示并设置Linux内核中的网络路由表。</p>
<a id="more"></a>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>显示并设置Linux内核中的网络路由表，它设置的路由主要是静态路由。要实现两个不同的子网之间的通信，需要一台连接两个网络的路由器，或者同时位于两个网络的网关来实现。</p>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>route [选项] [参数]</code></p>
<h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><ul>
<li>-A：设置地址类型；</li>
<li>-C：打印将Linux核心的路由缓存；</li>
<li>-v：详细信息模式；</li>
<li>-n：不执行DNS反向查找，直接显示数字形式的IP地址；</li>
<li>-e：netstat格式显示路由表；</li>
<li>-net：到一个网络的路由表；</li>
<li>-host：到一个主机的路由表。</li>
</ul>
<h2 id="命令选项-1"><a href="#命令选项-1" class="headerlink" title="命令选项"></a>命令选项</h2><ul>
<li>Add：增加指定的路由记录；</li>
<li>Del：删除指定的路由记录；</li>
<li>Target：目的网络或目的主机；</li>
<li>gw：设置默认网关；</li>
<li>mss：设置TCP的最大区块长度（MSS），单位MB；</li>
<li>window：指定通过路由表的TCP连接的TCP窗口大小；</li>
<li>dev：路由记录所表示的网络接口。</li>
</ul>
<h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2><p><strong>实例：1. 显示当前路由</strong><br>描述：在显示当前路由。-n选项不执行DNS反向查找，直接显示数字形式的IP地址。<br>命令：<br><code>route</code><br><code>route -n</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/route/route-n.png" alt=""></p>
<p>其中Flags为路由标志，标记当前网络节点的状态，Flags标志说明：</p>
<ul>
<li>U Up表示此路由当前为启动状态。</li>
<li>H Host，表示此网关为一主机。</li>
<li>G Gateway，表示此网关为一路由器。</li>
<li>R Reinstate Route，使用动态路由重新初始化的路由。</li>
<li>D Dynamically,此路由是动态性地写入。</li>
<li>M Modified，此路由是由路由守护程序或导向器动态修改。</li>
<li>! 表示此路由当前为关闭状态。</li>
</ul>
<p><strong>实例：2. 添加网关/设置网关</strong><br>描述：增加一条到达244.0.0.0的路由。<br>命令：<code>route add -net 224.0.0.0 netmask 240.0.0.0 dev eth0</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/route/route-add.png" alt=""></p>
<p><strong>实例：3. 屏蔽一条路由</strong><br>描述：增加一条屏蔽的路由，目的地址为224.x.x.x将被拒绝。<br>命令：<code>route add -net 224.0.0.0 netmask 240.0.0.0 dev eth0</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/route/route-reject.png" alt=""></p>
<p><strong>实例：4. 删除路由记录</strong><br>描述：删除刚才创建的两条记录。<br>命令：<br><code>route del -net 224.0.0.0 netmask 240.0.0.0</code><br><code>route del -net 224.0.0.0 netmask 240.0.0.0 reject</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/route/route-del.png" alt=""></p>
<p><strong>实例：5. 删除和添加设置默认网关</strong><br>描述：不建议在连接到远程主机的时候删除默认网关，会导致断开远程主机的连接。不过在命令行下命令不会永久保存，当网卡重启或者机器重启之后，该路由就失效了。<br>命令：<br><code>route del default gw 172.16.63.253</code><br><code>route add default gw 172.16.63.253</code></p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-ps.html</loc>
    <lastmod>2018-06-28T15:01:13.207Z</lastmod>
    <data>
        <display>
        <title>Linux ps命令用法详解</title>
        <pubTime>2018-06-04T02:09:39.000Z</pubTime>   
         <content><p>ps命令用来列出系统中当前运行进程的快照。</p>
<a id="more"></a>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>ps命令（Process Status）用来列出系统中当前运行的那些进程的快照。使用该命令可以确定有哪些进程正在运行和运行的状态、进程是否结束、进程有没有僵死、哪些进程占用了过多的资源等等。如果想要动态地显示进程信息，就可以使用top命令</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/ps/ps-man.png" alt=""></p>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>ps [options]</code></p>
<h2 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h2><p>表: ps命令选项</p>
<table>
<thead>
<tr>
<th style="text-align:left">选项</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-A</td>
<td style="text-align:left">所有的不同process均显示出来，与-e具有同样的效果</td>
</tr>
<tr>
<td style="text-align:left">-a</td>
<td style="text-align:left">不与terminal有关的所有process</td>
</tr>
<tr>
<td style="text-align:left">-u</td>
<td style="text-align:left">有效使用者（effectiveuser）相关的process</td>
</tr>
<tr>
<td style="text-align:left">-e</td>
<td style="text-align:left">列出所有程序，与-A效果相同</td>
</tr>
<tr>
<td style="text-align:left">-x</td>
<td style="text-align:left">通常与a这个参数一起使用，可列出完整的信息</td>
</tr>
<tr>
<td style="text-align:left">-l</td>
<td style="text-align:left">较长、较详细的输出该该PID的信息</td>
</tr>
<tr>
<td style="text-align:left">-j</td>
<td style="text-align:left">工作的格式(jobsformat)</td>
</tr>
<tr>
<td style="text-align:left">-f</td>
<td style="text-align:left">做一个更为完整的输出</td>
</tr>
</tbody>
</table>
<p>ps命令支持三种使用的语法格式:</p>
<ol>
<li>UNIX 风格，选项可以组合在一起，并且选项前必须有“-”连字符</li>
<li>BSD 风格，选项可以组合在一起，但是选项前不能有“-”连字符</li>
<li>GNU 风格的长选项，选项前有两个“-”连字符</li>
</ol>
<h2 id="命令实例"><a href="#命令实例" class="headerlink" title="命令实例"></a>命令实例</h2><h3 id="不加参数执行ps命令"><a href="#不加参数执行ps命令" class="headerlink" title="不加参数执行ps命令"></a><strong>不加参数执行ps命令</strong></h3><p>描述：结果显示4列信息，这些信息并未排序。<br>命令：<code>ps</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ps/ps.png" alt=""><br>表: ps命令默认的列表所代表的含义</p>
<table>
<thead>
<tr>
<th style="text-align:left">选项</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">PID</td>
<td style="text-align:left">运行着的命令(CMD)的进程编号</td>
</tr>
<tr>
<td style="text-align:left">TTY</td>
<td style="text-align:left">命令所运行的位置（终端）</td>
</tr>
<tr>
<td style="text-align:left">TIME</td>
<td style="text-align:left">运行着的该命令所占用的CPU处理时间</td>
</tr>
<tr>
<td style="text-align:left">CMD</td>
<td style="text-align:left">该进程所运行的命令</td>
</tr>
</tbody>
</table>
<h3 id="显示更多信息"><a href="#显示更多信息" class="headerlink" title="显示更多信息"></a><strong>显示更多信息</strong></h3><p>描述：ps默认只显示属于当前用户这次登录的PID与相关信息，-l参数显示更详细的信息。<br>命令：<code>ps -l</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ps/ps-l.png" alt=""></p>
<p>-l显示信息的每个字段具体含义如下：</p>
<ul>
<li>F：代表这个程序的旗标（process flags），说明这个程序的命令用法详解权限，常见的有：<ul>
<li>若为4表示此程序的权限为root。</li>
<li>若为1表示此子程序仅进行复制（fork）而没有实际执行（exec）。</li>
</ul>
</li>
<li>S：代表这个程序的状态（STAT)，主要的状态有：<ul>
<li>R（Running)：该程序正在运行中。</li>
<li>S（Sleep）：该程序目前正在睡眠状态（idle），但可以被唤醒（signal）。</li>
<li>D：不可被唤醒的睡眠状态，例如，程序可能在等待I/O的情况。</li>
<li>T：停止状态（stop），可能是在工作控制（背景暂停）或出错（traced）状态。</li>
<li>Z：僵尸（Zombie）状态，程序已经终止但却无法被移除到内存外。</li>
</ul>
</li>
<li>UID/PID/PPID：代表程序被该UID所拥有/程序的PID号码/程序的父程序PID号码。</li>
<li>C：代表CPU使用率，单位为百分比。</li>
<li>PRI/NI：Priority/Nice的缩写，代表程序被CPU所执行的优先顺序，数值越小代表程序越快被CPU执行。</li>
<li>ADDR/SZ/WCHAN：都与内存有关，ADDR是kernel function，指出该程序在内存的哪个部分，如果是个running的程序，一般就会显示“-”，SZ代表程序用掉多少内存，WCHAN表示目前程序是否运行中，同样的，若为-表示正在运行中。</li>
<li>TTY：登陆者的终端机位置，若为远端登陆则使用动态终端接口（pts/n）。</li>
<li>TIME：使用掉的CPU时间，此程序实际花费CPU运行的时间，而不是系统时间。</li>
<li>CMD：command的缩写，造成此程序的出发程序是什么。</li>
</ul>
<h3 id="显示所有进程"><a href="#显示所有进程" class="headerlink" title="显示所有进程"></a><strong>显示所有进程</strong></h3><p>描述：使用-a参数，-a代表all，加上x参数会显示没有控制终端的进程。可以结合less命令和管道来使用。<br>命令：<br><code>ps -ax</code><br><code>ps -ax | less</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ps/ps-ax.png" alt=""><br>说明：如果用户名的长度大于8个字符，那么ps只会显示UID。</p>
<h3 id="显示所有进程信息，连同命令行"><a href="#显示所有进程信息，连同命令行" class="headerlink" title="显示所有进程信息，连同命令行"></a><strong>显示所有进程信息，连同命令行</strong></h3><p>描述：-e参数与-A参数一样显示所有进程信息，-a将不显示命令行。-f和u选项可以显示进程的具体信息。<br>命令：<code>ps efu</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ps/ps-efu.png" alt=""></p>
<h3 id="显示用户进程"><a href="#显示用户进程" class="headerlink" title="显示用户进程"></a><strong>显示用户进程</strong></h3><p>描述：查看root用户的进程信息。-u选项后跟用户名过滤所属用户的进程，多个用户名用逗号分隔。<br>命令：<code>ps -u root</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ps/ps-u.png" alt=""></p>
<h3 id="通过进程名和PID过滤进程"><a href="#通过进程名和PID过滤进程" class="headerlink" title="通过进程名和PID过滤进程"></a><strong>通过进程名和PID过滤进程</strong></h3><p>描述：-C选项可以显示指定进程名的进程信息。<br>命令：<code>ps -C agetty</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ps/ps-C.png" alt=""></p>
<p>描述：-p选项通过进程ID显示进程，通过逗号分隔来指定多个进程ID。<br>命令：<code>ps -f -p 423,32535,2087</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ps/ps-f-p.png" alt=""></p>
<p>描述：使用grep查找，因为-C选项必须提供精确的进程名，它并不能通过部分名字或者通配符查找。<br>命令：<code>ps -ef | grep ssh</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ps/ps-grep.png" alt=""></p>
<p>描述：只列出指定进程名的进程ID。<br>命令：<code>ps -C agetty -o pid=</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ps/ps-C-o.png" alt=""></p>
<p>描述：-f选项查看格式化的信息列表。<br>命令：<code>ps -f -C agetty</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ps/ps-f-C.png" alt=""></p>
<p>描述：只打印进程ID为27815的进程名字。<br>命令：<code>ps -q 27815 -o comm=</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ps/ps-f-C.png" alt=""></p>
<h3 id="通过cpu和内存使用来过滤进程"><a href="#通过cpu和内存使用来过滤进程" class="headerlink" title="通过cpu和内存使用来过滤进程"></a><strong>通过cpu和内存使用来过滤进程</strong></h3><p>描述：列出目前所有的正在内存当中的程序。ps aux会依照PID的顺序来排序显示，只显示排在前面的一部分数据。</p>
<p>命令：<code>ps aux | less</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ps/ps-aux-less.png" alt=""></p>
<p>描述：根据CPU使用来排序。默认的结果集是依照PID的顺序来排序显示的，可以通过–sort命令来排序。<br>命令：<code>ps -aux --sort -pcpu | less</code></p>
<p>描述：根据内存使用来排序。默认的结果集是依照PID的顺序来排序显示的，可以通过–sort命令来排序。<br>命令：<code>ps -aux --sort -pmem | less</code></p>
<p>描述：将前两个命令合并，通过管道显示前10个结果。<br>命令：<br><code>ps -aux --sort -pcpu,+pmem | head -n 10</code><br><code>ps -aux --sort=-pcpu,+pmem | head -n 10</code></p>
<p>描述：ps aux会依照PID的顺序来排序显示，只显示排在前面的一部分数据。<br>命令：<code>ps -aux &gt; out.txt</code></p>
<p>表: ps命令显示字段的意义</p>
<table>
<thead>
<tr>
<th style="text-align:left">选项</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">User</td>
<td style="text-align:left">该process属于哪个使用者账号</td>
</tr>
<tr>
<td style="text-align:left">PID</td>
<td style="text-align:left">该process使用掉的CPU资源百分比</td>
</tr>
<tr>
<td style="text-align:left">%CPU</td>
<td style="text-align:left">该process所占用的实体内存百分比</td>
</tr>
<tr>
<td style="text-align:left">%MEM</td>
<td style="text-align:left">该process所占用的实体内存百分比</td>
</tr>
<tr>
<td style="text-align:left">VSZ</td>
<td style="text-align:left">该process使用掉的虚拟内存量（KBytes）</td>
</tr>
<tr>
<td style="text-align:left">RSS</td>
<td style="text-align:left">该process占用的固定的内存量（KBytes）</td>
</tr>
<tr>
<td style="text-align:left">TTY</td>
<td style="text-align:left">该process是在哪个终端机上面运行，若与终端机无关则显示？另外，tty1-tty6是本机上面的登陆者程序，如果是pts/0等等的，则表示为网络连接的主机程序</td>
</tr>
<tr>
<td style="text-align:left">STAT</td>
<td style="text-align:left">该process目前的状态，状态显示与ps -l的S旗标相同（R/S/T/Z）</td>
</tr>
<tr>
<td style="text-align:left">START</td>
<td style="text-align:left">该process被触发启动的时间</td>
</tr>
<tr>
<td style="text-align:left">TIME</td>
<td style="text-align:left">该process实际使用CPU运行的时间</td>
</tr>
<tr>
<td style="text-align:left">COMMAND</td>
<td style="text-align:left">该process的实际指令是什么</td>
</tr>
</tbody>
</table>
<h3 id="格式化输出root用户（真实的或有效的UID）创建的进程"><a href="#格式化输出root用户（真实的或有效的UID）创建的进程" class="headerlink" title="格式化输出root用户（真实的或有效的UID）创建的进程"></a><strong>格式化输出root用户（真实的或有效的UID）创建的进程</strong></h3><p>描述：查看由root用户运行的进程以及其他相关信息。<br>命令：<code>ps -U root -u root u</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ps/ps-U-u.png" alt=""><br>说明：<br>-U参数按真实用户ID(RUID)筛选进程，它会从用户列表中选择真实用户名或 ID。真实用户即实际创建该进程的用户。<br>-u参数用来筛选有效用户ID（EUID）。<br>最后的u参数用来决定以针对用户的格式输出，由User，PID，%CPU，%MEM，VSZ，RSS，TTY，STAT，START，TIME和COMMAND这几列组成。</p>
<h3 id="指定显示的格式"><a href="#指定显示的格式" class="headerlink" title="指定显示的格式"></a><strong>指定显示的格式</strong></h3><p>描述：-o显示指定的格式输出，–sort=-%mem指定以内存倒序的方式显示程序。<br>命令：<code>ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%mem | head</code><br>输出：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%mem | head</span><br><span class="line">  PID  PPID CMD                         %MEM %CPU</span><br><span class="line"> 1248  1029 /usr/local/cloudmonitor/jre  3.6  0.4</span><br><span class="line">  690     1 /usr/bin/python -Es /usr/sb  0.8  0.0</span><br><span class="line">  976     1 /usr/local/aegis/aegis_clie  0.6  0.1</span><br><span class="line">  423     1 /usr/lib/polkit-1/polkitd -  0.6  0.0</span><br><span class="line">16409  2099 sshd: root@pts/0             0.3  0.0</span><br><span class="line">15920  2099 sshd: root@pts/2             0.3  0.0</span><br><span class="line">16213  2099 sshd: root@pts/1             0.3  0.0</span><br><span class="line">16451  2099 sshd: root@pts/3             0.3  0.0</span><br><span class="line">  687     1 /usr/sbin/rsyslogd -n        0.2  0.0</span><br></pre></td></tr></table></figure>
<p>描述：显示安全信息，查看谁登录了服务器。能够与-e参数一起使用的关键字是args，cmd，comm，command，fname，ucmd，ucomm，lstart，bsdstart和start。<br>命令：<code>ps -eo pid,user,args</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ps/ps-o.png" alt=""></p>
<h3 id="通过线程过滤进程"><a href="#通过线程过滤进程" class="headerlink" title="通过线程过滤进程"></a><strong>通过线程过滤进程</strong></h3><p>描述：-L选项可以过滤特定进程的线程。<br>命令：<code>ps -L 456</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ps/ps-thread-L.png" alt=""></p>
<h3 id="实时监控进程状态"><a href="#实时监控进程状态" class="headerlink" title="实时监控进程状态"></a>实时监控进程状态</h3><p>描述：每秒刷新一次ps命令，使之动态显示CPU和内存的使用率。<br>命令：<code>watch -n 1 &#39;ps -aux --sort -pmem,-pcpu&#39;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/ps/ps-watch.png" alt=""></p>
<p>描述：每秒刷新一次ps命令，使之动态显示CPU和内存的使用率，显示前20条内容。<br>命令：<code>watch -n 1 &#39;ps -aux --sort -pmem,-pcpu | head -20&#39;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/ps/ps-watch-head.png" alt=""></p>
<p>描述：与top不同的是，ps可以选择想查看的字段。<br>命令：<code>watch -n 1 &#39;ps -U nijun u --sort -pmem,-pcpu | head -20&#39;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/ps/ps-watch-head-user.png" alt=""></p>
<h3 id="树形显示进程"><a href="#树形显示进程" class="headerlink" title="树形显示进程"></a><strong>树形显示进程</strong></h3><p>描述：显示类似程序树的进程信息。<br>命令：<code>ps -axjf</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ps/ps-axjf.png" alt=""></p>
<p>命令：<code>ps -ejH</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ps/ps-ejH.png" alt=""></p>
<p>描述：forest选项会构造一个树形进程层次视图。<br>命令：<code>ps -f --forest -C sshd</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ps/ps-forest.png" alt=""></p>
<p>描述：另一个显示树形结构的命令。<br>命令：<code>pstree</code><br><img src="http://p9xqnn501.bkt.clouddn.com/ps/ps-pstree.png" alt=""></p>
<h3 id="杀掉进程"><a href="#杀掉进程" class="headerlink" title="杀掉进程"></a><strong>杀掉进程</strong></h3><p>描述：用ps -A命令列出所有进程，然后通过管道输入到grep来查找进程/服务，例如ssh。<br>命令：<code>ps -A | grep -i ssh</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ps/ps-A-grep.png" alt=""></p>
<p>描述：使用pgrep和pkill工具更简单。<br>命令：<br><code>pgrep ssh</code><br><code>pgrep -l ssh</code><br>输出：</p>
<p>要找和ssh相关的进程信息:<br><img src="http://p9xqnn501.bkt.clouddn.com/ps/ps-pgrep.png" alt=""><br>为了避免kill掉错误的进程，也可以通过下面命令来匹配进程名称:<br><img src="http://p9xqnn501.bkt.clouddn.com/ps/ps-pgrep-l.png" alt=""><br>然后用pkill杀掉进程，只需要输入想要杀死的资源名称。</p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-read.html</loc>
    <lastmod>2018-06-28T15:01:13.207Z</lastmod>
    <data>
        <display>
        <title>Linux read命令用法详解</title>
        <pubTime>2018-06-10T13:36:30.000Z</pubTime>   
         <content><p>read命令从键盘或文件的某一行文本中读入信息，并将其赋给一个变量。</p>
<a id="more"></a>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>read 变量1 [变量2...]</code></p>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>read命令从键盘或文件的某一行文本中读入信息，并将其赋给一个变量。在read命令后面，如果只指定了一个变量，那么read会把所有的输入赋给该变量，直至遇到第一个文件结束符或回车。如果没有指定变量名，读取的数据将被自动赋值给特定的变量REPLY。</p>
<h2 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h2><ul>
<li>-a：后跟一个变量，该变量会被认为是个数组，然后给其赋值，默认是以空格为分割符。</li>
<li>-d：后面跟一个标志符，其实只有其后的第一个字符有用，作为结束的标志，会举例说  明。</li>
<li>-p：后面跟提示信息，即在输入前打印提示信息。</li>
<li>-e：在输入的时候可以时候命令补全功能。</li>
<li>-n：后跟一个数字，定义输入文本的长度，很实用。</li>
<li>-r：屏蔽\，如果没有该选项，则\作为一个转义字符，有的话\就是个正常的字符了。</li>
<li>-s：安静模式，在输入字符时不再屏幕上显示，例如login时输入密码。</li>
<li>-t：后面跟秒数，定义输入字符的等待时间。</li>
<li>-u：后面跟fd，从文件描述符中读入，该文件描述符可以是exec新开启的。<h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2></li>
</ul>
<p><strong>实例：1. 从标准输入读取输入并赋值给变量</strong><br>描述：从标准输入读取输入并赋值给变量name。<br>命令：<code>read name</code> </p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/read/read-var.png" alt=""></p>
<p><strong>实例：2. 读入并赋给多个变量</strong><br>描述：从标准输入读取输入到第一个空格或者回车，将输入的第一个单词放到变量one中，并将该行其他的输入放在变量two中。<br>命令：<code>read one two</code> </p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/read/read-mul-var.png" alt=""></p>
<p><strong>实例：3. 未指定变量</strong><br>描述：从标准输入读取一行并赋值给特定变量REPLY。<br>命令：<code>read</code> </p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/read/read.png" alt=""></p>
<p><strong>实例：4. 读入并赋给数组</strong><br>描述：把单词清单读入myarray的数组里。<br>命令：<code>read -a myarray</code> </p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/read/read-a.png" alt=""></p>
<p><strong>实例：5. 打印提示</strong><br>描述：打印提示（text），等待输入，并将输入存储在REPLY中。<br>命令：<code>read -p &quot;text&quot;</code> </p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/read/read-a.png" alt=""></p>
<p><strong>实例：6. 允许输入包含反斜杠</strong><br>描述：允许输入包含反斜杠。<br>命令：<code>read -r line</code> </p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/read/read-r.png" alt=""></p>
<p><strong>实例：7. 等待读取</strong><br>描述：指定读取等待时间为3秒。<br>命令：<code>read -t 3</code> </p>
<p><strong>实例：8. 读取指定数量的字符</strong><br>描述：从输入中读取两个字符并存入变量var，不需要按回车读取。<br>命令：<code>read -n 2 var</code> </p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/read/read-n.png" alt=""></p>
<p><strong>实例：9. 指定结束符</strong><br>描述：用定界符“:”结束输入行。<br>命令：<code>read -d &quot;:&quot; var</code> </p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/read/read-d.png" alt=""></p>
<p><strong>实例：10. 终端输入密码不显示密码</strong><br>描述：终端输入密码不显示密码。<br>命令：<code>read -p &quot;输入密码：&quot; -s pwd</code> </p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/read/read-s.png" alt=""></p>
<p>第二种方式<br>脚本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#! /usr/bin/bash</span><br><span class="line">stty -echo</span><br><span class="line">read -p &quot;输入密码：&quot; pwd</span><br><span class="line">stty echo</span><br><span class="line">echo</span><br><span class="line">echo 输入完毕。</span><br></pre></td></tr></table></figure>
<p><img src="http://p9xqnn501.bkt.clouddn.com/read/read-no-echo.png" alt=""></p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-ping.html</loc>
    <lastmod>2018-06-28T15:01:13.206Z</lastmod>
    <data>
        <display>
        <title>Linux ping命令用法详解</title>
        <pubTime>2018-06-12T03:18:24.000Z</pubTime>   
         <content><p>ping命令用来测试主机之间网络的连通性。</p>
<a id="more"></a>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>ping通过发送ICMP ECHO_REQUEST数据包到网络主机，并显示响应情况，可以根据远程主机输出的信息来确定其是否可访问（不是绝对的），有些服务器为了防止通过ping探测到，通过防火墙设置了禁止ping或者在内核参数中禁止ping，这样就不能通过ping确定该主机是否处于开启状态。</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/ping/ping-man.png" alt=""></p>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>ping [选项] [主机名或IP地址]</code></p>
<h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><ul>
<li>-d：使用Socket的SO_DEBUG功能；</li>
<li>-c&lt;完成次数&gt;：设置完成要求回应的次数；</li>
<li>-f：极限检测；</li>
<li>-i&lt;间隔秒数&gt;：指定收发信息的间隔时间；</li>
<li>-I&lt;网络界面&gt;：使用指定的网络界面送出数据包；</li>
<li>-l&lt;前置载入&gt;：设置在送出要求信息之前，先行发出的数据包；</li>
<li>-n：只输出数值；</li>
<li>-p&lt;范本样式&gt;：设置填满数据包的范本样式；</li>
<li>-q：不显示指令执行过程，开头和结尾的相关信息除外；</li>
<li>-r：忽略普通的Routing Table，直接将数据包送到远端主机上；</li>
<li>-R：记录路由过程；</li>
<li>-s&lt;数据包大小&gt;：设置数据包的大小；</li>
<li>-t&lt;存活数值&gt;：设置存活数值TTL的大小；</li>
<li>-v：详细显示指令的执行过程。</li>
</ul>
<h2 id="实用实例"><a href="#实用实例" class="headerlink" title="实用实例"></a>实用实例</h2><p><strong>实例：1. 使用ping命令</strong><br>ping命令不断向网络发送请求，当收到响应时，将收到包含如下信息的输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/ping/ping.png" alt=""></p>
<p>第一行表示每次向域名/IP地址发送指定大小的数据包。接下来的数行是响应信息，具体包含以下字段：</p>
<ul>
<li>接收的字节数</li>
<li>IP地址</li>
<li>序列号</li>
<li>响应的时间</li>
</ul>
<p>最后一行是此次ping命令执行的统计信息：发送6个数据包，其中6个目标主机已收到，丢包率为0，总耗时5000毫秒。</p>
<p><strong>实例：2. 更改ping数据包之间的时间间隔</strong><br>描述：每隔3秒发送一个数据包。-i选项指定包之间的时间间隔。<br>命令：<code>ping -i 3 iweeek.com</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ping/ping-i.png" alt=""></p>
<p><strong>实例：3. 更改ping数据包大小</strong><br>描述：默认情况下，ping数据包中的字节数为56（如果包含8个字节的ICMP头，则为64）。可以使用-s选项更改此值。例如，发送一个1024字节的数据包（1032包括ICMP头）：<br>命令：<code>ping -s 1024 iweeek.com</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ping/ping-s.png" alt=""></p>
<p><strong>实例：4. 发送指定数量的ping数据包</strong><br>描述：ping的默认行为是保持发送数据包知道用户中断为止。使用-c选项可以在发送一定数量的数据包之后强制ping停止执行。例如，在发送3个数据包之后，停止执行：<br>命令：<code>ping -c 3 iweeek.com</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ping/ping-host.png" alt=""></p>
<p><strong>实例：5. 指定时间间隔和发送次数</strong><br>描述：总共花费20秒发出10个数据包，数据包的时间间隔为2秒。<br>命令：<code>ping -i 2 -c 10 127.0.0.1</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ping/ping-i-c.png" alt=""></p>
<p><strong>实例：6. 设置ping的硬超时（最长运行时间）</strong><br>描述：每隔3秒发送一个数据包，最长运行10秒。可见，最多输出发送4个数据包。-w选项指定ping的退出时间，单位是秒。以下是官方解释：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-w deadline</span><br><span class="line">       Specify a timeout, in seconds, before ping exits regardless of how many packets have</span><br><span class="line">       been  sent or received. In this case ping does not stop after count packet are sent,</span><br><span class="line">       it waits either for deadline expire or until count probes are answered or  for  some</span><br><span class="line">       error notification from network.</span><br></pre></td></tr></table></figure>
<p>命令：<code>ping -w 10 -i 3 iweeek.com</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ping/ping-w.png" alt=""></p>
<p><strong>实例：7. 设置ping的软超时</strong><br>描述：-w选项确保ping在截止日期过期后停止，-W选项也可以使ping停止，但仅限于目标端没有响应时。以下是官方解释：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-W timeout</span><br><span class="line">       Time to wait for a response, in seconds. The option affects only</span><br><span class="line">       timeout  in  absence  of any responses, otherwise ping waits for</span><br><span class="line">       two RTTs.</span><br></pre></td></tr></table></figure>
<p>命令：<code>ping -W 3 iweeek.com</code> </p>
<p><strong>实例：8. 使用ping启动大量数据包</strong><br>描述：-f选项可以启动大量数据包。下面是官方的解释：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-f     Flood  ping. For every ECHO_REQUEST sent a period ``.&apos;&apos; is printed,</span><br><span class="line">       while for ever ECHO_REPLY received a backspace  is  printed.   This</span><br><span class="line">       provides a rapid display of how many packets are being dropped.  If</span><br><span class="line">       interval is not given, it sets interval to zero and outputs packets</span><br><span class="line">       as  fast  as they come back or one hundred times per second, which‐</span><br><span class="line">       ever is more.  Only the super-user may use this  option  with  zero</span><br><span class="line">       interval.</span><br></pre></td></tr></table></figure>
<p>命令：<code>ping -f iweeek.com</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ping/ping-f.png" alt=""></p>
<p><strong>实例：9. 在每行之前打印ping时间戳</strong><br>描述：-D选项可以打印unix时间和微妙的组合。<br>命令：<code>ping -D iweeek.com</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ping/ping-D.png" alt=""></p>
<p><strong>实例：10. 不显示具体请求信息</strong><br>描述：-q不显示发送和接收的美和请求之间发生的所有事情，而只是开始和结束时的输出。<br>命令：<code>ping -q iweeek.com</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ping/ping-q.png" alt=""></p>
<p><strong>实例：11. 多参数使用</strong><br>描述：向域名iweeek.com发送5个数据包，每个间隔2秒，数据包大小为1024字节，TTL值为255，测试其连通性。<br>命令：<code>ping -c 5 -i 2 -s 1024 -t 255 iweeek.com</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ping/ping-mul-params.png" alt=""></p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-pipe.html</loc>
    <lastmod>2018-06-28T15:01:13.206Z</lastmod>
    <data>
        <display>
        <title>Linux pipe命令用法详解</title>
        <pubTime>2018-06-09T11:39:41.000Z</pubTime>   
         <content><p>管道能把一个命令的输出传递给另一个命令作为输入。管道用竖杠|表示.</p>
<a id="more"></a>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>命令1|命令2</code></p>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>管道能处理经由前面一个指令传出的正确输出信息，即standard output信息，但对于standard error信息没有直接处理能力。然后传递给下一个命令，作为标准的输入standard input，管道右边的命令必须能够接收标准输入流命令。</p>
<p>能接收标准输入的命令才可以用在管道右边，否则传递过程中数据会被抛弃。常用来接收数据管道命令有：sed，awk，cut，head，top，less，more，wc，join，sort，split等等。</p>
<h2 id="管道命令与重定向的区别"><a href="#管道命令与重定向的区别" class="headerlink" title="管道命令与重定向的区别"></a>管道命令与重定向的区别</h2><ol>
<li><p>左边的命令应该有标准输出 | 右边的命令应该接受标准输入<br>左边的命令应该有标准输出 &gt; 右边只能是文件<br>左边的命令应该需要标准输入 &lt; 右边只能是文件</p>
</li>
<li><p>管道触发两个子进程执行|两边的程序，而重定向时在一个进程内执行。</p>
</li>
</ol>
<h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2><p><strong>实例：1. 重定向</strong><br>描述：重定向符号，右边只能是文件（普通文件，文件描述符，文件设备）。<br>命令：<code>grep -n &#39;Hello&#39; &lt; find.txt</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/pipe/redirect-grep.png" alt=""></p>
<p><strong>实例：1. 管道</strong><br>描述：管道两边都必须是shell命令。<br>命令：<code>cat find.txt | grep -n &#39;Hello&#39;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/pipe/pipe-grep.png" alt=""></p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-more.html</loc>
    <lastmod>2018-06-28T15:01:13.205Z</lastmod>
    <data>
        <display>
        <title>Linux more命令用法详解</title>
        <pubTime>2018-06-13T06:23:45.000Z</pubTime>   
         <content><p>more命令是一个基于vi编辑器文本过滤器，用于一次查看一个或多个文件的内容，它以全屏幕的方式按页显示文本文件的内容，支持vi中的关键字定位操作。</p>
<a id="more"></a>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>more命令用于一次查看一个或多个文件的内容。它支持通过文件向前和向后导航，主要用于查看文件的内容。它还支持搜索字符串或正则表达式，并在文本编辑器中的当前位置打开文件。<br>more内置若干快捷键，常用的有H（获得帮助信息），Enter（向下翻滚一行），空格（向下滚动一屏），Q（退出命令）。<br><img src="http://p9xqnn501.bkt.clouddn.com/more/more-man.png" alt=""></p>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>more [-dlfpcsu] [-num lines] [+/pattern] [+linenum] [file ...]</code></p>
<h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><ul>
<li>-num <em>lines</em>：指定每屏显示的行数。</li>
<li>-d：显示“[press space to continue,’q’ to quit.]”和“[Press ‘h’ for instructions]”。当一个非法的按键按下时，会响铃。</li>
<li>-c：不进行滚屏操作。每次刷新这个屏幕。</li>
<li>-s：将多个空行压缩成一行显示。</li>
<li>-u：禁止下划线。</li>
<li>+<em>num</em>：从指定数字的行开始显示。</li>
<li><strong>+/</strong> <em>正则表达式</em>：指定搜索的正则表达式。</li>
</ul>
<p>该命令一次显示一屏文本，满屏后停下来，并且在屏幕的底部出现一个提示信息，给出至今己显示的该文件的百分比：–More–（XX%）可以用下列不同的方法对提示做出回答：</p>
<ul>
<li><strong>h</strong>, <strong>?</strong>：显示简短的命令汇总帮助信息。</li>
<li>[<em>k</em>]<strong>SPACE</strong>, [<em>k</em>]<strong>z</strong>：显示文本的下一屏内容。</li>
<li>[<em>k</em>]<strong>RETURN</strong>：只显示文本的下一行内容。</li>
<li>[<em>k</em>]<strong>d</strong>,[<em>k</em>]<strong>^D</strong>：滚动k行，初始滚动11行。</li>
<li><strong>q</strong>, <strong>Q</strong>, <strong>^C</strong>：退出more命令。</li>
<li>[<em>k</em>]<strong>s</strong>：跳过k行，默认是1行。</li>
<li>[<em>k</em>]<strong>f</strong>：跳出k个屏幕大小的行，默认是1行。</li>
<li><strong>b</strong>, <strong>^B</strong>：显示上一屏的内容，默认是1行，仅在浏览文件时起作用，通过管道传送过来的是无效的。</li>
<li><strong>‘</strong>：返回到上一次搜索开始的位置。</li>
<li><strong>=</strong>：显示当前行号。</li>
<li>[<em>k</em>]<strong>/</strong> <em>pattern</em>：进入搜索模式，搜索第k次出现匹配正则表达式的地方，默认是第一次出现的地方。按n键继续搜索下一个匹配项。</li>
<li>[<em>k</em>]<strong>n</strong>：搜索第k次出现上次匹配上一次正则表达式的地方，默认是1。</li>
<li><strong>!</strong> <em>command</em>, <strong>:!</strong> <em>command</em>：在子shell中执行命令。</li>
<li><strong>v</strong>：用$EDITOR指定的编辑器打开当前行。如果未指定，则默认用/usr/bin/vi打开。</li>
<li><strong>^L</strong>：与-c选项相同，重绘屏幕，不进行滚屏。</li>
<li>[<em>k</em>]<strong>:n</strong>：如果有多个文件，跳到下一个文件。</li>
<li>[<em>k</em>]<strong>:p</strong>：如果有多个文件，跳到上一个文件。</li>
<li><strong>:f</strong>：显示当前文件的名字和行号。</li>
<li><strong>.</strong>：重复上一次的命令。</li>
</ul>
<h2 id="实用示例"><a href="#实用示例" class="headerlink" title="实用示例"></a>实用示例</h2><p><strong>实例：1. 查看文件的内容</strong><br>描述：打开文件第一页放入可用的屏幕大小内。more移动文件的百分比值将在底部的实时显示。<br>命令：<code>more /usr/share/dict/words</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/more/more.png" alt=""></p>
<p>描述：-3表示每次仅显示3行。-c选项将不进行滚屏操作，而是每次刷新这个屏幕。<br>命令：<code>more -3 -c /usr/share/dict/words</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/more/more-editor.png" alt=""></p>
<p><strong>实例：2. 显示帮助</strong><br>描述：-d显示[press space to continue,’q’ to quit.]提示。按h键或?键可以显示帮助信息。<br>输出:<br><img src="http://p9xqnn501.bkt.clouddn.com/more/more-h.png" alt=""></p>
<p><strong>实例：3. 显示行号</strong><br>描述：按=键，可以显示当前的行号。<br>命令：<code>按=键显示行号</code><br>输出:<br><img src="http://p9xqnn501.bkt.clouddn.com/more/more-=.png" alt=""></p>
<p><strong>实例：4. 查看多个文件的内容</strong><br>描述：如果通过通配符传递给more多个文件的的内容，这将为每个文件打开一个缓冲区并显示第一个文件，并显示一个标题以指示正在显示的文件。<br>命令：<code>more /usr/share/dict/*</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/more/more-n-p.png" alt=""><br>按:n跳到下一个文件的开头。<br><img src="http://p9xqnn501.bkt.clouddn.com/more/more-next-file.png" alt=""><br>按:p要跳回上一个文件的开头。<br><img src="http://p9xqnn501.bkt.clouddn.com/more/more-previous-file.png" alt=""></p>
<p><strong>实例：5. 查看更多</strong><br>描述：<br>按Space键或者z键可以基于当前屏幕的大小向前移动一页。按回车键向前移动一行，或者在按回车键之前按一个数字n，再按回车键，可以直接向前移动n行。按b或者CTRL-B向后移动一页。</p>
<p><strong>实例：6. 打开文件并定位到指定的行</strong><br>描述：打开letter文件，并直接定位到第10行J字母位置。<br>命令：<code>more +10 letter</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/more/more-to-line-number.png" alt=""></p>
<p><strong>实例：7. 打开文件并定位到第一次匹配的位置</strong><br>描述：打开words文件，查找第一次出现以eat开头的单词，并定位到该位置。选项+后跟搜索模式，表示搜索字符串第一次出现的位置，搜索模式应该以/开头，可以是正则表达式。<br>命令：<code>more +/^eat /usr/share/dict/words</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/more/more-wildcard.png" alt=""></p>
<p><strong>实例：8. 如何在more界面下搜索内容</strong><br>描述：在more界面中，按/键后进入搜索模式，输入要搜索的短语，搜索模式接受正则表达式。例如，在words文件中搜索eat，将搜索短语的实例并滚动到页面第一次出现它的位置。<br>如果要继续查找下一个出现该模式的地方，按n键即可。<br>命令：<code>按/键进入搜索模式</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/more/more-search.png" alt=""></p>
<p><strong>实例：9. 编辑正在查看的文件</strong><br>在more界面中，按v键后将会打开文本编辑器，默认的文本编辑器是$EDITOR变量指定的。当修改完成保存后退出，将会回到more界面。如果$EDITOR没有指定编辑器，那么默认的vi将会被使用。</p>
<p>描述：先查看$EDITOR是否已设置，如果没有，在命令行输入export EDITOR=vim可以临时设置。如果要永久设置该变量，请将其添加到.bashrc文件或.zshrc文件中。<br>命令：<br><code>export EDITOR=vim</code><br><code>按v键进入编辑模式</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/more/more-editor.png" alt=""></p>
<p><strong>实例：9. 命令行搜索正则表达式</strong><br>模式：从words文件中搜索单词中含有eat的位置，每次显示3行，从第10行开始搜索，并加以提示。<br>命令：<code>more -d -3 +/eat +10 /usr/share/dict/words</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/more/more-editor.png" alt=""></p>
<p><strong>实例：10. 如何退出more</strong><br>描述：按q、Q键或CTRL-C（中断键）退出more界面，并返回到终端提示符。</p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-netstat.html</loc>
    <lastmod>2018-06-28T15:01:13.205Z</lastmod>
    <data>
        <display>
        <title>Linux netstat命令用法详解</title>
        <pubTime>2018-06-07T01:32:47.000Z</pubTime>   
         <content><p>netstat命令用来查看系统中所有的网络套接字连接情况。</p>
<a id="more"></a>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p>netstat [选项]</p>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>netstat命令用来查看系统中所有的网络套接字连接情况，包括TCP、UDP和Unix套接字。也可以显示路由表，接口状态，masquerade 连接，多播成员（Multicast Memberships）等等。另外，它还可以列出处于监听状态（等待接入请求）的套接字，比如想确认系统中的web服务是否起来，就可以查看80端口有没有打开。</p>
<h2 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h2><ul>
<li>-a或–all：显示所有选项，默认不显示LISTEN相关。</li>
<li>-t或–tcp：(TCP)仅显示TCP相关选项。</li>
<li>-u或–udp：(UDP)仅显示UDP相关选项。</li>
<li>-x或–unix：此参数的效果和指定”-A unix”参数相同。</li>
<li>-n或–numeric：拒绝显示别名，能显示数字的全部转化成数字。</li>
<li>-l或–listening：仅列出有在Listen(监听)的服务状态。</li>
<li>-g或–groups：显示多重广播功能群组组员名单。</li>
<li>-p或–programs：显示建立相关链接的程序名和PID。</li>
<li>-r或–route：显示路由信息，路由表。</li>
<li>-e或–extend：显示扩展信息，例如UID等。</li>
<li>-s或–statistics：按各个协议进行统计。</li>
<li>-c或–continuous：每隔一个固定时间，执行该netstat命令。</li>
<li>-g或–groups：显示多重广播功能群组组员名单。</li>
</ul>
<p>提示：LISTEN和LISTENING的状态只有用-a或者-l才能看到。</p>
<h2 id="输出信息含义"><a href="#输出信息含义" class="headerlink" title="输出信息含义"></a>输出信息含义</h2><p>执行netstat后，其输出结果为</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/netstat/netstat.png" alt=""></p>
<p>netstat的输出结构可以分为两个部分：<br>一个是Active Internet connections，称为有源TCP连接。其中”Recv-Q”和”Send-Q”指的是接收队列和发送队列。<br>另一个是Active UNIX domain sockets，称为有源Unix域套接口(和网络套接字一样，但是只能用于本机通信，性能可以提高一倍)。Proto显示连接使用的协议，RefCnt表示连接到本套接口上的进程号，Types显示套接口的类型，State显示套接口当前的状态，Path表示连接到套接口的其它进程使用的路径名。</p>
<h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2><h3 id="一、列出所有连接（包括监听和未监听的）"><a href="#一、列出所有连接（包括监听和未监听的）" class="headerlink" title="一、列出所有连接（包括监听和未监听的）"></a>一、列出所有连接（包括监听和未监听的）</h3><p><strong>示例：1. 列出当前所有的连接</strong><br>命令：netstat -a<br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/netstat/netstat-a.png" alt=""></p>
<p><strong>示例：2. 列出所有TCP端口</strong><br>命令：netstat -at<br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/netstat/netstat-at.png" alt=""></p>
<p><strong>示例：3. 列出所有UDP端口</strong><br>描述：-u选项查看UDP端口，-x选项查看UNIX端口。<br>命令：netstat -au<br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/netstat/netstat-au.png" alt=""></p>
<h3 id="二、列出所有处于监听状态的-Sockets"><a href="#二、列出所有处于监听状态的-Sockets" class="headerlink" title="二、列出所有处于监听状态的 Sockets"></a>二、列出所有处于监听状态的 Sockets</h3><p><strong>示例：4. 只列出所有监听TCP的端口</strong><br>描述：查看本机监听的（l）TCP连接（t）的IP地址（n）。<br>命令：netstat -tnl<br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/netstat/netstat-tnl.png" alt=""></p>
<p><strong>示例：5. 在netstat的输出中不显示主机，端口和用户名（host，port，user）</strong><br>描述：-n选项禁用域名解析功能。例如，查看所有（a）TCP连接的（t）IP地址（n）等信息。<br>命令：netstat -ant<br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/netstat/netstat-ant.png" alt=""></p>
<p><strong>示例：6. 获取进程名、进程号以及用户ID</strong><br>描述：<br>使用-p选项查看进程信息，-ep选项可以同时查看进程名和用户名。另外，-n和-e选项一起使用，User列的属性就是用户ID，而不是用户名。netstat运行在root权限之下才可以得到运行在root权限下的进程名。<br>输出：</p>
<p>查看本机监听的（l）TCP连接的（t）进程名（p）和IP地址（n）。<br><img src="http://p9xqnn501.bkt.clouddn.com/netstat/netstat-tnlp.png" alt=""></p>
<p>查看本机监听的（l）TCP连接的（t）进程名（p）和用户名（e）。<br><img src="http://p9xqnn501.bkt.clouddn.com/netstat/netstat-tlpe.png" alt=""></p>
<p>查看本机监听的（l）TCP连接的（t）进程名（p）和用户名ID（ne）。<br><img src="http://p9xqnn501.bkt.clouddn.com/netstat/netstat-tlpen.png" alt=""></p>
<p><strong>示例：7. 显示每个协议的统计信息</strong><br>描述：-s选项可以打印出网络统计数据，包括某个协议下的收发包数量。<br>命令：netstat -s<br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/netstat/netstat-s.png" alt=""></p>
<p><strong>示例：8. 持续输出netstat信息</strong><br>描述：-c选项持续输出信息，默认时间间隔 1 秒。例如，下面这个命令可持续输出 TCP 协议信息。<br>命令：netstat -c 1<br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/netstat/netstat-c.png" alt=""></p>
<p><strong>示例：9. 查看服务是否在运行</strong><br>描述：结合grep，查看ntp服务是否在运行。例如，查看本机所有的（a）监听连接（l）中与ntp服务有关的信息，包括进程信息（p）等额外的信息（e）。<br>命令：sudo netstat -aple | grep ntp<br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/netstat/netstat-grep.png" alt=""></p>
<p><strong>示例：10. 查看端口被占用的情况</strong><br>描述：结合grep，查看端口被占用的情况。例如，查看本机所有的（a）连接中与端口80有关的信息，包括IP地址（n）以及进程信息（p）等额外的信息（e）。<br>命令：netstat -anpe | grep “80”<br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/netstat/netstat-grep-port.png" alt=""></p>
<p><strong>示例：11. 显示核心路由信息</strong><br>描述：-r选项打印内核路由信息，打印出来的信息与route命令输出的信息一样。<br>命令：netstat -nr<br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/netstat/netstat-rn.png" alt=""></p>
<p><strong>示例：12. 显示网络接口列表</strong><br>描述：-i选项打印网络接口信息。<br>命令：netstat -i<br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/netstat/netstat-i.png" alt=""></p>
<p><strong>示例：13. 显示网络接口的详细信息</strong><br>描述：将-e选项和-i选项搭配使用，可以输出用户友好的信息。下面的输出信息与ifconfig输出的信息一样。<br>命令：netstat -ie<br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/netstat/netstat-ie.png" alt=""></p>
<p><strong>示例：14. 显示多播组信息</strong><br>描述：选项-g输出IPv4和IPv6的多播组信息。<br>命令：netstat -g<br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/netstat/netstat-g.png" alt=""></p>
<p><strong>示例：15. IP和TCP分析</strong><br>描述：查看连接某服务器端口最多的IP地址<br>命令：watch -d -n0 “netstat -nat | grep ‘172.16.14.151’ | awk ‘{print $5}’ | awk -F: ‘{print $1}’ | sort | uniq -c | sort -nr | head -20”</p>
<p>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/netstat/netstat-watch.png" alt=""></p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-mkdir.html</loc>
    <lastmod>2018-06-28T15:01:13.204Z</lastmod>
    <data>
        <display>
        <title>Linux mkdir命令用法详解</title>
        <pubTime>2018-06-22T09:33:12.000Z</pubTime>   
         <content><p>mkdir命令用来创建目录和子目录。</p>
<a id="more"></a>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>mkdir命令用来创建目录和子目录，如果目录还不存在，则创建之。<br><img src="http://p9xqnn501.bkt.clouddn.com/mkdir/mkdir-man.png" alt=""></p>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>mkdir [OPTION]... DIRECTORY...</code></p>
<h2 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h2><table>
<thead>
<tr>
<th style="text-align:left">选项</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">m&lt;目标属性&gt;或–mode&lt;目标属性&gt;</td>
<td style="text-align:left">建立目录的同时设置目录的权限</td>
</tr>
<tr>
<td style="text-align:left">p或–parents</td>
<td style="text-align:left">若所要建立目录的上层目录目前尚未建立，则会一并建立上层目录</td>
</tr>
<tr>
<td style="text-align:left">v</td>
<td style="text-align:left">列出已经被创建的目录</td>
</tr>
</tbody>
</table>
<h2 id="命令实例"><a href="#命令实例" class="headerlink" title="命令实例"></a>命令实例</h2><h3 id="运行mkdir命令"><a href="#运行mkdir命令" class="headerlink" title="运行mkdir命令"></a><strong>运行mkdir命令</strong></h3><p>描述：在~下创建mk目录，如果目录已存在，会提示无法创建它。<br>命令：<code>mkdir mk</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/mkdir/mkdir.png" alt=""></p>
<p>描述：创建目录的首要条件是，在创建目录的目标路径下你必须具有访问权限。<br>命令：<code>mkdir mk</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/mkdir/mkdir-permission.png" alt=""></p>
<h3 id="创建多个目录"><a href="#创建多个目录" class="headerlink" title="创建多个目录"></a><strong>创建多个目录</strong></h3><p>描述：同时创建foo、bar、baz三个目录。<br>命令：<code>mkdir foo bar baz</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/mkdir/mkdir-multiple-file.png" alt=""></p>
<h3 id="递归创建目录"><a href="#递归创建目录" class="headerlink" title="递归创建目录"></a><strong>递归创建目录</strong></h3><p>描述：创建具有子目录层级的目录，如果父目录找不到，使用-p选项可以递归创建目录，包括父目录。<br>命令：<br><code>mkdir -p word/more</code><br><code>ls -R</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/mkdir/mkdir-R.png" alt=""></p>
<h3 id="设置访问权限"><a href="#设置访问权限" class="headerlink" title="设置访问权限"></a><strong>设置访问权限</strong></h3><p>描述：创建一个名为foo的目录，同时为目录所有者、用户组和其他用户针对该目录赋予只读权限。-m选项可以设置新目录的权限。<br>命令：<code>mkdir -m=r-- foo</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/mkdir/mkdir-m.png" alt=""></p>
<h3 id="打印创建目录的过程信息"><a href="#打印创建目录的过程信息" class="headerlink" title="打印创建目录的过程信息"></a><strong>打印创建目录的过程信息</strong></h3><p>描述：-v选项可以查看创建目录的过程。<br>命令：<code>mkdir -v foo bar baz</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/mkdir/mkdir-v.png" alt=""></p>
<h3 id="创建复杂的目录树"><a href="#创建复杂的目录树" class="headerlink" title="创建复杂的目录树"></a><strong>创建复杂的目录树</strong></h3><p>描述：实现下面的目录树结构，用{}来创建层级目录，只要一行命令来实现。然后使用apt或yum安装tree软件包。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># cd /home/#USER/Desktop</span><br><span class="line"># mkdir tecmint</span><br><span class="line"># mkdir tecmint/etc</span><br><span class="line"># mkdir tecmint/lib</span><br><span class="line"># mkdir tecmint/usr</span><br><span class="line"># mkdir tecmint/bin</span><br><span class="line"># mkdir tecmint/tmp</span><br><span class="line"># mkdir tecmint/opt</span><br><span class="line"># mkdir tecmint/var</span><br><span class="line"># mkdir tecmint/etc/x1</span><br><span class="line"># mkdir tecmint/usr/x2</span><br><span class="line"># mkdir tecmint/usr/x3</span><br><span class="line"># mkdir tecmint/tmp/Y1</span><br><span class="line"># mkdir tecmint/tmp/Y2</span><br><span class="line"># mkdir tecmint/tmp/Y3</span><br><span class="line"># mkdir tecmint/tmp/Y3/z</span><br></pre></td></tr></table></figure>
<p>命令：<code>mkdir -p /home/$USER/iweeek/{etc/x1,lib,usr/{x2,x3},bin,tmp/{Y1,Y2,Y3/z},opt,var}</code><br><code>tree /home/$USER/iweeek</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/mkdir/mkdir-tree.png" alt=""></p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-ls.html</loc>
    <lastmod>2018-06-28T15:01:13.204Z</lastmod>
    <data>
        <display>
        <title>Linux ls命令用法详解</title>
        <pubTime>2018-06-15T08:37:59.000Z</pubTime>   
         <content><p>ls命令用来列出目标目录中所有子目录和文件。</p>
<a id="more"></a>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>ls（list）命令用来列出目标目录（缺省为当前目录）中所有子目录和文件。</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/ls/ls-man.png" alt=""></p>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>ls [选项] [参数]</code></p>
<h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">-a：列出任何以.开头的文件（常用）。</span><br><span class="line">-A：列出除.与..之外的任何文件。</span><br><span class="line">-c：显示的最后更改时间（ctime）。默认以创建时间（最后更改时间）排序，最新的排在前面；如果与-l搭配使用，那么会以文件名排序；如果与-lt搭配，会显示创建时间（最后更改时间），根据时间排序。</span><br><span class="line">-B：忽略备份文件，Linux中的备份文件以波浪号（~）结尾。</span><br><span class="line">-d：仅列出目录本身，而不是列出目录内的文件数据（常用）</span><br><span class="line">-f：不排序，与启用-aU，不启用-ls --color效果一样。</span><br><span class="line">-F：根据文件、目录等信息，给与附加数据结构，例如：</span><br><span class="line">	- @：代表一个符号链接。</span><br><span class="line">	- *：代表可执行文件。</span><br><span class="line">	- /：代表目录。</span><br><span class="line">	- =：代表socket文件。</span><br><span class="line">	- |：代表FIFO文件。</span><br><span class="line">-g：像-l，但不列出拥有者。</span><br><span class="line">-G：在-l下，不列出组名字。</span><br><span class="line">-h：以人类可读的形式，打印文件大小，例如1K、234M、2G等等。</span><br><span class="line">-i：打印inode信息。</span><br><span class="line">-l：使用长数据串格式。</span><br><span class="line">-r：排序时反转列表。</span><br><span class="line">-R：递归列出子目录。</span><br><span class="line">-s：列出每个文件分配的blocks大小。</span><br><span class="line">-S：根据文件大小排序，最大的列在前面。</span><br><span class="line">-t：根据最近修改时间排序，最新的列在前面。</span><br><span class="line">-u：与-l搭配显示访问时间（atime）。</span><br><span class="line">-U：不排序，按照目录顺序列出所有文件。</span><br><span class="line">--author：在-l下，打印出作者的信息。</span><br><span class="line">--color=never：不根据文件特性显示颜色。</span><br><span class="line">--color=always：显示颜色。</span><br><span class="line">--color=auto：系统自动判断是否显示颜色。</span><br><span class="line">--format：以各种格式输出目录的内容。下文将介绍。</span><br><span class="line">--full-time：以完整时间模式（包括年、月、日、时、分）输出。</span><br><span class="line">--sort：根据不同规则排序。下文将介绍。</span><br><span class="line">--time-style=[STYLE]：设置日期格式输出格式。</span><br><span class="line">--time=&#123;atime,ctime&#125;：将时间显示为atime、ctime和mtime其中一个，默认显示的是内容修改时间。</span><br><span class="line">	- atime：访问时间。</span><br><span class="line">	- ctime：权限改变属性时间。</span><br><span class="line">	- mtime：内容修改时间。</span><br></pre></td></tr></table></figure>
<h3 id="示例：1-查看文件和目录"><a href="#示例：1-查看文件和目录" class="headerlink" title="示例：1. 查看文件和目录"></a>示例：1. 查看文件和目录</h3><p>描述：ls命令最基本的形式会显示当前目录下的文件和目录。<br>命令：<code>ls</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ls/ls.png" alt=""></p>
<h3 id="示例：2-区分文件和目录"><a href="#示例：2-区分文件和目录" class="headerlink" title="示例：2. 区分文件和目录"></a>示例：2. 区分文件和目录</h3><p>描述：如果用户用的不是支持彩色的终端仿真器，可以用-F选项的ls命令轻松区分文件和目录。-F参数在目录名后加了正斜线（/），在可执行文件的后面加了星号。有关的指示符如下：</p>
<ul>
<li>@：代表一个符号链接。</li>
<li>*：代表可执行文件。</li>
<li>/：代表目录。</li>
<li>=：代表socket文件。</li>
<li>|：代表FIFO文件。<br>命令：<code>ls -F</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ls/ls-F.png" alt=""></li>
</ul>
<h3 id="示例：3-显示隐藏文件和普通文件"><a href="#示例：3-显示隐藏文件和普通文件" class="headerlink" title="示例：3. 显示隐藏文件和普通文件"></a>示例：3. 显示隐藏文件和普通文件</h3><p>描述：显示当前目录下的所有以点号开头的隐藏文件和普通文件及目录。-a选项可以显示将隐藏文件显示出来。如果要跳过输出中的（.）和（..），使用-A选项。<br>命令：<br><code>ls -a</code><br><code>ls -A</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ls/ls-a.png" alt=""></p>
<h3 id="示例：4-递归显示文件"><a href="#示例：4-递归显示文件" class="headerlink" title="示例：4. 递归显示文件"></a>示例：4. 递归显示文件</h3><p>描述：列出当前目录下包含的子目录中的文件。-R选项，它叫做递归选项，它先显示了当前目录下的内容，然后还显示了所有子目录及其内容，如果子目录有跟多的子目录，-R选项会继续进行遍历。-F -R可以合并起来，如-FR。<br>命令：<br><code>ls -F -R</code><br><code>ls -FR</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ls/ls-R.png" alt=""></p>
<h3 id="示例：5-查看长（详细）列表"><a href="#示例：5-查看长（详细）列表" class="headerlink" title="示例：5. 查看长（详细）列表"></a>示例：5. 查看长（详细）列表</h3><p>描述：显示文件或目录的附加信息。-l显示文件或者目录的大小，修改日期和时间，文件或者文件夹的名字和拥有者，以及它的权限信息。<br>命令：<code>ls -l</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ls/ls-l.png" alt=""></p>
<p>以.开头的文件是隐藏文件，（.）（..）分别代表当前目录和上一级目录，目录的颜色是以蓝色显示的。<br>每一行都包含了关于文件（或目录）的下述信息：</p>
<ul>
<li><p>第1字段：文件属性字段<br>文件属性字段总共有10个字母组成，第一个字符表示文件类型：<br>字符（-）：普通文件。<br>字母（d）：目录。<br>字母（l）：链接文件。<br>字母（c）：字符设备文件（character）。<br>字母（b）：块设备文件（block），一般置于/dev目录下，设备文件是普通文件和程序访问硬件设备的入口，一类特殊文件。<br>字母（p）：命令管道文件。与shell编程有关的文件。<br>字母（s）：sock文件。与shell编程有关的文件。<br>第1个字符后面的9个字母表示该文件或目录的权限位。三个为一组，均为rwx三个参数的组合。[r]代表可读、[w]代表可写、[x]代表可执行。如果没有权限，则会出现减号[-]。第一组为文件拥有者可具备的权限，第二个为加入此群组之账号的权限，第三组为非本人且没有加入本群组之其他账号的权限。</p>
</li>
<li><p>第2字段：如果一个文件不是目录，此时这一字段表示文件所具有的硬链接数。</p>
</li>
<li>第3字段：文件属主的用户名</li>
<li>第4字段：文件属组的组名。</li>
<li>第5字段：文件的大小（以字节为单位）。</li>
<li>第6字段：文件的上次修改时间。</li>
<li>第7字段：文件名或目录名。</li>
</ul>
<h3 id="示例：6-列出每个文件分配的blocks大小"><a href="#示例：6-列出每个文件分配的blocks大小" class="headerlink" title="示例：6. 列出每个文件分配的blocks大小"></a>示例：6. 列出每个文件分配的blocks大小</h3><p>描述：-s列出每个文件分配的blocks大小。-s与-l搭配使用，第一列的数字就是该文件的blocks大小。<br>命令：<code>ls -ls</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/ls/ls-show-blocks.png" alt=""></p>
<p>注意到第一行的total后跟的数字，它是指当前目录下所有文件所占用的空间总和。文件系统在格式化时就规范好了块（block）的大小，每个block仅能容纳一个文件，如果块大小为4K，而文件只有1K，则会有3K的空间被浪费。第一列数字的总和就是total的值。</p>
<h3 id="示例：7-查看文件的author"><a href="#示例：7-查看文件的author" class="headerlink" title="示例：7. 查看文件的author"></a>示例：7. 查看文件的author</h3><p>描述：–author选项与-l相结合可以在第五列显示每个文件的作者。<br>命令：<code>ls -l --author</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/ls/ls-author.png" alt=""></p>
<p>注意到第一行的total后跟的数字，它是指当前目录下所有文件所占用的空间总和。文件系统在格式化时就规范好了块（block）的大小，每个block仅能容纳一个文件，如果块大小为4K，而文件只有1K，则会有3K的空间被浪费。第一列数字的总和就是total的值。</p>
<h3 id="示例：8-以字节为单位打印文件大小"><a href="#示例：8-以字节为单位打印文件大小" class="headerlink" title="示例：8. 以字节为单位打印文件大小"></a>示例：8. 以字节为单位打印文件大小</h3><p>描述：使用–block-size选项，以千字节或兆字节等为单词显示文件的大小。<br>命令：<code>ls -l --block-size=k [file-name]</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/ls/ls-block-size.png" alt=""></p>
<h3 id="示例：9-使ls在输出中仅显示文件名和文件大小"><a href="#示例：9-使ls在输出中仅显示文件名和文件大小" class="headerlink" title="示例：9. 使ls在输出中仅显示文件名和文件大小"></a>示例：9. 使ls在输出中仅显示文件名和文件大小</h3><p>描述：使-h选项和-s选项配合使用，让ls输出仅包含文件/目录名称及其各自的大小。<br>命令：<code>ls -s -h</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/ls/ls-s-h.png" alt=""></p>
<h3 id="示例：10-过滤输出列表"><a href="#示例：10-过滤输出列表" class="headerlink" title="示例：10. 过滤输出列表"></a>示例：10. 过滤输出列表</h3><p>描述：过滤器l?tter与目录中的两个文件匹配。问号可用于过滤器字符串中替代任意位置的单个字符。<br>命令：<code>ls -l l?tter</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/ls/ls-one-letter.png" alt=""></p>
<p>描述：使用星号找到了四个名字以l开头的文件。和问号一样，可以把星号放在过滤器中的任意位置。<br>命令：<code>ls -l l*</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/ls/ls-asterisk.png" alt=""></p>
<p>描述：中括号表示一个字符位置并给出多个可能的选择。例如列出文件名为latter或letter的文件。<br>命令：<code>ls -l l[ae]tter</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/ls/ls-metacharacter-wildcards.png" alt=""></p>
<p>描述：中括号[a-i]还可以表示从一个字母范围里匹配。<br>命令：<code>ls -l f[a-i]ll</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/ls/ls-range.png" alt=""></p>
<p>描述：感叹号（!）将不需要的内容排除在外。<br>命令：<code>ls -l f[!a]ll</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/ls/ls-exclamation.png" alt=""></p>
<h3 id="示例：11-以人类可阅读的格式列出文件信息"><a href="#示例：11-以人类可阅读的格式列出文件信息" class="headerlink" title="示例：11. 以人类可阅读的格式列出文件信息"></a>示例：11. 以人类可阅读的格式列出文件信息</h3><p>描述：-h选项会将文件大小变为K，M，G等人类可阅读的格式。<br>命令：<code>ls -lh</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/ls/ls-h.png" alt=""></p>
<h3 id="示例：12-反转显示结果"><a href="#示例：12-反转显示结果" class="headerlink" title="示例：12. 反转显示结果"></a>示例：12. 反转显示结果</h3><p>描述：-r参数将默认的显示结构进行倒序显示。<br>命令：<code>ls -r</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/ls/ls-reverse.png" alt=""></p>
<h3 id="示例：13-按照修改时间的从远到近顺序排列"><a href="#示例：13-按照修改时间的从远到近顺序排列" class="headerlink" title="示例：13. 按照修改时间的从远到近顺序排列"></a>示例：13. 按照修改时间的从远到近顺序排列</h3><p>描述：-t参数将按照时间从近到远进行排序。<br>命令：<code>ls -lt</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/ls/ls-t.png" alt=""></p>
<h3 id="示例：14-按照文件的大小排列"><a href="#示例：14-按照文件的大小排列" class="headerlink" title="示例：14. 按照文件的大小排列"></a>示例：14. 按照文件的大小排列</h3><p>描述：-S参数按照文件的大小进行排序。<br>命令：<code>ls -lS</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/ls/ls-S.png" alt=""></p>
<h3 id="示例：15-自定义显示日期格式"><a href="#示例：15-自定义显示日期格式" class="headerlink" title="示例：15. 自定义显示日期格式"></a>示例：15. 自定义显示日期格式</h3><p>描述：–time-style=[STYLE]可以自定义的文件修改日期格式进行显示。也可以直接使用–full-time显示最全的时间信息。[STYLE]的选项如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- full-iso</span><br><span class="line">- long-iso</span><br><span class="line">- iso</span><br><span class="line">- locale</span><br><span class="line">- +%H:%M:%S:%D</span><br></pre></td></tr></table></figure>
<p>命令：<br><code>ls -l --time-style=iso</code><br><code>ls --full-time ~</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/ls/ls-time-style.png" alt=""></p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/ls/ls-full-time.png" alt=""></p>
<h3 id="示例：16-根据不同的规则进行排序"><a href="#示例：16-根据不同的规则进行排序" class="headerlink" title="示例：16. 根据不同的规则进行排序"></a>示例：16. 根据不同的规则进行排序</h3><p>描述：根据–sort不同的规则进行排序。可选值如下（括号里表示等效的命令行参数）：</p>
<ul>
<li>extension(-X)：根据文件扩展名排序。</li>
<li>size(-S)：根据文件大小排序。</li>
<li>time(-t)：根据时间先后排序。</li>
<li>version(-v)</li>
<li>none(-U)</li>
</ul>
<p>命令：<code>ls -l --sort=extension</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/ls/ls-sort-extension.png" alt=""></p>
<h3 id="示例：17-更改ls命令输出格式"><a href="#示例：17-更改ls命令输出格式" class="headerlink" title="示例：17.更改ls命令输出格式"></a>示例：17.更改ls命令输出格式</h3><p>描述：–-format可以以各种格式输出目录的内容，例如逗号，水平、垂直分隔等等。可选值如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- comma：逗号。</span><br><span class="line">- horizontal或across：水平。</span><br><span class="line">- long或verbose：长列表，如-l选项。</span><br><span class="line">- single-column：单列。</span><br><span class="line">- vertical：垂直排列，根据屏幕宽度决定显示几列。</span><br></pre></td></tr></table></figure>
<p>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ls/ls-commas.png" alt=""></p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/ls/ls-single-column.png" alt=""></p>
<h3 id="示例：18-使ls隐藏特定类型的文件"><a href="#示例：18-使ls隐藏特定类型的文件" class="headerlink" title="示例：18.使ls隐藏特定类型的文件"></a>示例：18.使ls隐藏特定类型的文件</h3><p>描述：使用–hide可以强制ls命令在输出中隐藏特定类型的文件。例如，在输出中隐藏以.txt结尾的文件。<br>命令：<code>ls --hide=*.txt</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ls/ls-hide.png" alt=""></p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-join.html</loc>
    <lastmod>2018-06-28T15:01:13.203Z</lastmod>
    <data>
        <display>
        <title>Linux join命令用法详解</title>
        <pubTime>2018-06-18T08:59:13.000Z</pubTime>   
         <content><p>join命令用来将两个分类文本文件的行连在一起，与SQL语言中的join命令相似。</p>
<a id="more"></a>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>join命令根据两个分类文本文件的两个相同字段，将两个文件连接起来，结果写入标准输出。默认连接字段是由空格分隔的第一个字段。</p>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>join [选项] 文件1 文件2</code></p>
<h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><ul>
<li>-a&lt;1或2&gt;：除了显示原来的输出内容之外，还显示指令文件中没有匹配的行。</li>
<li>-e&lt;字符串&gt;：若[文件1]与[文件2]中找不到指定的栏位，则在输出中填入选项中的字符串。</li>
<li>-i或–ignore-case：比较栏位内容时，忽略大小写的差异。</li>
<li>-o&lt;格式&gt;：按照指定的格式来显示结果。</li>
<li>-t&lt;字符&gt;：使用栏位的分割字符。</li>
<li>-v&lt;1或2&gt;：更-a相同，但是只显示文件中没有匹配的行。</li>
<li>-1&lt;栏位&gt;：连接[文件1]指定的栏位。</li>
<li>-2&lt;栏位&gt;：连接[文件2]指定的栏位。</li>
</ul>
<h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2><p><strong>实例：1. 相同域连接</strong><br>描述：将foodtype.txt和foods.txt两个文件共享的第一个字段作为连接字段，将文件连接起来。<br>命令：<code>join foodtype.txt foods.txt</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/join/join-two-file.png" alt=""></p>
<p><strong>实例：2. 不同域连接</strong><br>描述：将wine.txt的第二列和reviews.txt的第一列连接起来。也可以使用-j选项，即-j1 2 -j2 1。<br>命令：<code>join -1 2 -2 1 wine.txt reviews.txt</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/join/join-1-2.png" alt=""></p>
<p><strong>实例：3. 先排序再连接</strong></p>
<p>描述：如果上述两个文件指定的文件未排序，那么在连接的时候会发生错误。<br>命令：<code>join -1 2 -2 1 wine.txt reviews.txt</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/join/join-sort-file.png" alt=""></p>
<p>描述：先按wine.txt的第二列排好序，再按reviews的第一列排好序，最后将两个排好序的文件连接起来。<br>命令：<code>join -1 2 -2 1 &lt;(sort -k 2 wine.txt) &lt;(sort reviews.txt)</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/join/join-sort.png" alt=""></p>
<p><strong>实例：4. 指定字段分隔符</strong><br>描述：将names.csv和transactions.csv两个文件指定分隔符为，号进行连接，-t选项指定字段分隔符。<br>命令：<code>join -1 2 -2 3 -t , names.csv transactions.csv</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/join/join-t.png" alt=""></p>
<p><strong>实例：5. 指定显示的字段</strong><br>描述：-o选项指定连接的输出格式。<br>命令：<code>join -1 2 -2 3 -t , -o 1.1,1.2,1.3,2.2,2.1 names.csv transactions.csv</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/join/join-o.png" alt=""></p>
<p><strong>实例：6. 用默认字符串代替未匹配的字段</strong><br>描述：-e选项告诉join当找不到匹配项的时候应该用什么字符串来替换空位，-o选项告诉join哪些不匹配的字段应该被代替。-e只能与-o搭配使用。</p>
<ul>
<li>0,1.1,2.2：0表示匹配的关键字段。<ul>
<li>1.1：表示第一个文件中第一个字段。</li>
<li>2.2：表示第二个文件中第二个字段。</li>
</ul>
</li>
</ul>
<p>命令：<br><code>join -a 1 -a 2 -e &quot;NULL&quot; -o 1.1,1.2,2.2 foods.txt foodtype.txt</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/join/join-e.png" alt=""></p>
<p><strong>实例：7. 显示匹配和不匹配的行</strong><br>描述：既显示成功匹配的行，也显示两个文件中不匹配的所有行。-a选项可选值为1或2，分别表示前后两个文件，意思是显示指定文件中不匹配的行。<br>命令：<br><code>join -a 1 foods.txt foodtype.txt</code><br><code>join -a 2 foods.txt foodtype.txt</code><br><code>join -a 1 -a 2 foods.txt foodtype.txt</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/join/join-a.png" alt=""></p>
<p><strong>实例：8. 只显示不匹配的行</strong><br>描述：只两个文件中不匹配的所有行。-v选项可选值为1或2，分别表示前后两个文件，意思是只显示指定文件中不匹配的行，将忽略已匹配连接的行。<br>命令：<br><code>join -v 1 -v 2 foods.txt foodtype.txt</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/join/join-v.png" alt=""></p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-kill.html</loc>
    <lastmod>2018-06-28T15:01:13.203Z</lastmod>
    <data>
        <display>
        <title>Linux kill命令用法详解</title>
        <pubTime>2018-06-22T23:33:18.000Z</pubTime>   
         <content><p>kill命令用来删除执行中的程序或工作。</p>
<a id="more"></a>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>kill命令用来删除执行中的程序或工作。kill可将指定的信息送至程序。预设的信息为SIGTERM(15),可将指定程序终止。若仍无法终止该程序，可使用SIGKILL(9)信息尝试强制删除程序。程序或工作的编号可利用ps指令或job指令查看。</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/kill/kill-man.png" alt=""></p>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>kill [signal or option] PID(s)</code></p>
<p>表: kill命令的信号名</p>
<table>
<thead>
<tr>
<th style="text-align:left">信号</th>
<th style="text-align:left">信号值</th>
<th style="text-align:left">行为</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">SIGHUP</td>
<td style="text-align:left">1</td>
<td style="text-align:left">挂起</td>
</tr>
<tr>
<td style="text-align:left">SIGKILL</td>
<td style="text-align:left">9</td>
<td style="text-align:left">杀死信号</td>
</tr>
<tr>
<td style="text-align:left">SIGTERM</td>
<td style="text-align:left">15</td>
<td style="text-align:left">终止</td>
</tr>
</tbody>
</table>
<p>SIGTERM是杀死进程默认和最安全的方式，SIGHUP次之。SIGKILL是最不安全的方式，它将杀死一个没有完全保存的进程。</p>
<h2 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h2><ul>
<li>-a：当处理当前进程时，不限制命令名和进程号的对应关系。</li>
<li>-l &lt;信号编号&gt;：若不加&lt;信号编号&gt;选项，则-l参数会列出全部的信号名称。</li>
<li>-p：指定kill 命令只打印相关进程的进程号，而不发送任何信号。</li>
<li>-s &lt;信号名称或编号&gt;：指定要送出的信息。</li>
<li>-i：交互式的终止进程。</li>
<li>-I：忽略大小写。</li>
<li>-u：指定用户。</li>
</ul>
<h2 id="kill的执行范围"><a href="#kill的执行范围" class="headerlink" title="kill的执行范围"></a>kill的执行范围</h2><ul>
<li>用户可以杀死他的所有进程。</li>
<li>用户不能杀死另一个用户的进程。</li>
<li>用户无法终止系统正在使用的进程。</li>
<li>root用户可以终止系统级进程和任何用户的进程。</li>
</ul>
<h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2><h3 id="杀死进程"><a href="#杀死进程" class="headerlink" title="杀死进程"></a><strong>杀死进程</strong></h3><p>描述：用pgrep找出进程PID，并用kill终止PID为2807的进程。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># pgrep mysql</span><br><span class="line">2807</span><br><span class="line"># kill -9 2807</span><br></pre></td></tr></table></figure>
<p>说明：使用<code>kill -9 PID</code>与<code>kill -SIGKILL PID</code>类似。</p>
<h3 id="使用进程名称杀死进程"><a href="#使用进程名称杀死进程" class="headerlink" title="使用进程名称杀死进程"></a><strong>使用进程名称杀死进程</strong></h3><p>描述：pkill命令后直接加上进程名即可杀死该进程，但在杀死之前，最好先确认进程名称是否正确。<br>命令：<br><code>pkill mysql</code></p>
<p>描述：为了避免kill掉错误的进程，也可以通过下面命令来匹配进程名称。<br>命令：<br><code>pgrep -l ssh</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/ps/ps-pgrep-l.png" alt=""></p>
<h3 id="killall杀死多个进程"><a href="#killall杀死多个进程" class="headerlink" title="killall杀死多个进程"></a><strong>killall杀死多个进程</strong></h3><p>描述：一次杀死多个进程。<br>命令：<br><code>kill PID1 PID2 PID3</code><br><code>kill -9 PID1 PID2 PID3</code><br><code>kill -SIGKILL PID1 PID2 PID3</code></p>
<p>描述：killall用进程名替代PID，并且会kill掉所有的同名进程。<br>语法：<code>killall [signal or option] Process name</code><br>命令：<code>killall mysqld</code><br>检查：验证进程是否处于运行状态。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> service mysql status</span><br><span class="line"><span class="meta">#</span> pgrep mysql</span><br><span class="line"><span class="meta">#</span> ps -aux | grep mysql</span><br></pre></td></tr></table></figure>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-head.html</loc>
    <lastmod>2018-06-28T15:01:13.202Z</lastmod>
    <data>
        <display>
        <title>Linux head命令用法详解</title>
        <pubTime>2018-06-13T02:16:29.000Z</pubTime>   
         <content><p>head命令用于显示来自文件或者管道开头的内容。</p>
<a id="more"></a>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>head命令用于显示来自文件或者管道开头的内容。默认情况下，head命令显示文件的头10行内容。支持多文件处理，在输出每个文件之前都有一个标识文件名的标题。如果未指定文件，或者文件被指定为破折号「-」，则head命令从标准输入中读取。</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/head/head-man.png" alt=""></p>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>head [选项] [文件]</code></p>
<h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><ul>
<li>-n, –bytes=[-]<em>num</em>：指定显示头部内容的行数；</li>
<li>-c, –lines=[-]<em>num</em>：指定显示头部内容的字节数；</li>
<li>-v, –vervose：总是显示文件名的头信息；</li>
<li>-q, –quirt, –silent：不显示文件名的头信息。</li>
<li>–help：显示一段帮助信息后退出。</li>
<li>–version：打印版本后退出。</li>
</ul>
<p>上面选项中的<em>num</em>可能有一个乘数后缀：</p>
<ul>
<li>b：512</li>
<li>kB：1000</li>
<li>K：1024</li>
<li>MB：1000*1000</li>
<li>M：1024*1024</li>
<li>GB：1000*1000*1000</li>
<li>G：1024*1024*1024</li>
</ul>
<p>还有T，P，E，Z，Y等等。</p>
<h2 id="实用示例"><a href="#实用示例" class="headerlink" title="实用示例"></a>实用示例</h2><p><strong>实例：1. 查看文件的前十行</strong><br>描述：查看words文件的前10行。默认情况下，head命令显示文件的头10行内容。<br>命令：<code>head /usr/share/dict/words</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/head/head.png" alt=""></p>
<p><strong>实例：2. 限制要显示的行数</strong><br>描述：显示words文件的前3行。-n选项限制要显示的行数。<br>命令：<br><code>head -n 3 /usr/share/dict/words</code><br><code>head -3 /usr/share/dict/words</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/head/head-n.png" alt=""></p>
<p>描述：显示words文件的前1000行。可以在num后加上后缀，例如：b，KB，K等等。<br>命令：<code>head -n 1K /usr/share/dict/words</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/head/head-n-1K.png" alt=""></p>
<p><strong>实例：3. 限制要显示的字节数</strong><br>描述：显示words文件的前16个字节。-c选项限制显示的字节数。<br>命令：<code>head -c 16 /usr/share/dict/words</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/head/head-c.png" alt=""></p>
<p><strong>实例：4. 显示多个文件</strong><br>描述：显示多个文件的前十行，同时标题会显示哪个文件正在显示。<br>命令：<code>head /usr/share/dict/words /usr/share/dict/propernames</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/head/head-multi-file.png" alt=""></p>
<p>描述：显示多个文件和标准输入的前三行，同时标题会显示哪个文件正在显示。<br>命令：<code>head -n 3 /usr/share/dict/words /usr/share/dict/propernames -</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/head/head-standard-input.png.png" alt=""></p>
<p><strong>实例：5. 多个文件不显示标题</strong><br>描述：显示多个文件的前十行，不显示正在显示文件的标题。<br>命令：<code>head -q /usr/share/dict/words /usr/share/dict/propernames</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/head/head-q.png" alt=""></p>
<p><strong>实例：6. 与管道配合使用</strong><br>描述：显示/etc/目录下的最近修改的前5个文件或文件夹。head命令可以接受其他命令通过管道传送过来的信息。<br>命令：<code>ls -t /etc/ | head -n 5</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/head/head-pipe.png" alt=""></p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-io-redirection.html</loc>
    <lastmod>2018-06-28T15:01:13.202Z</lastmod>
    <data>
        <display>
        <title>Linux IO Redirection命令用法详解</title>
        <pubTime>2018-06-09T12:40:05.000Z</pubTime>   
         <content><p>一个文件描述符就是文件系统为了跟踪这个打开的文件而分配给它的一个数字，可以将其理解为文件指针的一个简单版本，与C语言中的文件句柄的概念类似。<br>Linux中默认情况下始终有3个「文件」处于打开状态，分别是stdin（键盘）、stdout（屏幕）和stderr（错误消息输出到屏幕上）。这3个文件和其他打开的文件都可以被重定向。重定向，就是捕捉一个文件、命令、程序、脚本，或者是脚本中的代码块的输出，然后将这些输出作为输入发送到另一个文件、命令、程序或脚本中。<br>每个打开的文件都会分配一个文件描述符。stdin、stdout和stderr的文件描述符分别是0、1和2。除了这3个文件，对于其他需要打开的文件，保留了文件描述符3到9。在某些情况下，将这些额外的文件描述符分配给 stdin、stdout 或 stderr 作为临时的副本链接是非常有用的。在经过复杂的重定向和刷新之后需要把它们恢复成正常状态。</p>
<a id="more"></a>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>命令1|命令2</code></p>
<h2 id="命令列表"><a href="#命令列表" class="headerlink" title="命令列表"></a>命令列表</h2><p>command &gt; filename：把标准输出重定向到一个新文件中。<br>command &gt;&gt; filename：把标准输出重定向到一个文件中（追加）。<br>command 1 &gt; filename：把标准输出重定向到一个文件中。<br>command &gt; filename 2&gt;&amp;1：把标准输出和标准错误一起重定向到一个文件中。<br>command 2 &gt; filename：把标准错误重定向到一个文件中。<br>command 2 &gt;&gt; filename：把标准错误重定向到一个文件中（追加）。<br>command &gt;&gt; filename 2&gt;&amp;1：把标准输出和标准错误一起重定向到一个文件中（追加）。<br>command &lt; filename &gt; filename2：command命令以filename文件作为标准输入，以filename2文件作为标准输出。<br>command &lt; filename：command命令以filename文件作为标准输入。<br>command &lt;&lt; delimiter：从标准输入中读入，直至遇到delimiter分界符。<br>command &lt;&amp; m：把文件描述符m作为标准输入。<br>command &gt;&amp; m：把标准输出重定向到文件描述符m中。<br>command &lt;&amp;-：关闭标准输入。</p>
<h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2><p><strong>实例：1. &gt; file</strong><br>描述：将ls命令的stdout重定向到dir-tree.list文件。如果这个文件不存在，那就创建它，否则就覆盖。<br>命令：<code>ls -lR &gt; dir-tree.list</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/redirection/redirection-&gt;.png" alt=""></p>
<p>描述：清空文件。&gt;将会把文件dir-tree.list变为一个空文件（size为0）。如果文件不存在，那会创建一个0长度的文件（与touch的效果相同）。:是一个占位符，不产生任何输出。也可以省略:占位符。<br>命令：<code>: &gt; dir-tree.list</code><br>或者：<code>&gt; dir-tree.list</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/redirection/redirection-clear.png" alt=""></p>
<p><strong>实例：1. &gt;&gt; file</strong><br>描述：将stdout重定向到一个文件。如果文件不存在，那么就创建它，如果存在，那么就追加到文件后边。<br>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">script.sh 1 &gt; filename</span><br><span class="line"># 重定向 stdout 到文件&quot;filename&quot;.</span><br><span class="line">script.sh 1 &gt;&gt; filename</span><br><span class="line"># 重定向并追加 stdout 到文件&quot;filename&quot;.</span><br><span class="line">script.sh 2 &gt; filename</span><br><span class="line"># 重定向 stderr 到文件&quot;filename&quot;.</span><br><span class="line">script.sh 2 &gt;&gt; filename</span><br><span class="line"># 重定向并追加 stderr 到文件&quot;filename&quot;.</span><br></pre></td></tr></table></figure></p>
<p><strong>实例：1. &amp;&gt; afile</strong><br>描述：将ls命令的stdout重定向到dir-tree.list文件。如果这个文件不存在，那就创建它，否则就覆盖。<br>命令：<code>ls -lR &gt; dir-tree.list</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/redirection/redirection-clear.png" alt=""></p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-grep.html</loc>
    <lastmod>2018-06-28T15:01:13.201Z</lastmod>
    <data>
        <display>
        <title>Linux grep命令用法详解</title>
        <pubTime>2018-06-08T16:39:12.000Z</pubTime>   
         <content><p>grep是一个强大的文本搜索工具，用于搜索与正则表达式匹配的行的纯文本数据。</p>
<a id="more"></a>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>grep [选项] &#39;搜索字符串&#39;文件</code></p>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>grep命令用于搜索与正则表达式匹配的行的纯文本数据。如果将 grep 拆分为 <code>g/re/p</code>，其实代表全局搜索正则表达式并打印结果（globally search a regular expression and print），也就是从文件中搜索模式，然后打印匹配的行到屏幕。它在一个或多个文件中搜索字符串模板，如果模板包括空格，则必须被引用，模板后的所有字符串被看作文件名。搜索的结果被送到标准输出，不影响源文件内容。不过grep只能使用基本的正则表达式来搜索文本，并且在查找字符串时，是以整行为单位进行数据筛选的。<br>grep可用于shell脚本，因为grep通过返回一个状态值来说明搜索的状态，如果模板搜索成功，则返回0，如果搜索不成功，则返回1，如果搜索的文件不存在，则返回2。<br>egrep命令等同于grep -E，可以使用扩展的正则表达式来对文本进行搜索。fgrep命令等同于grep -F，可以使用固定的字符串来对文本进行搜索，不支持正则表达式，执行速度很快。</p>
<h2 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h2><ul>
<li>？：同时显示匹配行上下的？行，同-C选项。</li>
<li>-a或–text：不要忽略二进制的数据。   </li>
<li>-A&lt;显示行数&gt;或–after-context=&lt;显示行数&gt;：除了显示符合范本样式的那一列之外，并显示该行之后的内容。   </li>
<li>-b或–byte-offset：在显示符合样式的那一行之前，标示出该行第一个字符的编号。   </li>
<li>-B&lt;显示行数&gt;或–before-context=&lt;显示行数&gt;：除了显示符合样式的那一行之外，并显示该行之前的内容。   </li>
<li>-c或–count：只打印匹配的行数，不显示匹配的内容。   </li>
<li>-C&lt;显示行数&gt;或–context=&lt;显示行数&gt;或-&lt;显示行数&gt;：除了显示符合样式的那一行之外，并显示该行之前后的内容。   </li>
<li>-d&lt;动作&gt;或–directories=&lt;动作&gt;：当指定要查找的是目录而非文件时，必须使用这项参数，否则grep指令将回报信息并停止动作。   </li>
<li>-e&lt;范本样式&gt;或–regexp=&lt;范本样式&gt;：指定字符串做为查找文件内容的样式。   </li>
<li>-E或–extended-regexp：将样式为延伸的普通表示法来使用。   </li>
<li>-f&lt;规则文件&gt;或–file=&lt;规则文件&gt;：指定规则文件，从文件中提取规则，其内容含有一个或多个规则样式，让grep查找符合规则条件的文件内容，格式为每行一个规则样式。空文件包含0个规则，什么都不匹配，</li>
<li>-F或–fixed-regexp：将样式视为固定字符串的列表。   </li>
<li>-G或–basic-regexp：将样式视为普通的表示法来使用。   </li>
<li>-h或–no-filename：在显示符合样式的那一行之前，不标示该行所属的文件名称前缀。   </li>
<li>-H或–with-filename：在显示符合样式的那一行之前，表示该行所属的文件名称。   </li>
<li>-i或–ignore-case：忽略字符大小写的差别。   </li>
<li>-l或–file-with-matches：列出文件内容符合指定的样式的文件名称。   </li>
<li>-L或–files-without-match：列出文件内容不符合指定的样式的文件名称。   </li>
<li>-n或–line-number：在显示符合样式的那一行之前，标示出该行的列数编号。   </li>
<li>-o：只输出文件中匹配到的部分。</li>
<li>-q或–quiet或–silent：不显示任何信息。   </li>
<li>-r或–recursive：此参数的效果和指定“-d recurse”参数相同。   </li>
<li>-s或–no-messages：不显示错误信息。   </li>
<li>-v或–revert-match：显示不包含匹配文本的所有行。   </li>
<li>-V或–version：显示版本信息。   </li>
<li>-w或–word-regexp：只显示全字符合的列。   </li>
<li>-x或–line-regexp：只显示全列符合的列。   </li>
<li>-y：此参数的效果和指定“-i”参数相同。</li>
</ul>
<h2 id="规则表达式"><a href="#规则表达式" class="headerlink" title="规则表达式"></a>规则表达式</h2><p>grep正则表达式元字符集（基本集）：</p>
<ul>
<li>^：锚定行的开始，如：’^grep’匹配所有以grep开头的行。</li>
<li>$：锚定行的结束，如：’grep$’匹配所有以grep结尾的行。</li>
<li>.：匹配一个非换行符的字符，如：’gr.p’匹配gr后接一个任意字符，然后是p。</li>
<li>*：匹配零个或多个先前字符，如：’*grep’匹配所有一个或多个空格后紧跟grep的行。</li>
<li>.* ：一起用代表任意字符。   </li>
<li>[] ：匹配一个指定范围内的字符，如’[Gg]rep’匹配Grep和grep。</li>
<li>[^]：匹配一个不在指定范围内的字符，如：’[^A-FH-Z]rep’匹配不包含A-R和T-Z的一个字母开头，紧跟rep的行。</li>
<li>(..)：标记匹配字符，如’(love)‘，love被标记为1。</li>
<li>\&lt;：锚定单词的开始，如:’\&lt;grep’匹配包含以grep开头的单词的行。</li>
<li>>：锚定单词的结束，如’grep>‘匹配包含以grep结尾的单词的行。</li>
<li>x{m}：重复字符x，m次，如：’o{5}‘匹配包含5个o的行。</li>
<li>x{m,}：重复字符x,至少m次，如：’o{5,}‘匹配至少有5个o的行。</li>
<li>x{m,n}：重复字符x，至少m次，不多于n次，如：’o{5,10}‘匹配5–10个o的行。   </li>
<li>\w：匹配文字和数字字符，也就是[A-Za-z0-9]，如：’G\w*p’匹配以G后跟零个或多个文字或数字字符，然后是p。   </li>
<li>\W：\w的反置形式，匹配一个或多个非单词字符，如点号句号等。   </li>
<li>\b：单词锁定符，如: ‘\bgrep\b’只匹配grep。  </li>
</ul>
<p>egrep和grep -E的元字符扩展集</p>
<ul>
<li>+：匹配一个或多个先前的字符。如’[a-z]+able’，匹配一个或多个小写字母后跟able的串，如loveable，enable，disable等。</li>
<li>？：匹配零个或多个先前的字符。如’gr?p’匹配gr后跟一个或没有字符，然后是p的行。</li>
<li>a|b|c：匹配a或b或c。如grep|sed匹配grep或sed。</li>
<li>()：分组符号，如love(able|rs)ov+匹配loveable或lovers，匹配一个或多个ov。</li>
<li>x{m},x{m,},x{m,n}：作用同x{m}，x{m,}，x{m,n}</li>
</ul>
<p>POSIX字符类</p>
<p>为了在不同国家的字符编码中保持一致，POSIX（The Portable Operating System Interface）增加了特殊的字符类。</p>
<ul>
<li>[[:alnum:]]：文字数字字符。</li>
<li>[[:alpha:]]：文字字符。</li>
<li>[[:digit:]]：数字字符。</li>
<li>[[:lower:]]：小写字符。</li>
<li>[[:cntrl:]]：控制字符。、</li>
<li>[[:print:]]：非空字符（包括空格）。</li>
<li>[[:punct:]]：标点符号。</li>
<li>[[:space:]]：所有空白字符（新行，空格，制表符）。</li>
<li>[[:upper:]]：大写字符。</li>
<li>[[:xdigit:]]：十六机制数字（0-9，a-f，A-F）。</li>
</ul>
<h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2><p><strong>实例：1. 查找文件</strong><br>描述：-i表示忽略大小写。-y与-i的效果相同。<br>命令：<code>find . -name &quot;*.txt&quot; | grep -i find</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-i.png" alt=""></p>
<p><strong>实例：2. 搜索并过滤文件</strong><br>描述：-v选项告诉grep反转其匹配的输出，也就是打印所有不匹配的行。<br>命令：<code>find . -name &quot;*.txt&quot; | grep -v find</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-v.png" alt=""></p>
<p><strong>实例：3. 只查找特定的文件</strong><br>描述：以下命令表示搜索以.txt结尾的文件，然后通过重定向到grep，筛选文件名中含有字符串find的结果，再次重定向到grep，筛选结果中不存在users的结果。<br>命令：<code>find . -name &quot;*.txt&quot; | grep -i find | grep -vi users</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-grep.png" alt=""></p>
<p><strong>实例：4. 显示指定字符串位置向前或者向后的行</strong><br>描述：显示匹配到eth0的行以及后面的10行。-A和-B，显示匹配的行和行数，显示匹配的字符串行之前或之后。-A=after，-B=before。<br>命令：<code>ifconfig | grep -A 10 eth0</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-A.png" alt=""></p>
<p>描述：显示匹配到lo的行以及前面的10行。-b将显示该行第一个字符的编号。<br>命令：<code>ifconfig | grep -b -B 10 lo</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-B.png" alt=""></p>
<p><strong>实例：5. 只显示匹配到的部分</strong><br>描述：从ifconfig的输出中搜索net，显示每行的第一个字符的编号，并且只显示文件中匹配的部分。-o选项只输出文件中匹配到的部分。<br>命令：<code>ifconfig | grep -b -o net</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-o.png" alt=""></p>
<p><strong>实例：6. 打印匹配周围的行</strong><br>描述：显示匹配到字符串lo的行以及前后各1行。-C选项会打印出匹配字符串之前和之后出现的行。<br>命令：<code>ifconfig | grep -C 1 lo</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-C.png" alt=""></p>
<p><strong>实例：7. 为匹配的字符串计数</strong><br>描述：统计匹配到的字符串数量。-c与wc命令一样可以统计字符数。<br>命令：<code>ifconfig | grep -c lo</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-cc.png" alt=""></p>
<p><strong>实例：8. 按给定的字符串搜索文件并显示行号</strong><br>描述：在find.txt文件中查找hello字符串，并显示所在的行。在编辑错误时调试文件，-n选项可以为文件中的行显示行号。<br>命令：<code>grep -n -i &quot;hello&quot; find.txt</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-n.png" alt=""></p>
<p><strong>实例：9. 匹配多个模式</strong><br>描述：在find.txt中搜索匹配Hello或者as的行。-e选项指定字符串作为查找文件的模式，可以使用多个。<br>命令：<code>grep find.txt -e Hello -e as</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-e.png" alt=""></p>
<p><strong>实例：10. 在所有目录中递归搜索字符串</strong><br>描述：在find.txt文件中查找hello字符串，并显示所在的行。-r可以递归搜索当前目录及其所有子目录。<br>命令：<code>grep -r -i &quot;hello&quot;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-r.png" alt=""></p>
<p>描述：-h参数将不显示该行所属的文件名称，默认-H是显示的。<br>命令：<code>grep -r -h -i &quot;hello&quot;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-r-h.png" alt=""></p>
<p><strong>实例：11. 搜索整个模式</strong><br>描述：从ifconfig的输出中搜索RUNNING字符串出现的行。<br>命令：<code>ifconfig | grep -w &quot;RUNNING&quot;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-regex.png" alt=""></p>
<p><strong>实例：12. 在gzip压缩文件中搜索</strong><br>描述：从find.tar.gz压缩包里查找hello字符串。<br>命令：<code>zgrep -i hello find.tar.gz</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-zgrep.png" alt=""></p>
<p><strong>实例：13. 搜索目录并列出内容含有指定字符串的文件名称</strong><br>描述：从/root目录下列出文件内容中含有Hello字样的文件名称，忽略大小写。-l列出的是符合指定字符串的文件名称，-L列出的是不符合指定字符串的文件名称。<br>命令：<code>grep -i -l Hello /root/*</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-l.png" alt=""></p>
<p><strong>实例：14. 只列出包含或者不包含的文件内容</strong><br>描述：在当前目录下所有以.txt结尾的文件中，列出文件内容中含有Hello字样的文件名称，忽略大小写。–include只搜索匹配正则表达式的文件。<br>命令：<code>grep -i -r hello . --include &quot;*.txt&quot;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-include.png" alt=""></p>
<p>描述：在当前目录下所有不以.txt结尾的文件中，列出文件内容中含有Hello字样的文件名称，忽略大小写。–exclude搜索不匹配正则表达式的文件。<br>命令：<code>grep -i -r hello . --exclude &quot;*.txt&quot;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-exclude.png" alt=""></p>
<h2 id="正则表达式用法"><a href="#正则表达式用法" class="headerlink" title="正则表达式用法"></a>正则表达式用法</h2><p><strong>实例：15. 显示所有以f开头的文件中包含hello的行</strong><br>描述：在当前目录下显示所有以f开头的文件中包含hello的行。<br>命令：<code>grep -i &#39;hello&#39; f*</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-regex-*.png" alt=""></p>
<p><strong>实例：16. 显示在多个文件中匹配hello的行</strong><br>描述：在当前目录下显示所有以f开头的文件中包含hello的行。<br>命令：<code>grep -i &#39;hello&#39; find.txt xy12.txt</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-regex-multiple.png" alt=""></p>
<p><strong>实例：17. 模式出现几率</strong><br>描述：在当前目录下所有文件中，搜索所有包含两个字母a的行。<br>命令：<code>grep &quot;a\{2\}&quot; find.txt</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-regex-probability.png" alt=""></p>
<p><strong>实例：18. 模式出现几率</strong><br>描述：在当前目录下所有文件中，搜索所有超过9个字母的单词的行。<br>命令：<code>grep -i &#39;[a-z]\{9\}&#39; find.txt</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-regex-number.png" alt=""></p>
<p>描述：-b选项将锁定为单词。<br>命令：<code>grep -i &#39;\b[a-z]\{9\}\b&#39; find.txt</code></p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-regex-number-b.png" alt=""></p>
<p>描述：搜索超过9个字母的单词的行。<br>命令：<code>grep -i &#39;\b[a-z]\{9,\}\b&#39; find.txt</code></p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-regex-number-to-more.png" alt=""></p>
<p>描述：搜索9-11个字母的单词的行。<br>命令：<code>grep -i &#39;\b[a-z]\{9,11\}\b&#39; find.txt</code></p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-regex-number-to-number.png" alt=""></p>
<p><strong>实例：19. 使用grep匹配「与」或者「或」模式</strong><br>描述：搜索see或者in字符串所在的行。-E选项使用扩展模式匹配。|表示两边之一或者全部，可以使用任意多的|。<br>命令：<code>grep -E &#39;see|in&#39; find.txt</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-regex-or.png" alt=""></p>
<p><strong>实例：20. 空行</strong><br>描述：搜索文件中所有的空行。结合^和<code>$</code>可查询空行。<br>命令：<code>grep -n &#39;^$&#39; find.txt</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-regex-blank-lines.png" alt=""></p>
<p><strong>实例：21. 匹配特殊字符</strong><br>描述：搜索含有特殊含义的字符，诸如<code>$.&#39;&quot;*[]^|\+?</code>，必须在特定字符前加\。<br>命令：<code>grep &quot;\^&quot; find.txt</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-regex-punct.png" alt=""></p>
<p><strong>实例：22. 分组</strong><br>描述：如果Hello被匹配，则ell就被存储到内存中，并标记为1，然后搜索任意个字符（.*），这些字符后面紧跟着另外一个ell（\1），找到就显示该行。如果用egrep或grep -E，就不用”\”号进行转义，直接写成’H(ell)o.*\1’就可以了。<br>命令：<code>grep -i &#39;H\(ell\)o.*\1&#39; find.txt</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-regex-group.png" alt=""></p>
<p><strong>实例：23. 复杂情况</strong><br>描述：搜索以tion，tions，come，comes结尾的单词。<br>命令：<code>egrep &quot;([a-z]*tion|come)(s)?&quot; find.txt</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-regex-complication.png" alt=""></p>
<!-- 使用 -f 用文件指定待查找的模式 https://linux.cn/article-5453-1.html -->
<h2 id="POSIX用法"><a href="#POSIX用法" class="headerlink" title="POSIX用法"></a>POSIX用法</h2><p><strong>实例：24. 搜索以字母或数字（Alphanumeric）开头的行</strong><br>描述：起始于[A-Z]，[a-z]，[0-9]。<br>命令：<code>grep &quot;^[[:alnum:]]&quot; iweeek</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-alphanumeric.png" alt=""></p>
<p><strong>实例：25. 搜索以字母（Alpha）开头的行</strong><br>描述：起始于[A-Z]，[a-z]。<br>命令：<code>grep &quot;^[[:alpha:]]&quot; iweeek</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-alpha.png" alt=""></p>
<p><strong>实例：26. 搜索以空白（Blank）字符串开头的行</strong><br>描述：起始于[Tab &amp; Space]。<br>命令：<code>grep &quot;^[[:blank:]]&quot; iweeek</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-blank.png" alt=""></p>
<p><strong>实例：27. 搜索以数字（Digit）字符串开头的行</strong><br>描述：起始于[0-9]。<br>命令：<code>grep &quot;^[[:digit:]]&quot; iweeek</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-digit.png" alt=""></p>
<p><strong>实例：28. 搜索以小写字母（Lower）字符串开头的行</strong><br>描述：起始于[a-z]。<br>命令：<code>grep &quot;^[[:lower:]]&quot; iweeek</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-lowercase.png" alt=""></p>
<p><strong>实例：29. 搜索以大写字母（Uppercase）字符串开头的行</strong><br>描述：起始于[A-Z]。<br>命令：<code>grep &quot;^[[:upper:]]&quot; iweeek</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-uppercase.png" alt=""></p>
<p><strong>实例：30. 搜索以标点符号（Punctuation）字符串开头的行</strong><br>描述：起始于[! ” # $ % &amp; ‘ ( ) * + , – . / : ; &lt; = &gt; ? @ [ \ ] ^ _ <code>{ | } ~. ]。
命令：</code>grep “^[[:puct:]]” iweeek`<br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-punctuation.png" alt=""></p>
<p><strong>实例：31. 搜索图形符号</strong><br>描述：字母数字和标点符号统称为图形字符。<br>命令：<code>grep &quot;^[[:graph:]]&quot; iweeek</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-graphical.png" alt=""></p>
<p><strong>实例：32. 搜索可打印的字符（Printable Characters）</strong><br>描述：可打印的字符包括：字母数字，标点符号和空格字符。<br>命令：<code>grep &quot;^[[:print:]]&quot; iweeek</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-printable.png" alt=""></p>
<p><strong>实例：33. 搜索空格字符（Space Characters）</strong><br>描述：类似于[tab, newline, vertical tab, form feed, carriage return, and space]。<br>命令：<code>grep &quot;^[[:space:]]&quot; iweeek</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-space.png" alt=""></p>
<p><strong>实例：34. 搜索以十六进制（Hexadecimal）字符串开头的行</strong><br>描述：起始于[0-9, A-F and a-f]。<br>命令：<code>grep &quot;^[[:xdigit:]]&quot; iweeek</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/grep/grep-hexadecimal.png" alt=""></p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-find.html</loc>
    <lastmod>2018-06-28T15:01:13.201Z</lastmod>
    <data>
        <display>
        <title>Linux find命令用法详解</title>
        <pubTime>2018-06-08T06:03:42.000Z</pubTime>   
         <content><p>find命令根据指定的条件查找文件和目录。查找可用于多种条件，例如通过权限，用户，组，文件类型，日期，大小和其他可能的条件来查找文件。</p>
<a id="more"></a>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>find pathname [options] [-print -exec -ok]</code></p>
<p>参数解释：<br>pathname：find命令所查找的目录路径。例如用.来表示当前目录，用/来表示系统根目录。<br>-print：find命令将匹配的文件输出到标准输出。<br>-exec：find命令将匹配的文件执行该参数所给出的shell命令。相应的命令的形式为’command’ {} \;，注意{}和\;之间的空格。<br>-ok：和-exec的作用相同，但会以一种更加安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。</p>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>find命令可以在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。</p>
<h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">- -amin&lt;分钟&gt;：查找在指定时间曾被存取过的文件或目录，单位以分钟计算；</span><br><span class="line">- -anewer&lt;参考文件或目录&gt;：查找其存取时间较指定文件或目录的存取时间更接近现在的文件或目录；</span><br><span class="line">- -atime&lt;24小时数&gt;：查找在指定时间曾被存取过的文件或目录，单位以24小时计算；</span><br><span class="line">- -cmin&lt;分钟&gt;：查找在指定时间之时被更改过的文件或目录；</span><br><span class="line">- -cnewer&lt;参考文件或目录&gt;查找其更改时间较指定文件或目录的更改时间更接近现在的文件或目录；</span><br><span class="line">- -ctime&lt;24小时数&gt;：查找在指定时间之时被更改的文件或目录，单位以24小时计算；</span><br><span class="line">- -daystart：从本日开始计算时间；</span><br><span class="line">- -depth：从指定目录下最深层的子目录开始查找；</span><br><span class="line">- -delete：删除文件，默认实现了depth选项。注意不要将delete放在find条件语句之前，不然有可能在执行查找之前，将该目录下的所有文件删除。</span><br><span class="line">- -expty：寻找文件大小为0 Byte的文件，或目录下没有任何子目录或文件的空目录；</span><br><span class="line">- -exec&lt;执行指令&gt;：假设find指令的回传值为True，就执行该指令；执行指令将为每一个匹配的文件执行一次。</span><br><span class="line">- -false：将find指令的回传值皆设为False；</span><br><span class="line">- -fls&lt;列表文件&gt;：此参数的效果和指定“-ls”参数类似，但会把结果保存为指定的列表文件；</span><br><span class="line">- -follow：排除符号连接；</span><br><span class="line">- -fprint&lt;列表文件&gt;：此参数的效果和指定“-print”参数类似，但会把结果保存成指定的列表文件；</span><br><span class="line">- -fprint0&lt;列表文件&gt;：此参数的效果和指定“-print0”参数类似，但会把结果保存成指定的列表文件；</span><br><span class="line">- -fprintf&lt;列表文件&gt;&lt;输出格式&gt;：此参数的效果和指定“-printf”参数类似，但会把结果保存成指定的列表文件；</span><br><span class="line">- -fstype&lt;文件系统类型&gt;：只寻找该文件系统类型下的文件或目录；</span><br><span class="line">- -gid&lt;群组识别码&gt;：查找符合指定之群组识别码的文件或目录；</span><br><span class="line">- -group&lt;群组名称&gt;：查找符合指定之群组名称的文件或目录；</span><br><span class="line">- -help或——help：在线帮助；</span><br><span class="line">- -ilname&lt;范本样式&gt;：此参数的效果和指定“-lname”参数类似，但忽略字符大小写的差别；</span><br><span class="line">- -iname&lt;范本样式&gt;：此参数的效果和指定“-name”参数类似，但忽略字符大小写的差别；</span><br><span class="line">- -inum&lt;inode编号&gt;：查找符合指定的inode编号的文件或目录；</span><br><span class="line">- -ipath&lt;范本样式&gt;：此参数的效果和指定“-path”参数类似，但忽略字符大小写的差别；</span><br><span class="line">- -iregex&lt;范本样式&gt;：此参数的效果和指定“-regexe”参数类似，但忽略字符大小写的差别；</span><br><span class="line">- -links&lt;连接数目&gt;：查找符合指定的硬连接数目的文件或目录；</span><br><span class="line">- -iname&lt;范本样式&gt;：指定字符串作为寻找符号连接的范本样式；</span><br><span class="line">- -ls：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出；</span><br><span class="line">- -maxdepth&lt;目录层级&gt;：设置最大目录层级；</span><br><span class="line">- -mindepth&lt;目录层级&gt;：设置最小目录层级；</span><br><span class="line">- -mmin&lt;分钟&gt;：查找在指定时间曾被更改过的文件或目录，单位以分钟计算；</span><br><span class="line">- -mount：此参数的效果和指定“-xdev”相同；</span><br><span class="line">- -mtime&lt;24小时数&gt;：查找在指定时间曾被更改过的文件或目录，单位以24小时计算；</span><br><span class="line">- -name&lt;范本样式&gt;：指定字符串作为寻找文件或目录的范本样式；</span><br><span class="line">- -newer&lt;参考文件或目录&gt;：查找其更改时间较指定文件或目录的更改时间更接近现在的文件或目录；</span><br><span class="line">- -nogroup：找出不属于本地主机群组识别码的文件或目录；</span><br><span class="line">- -noleaf：不去考虑目录至少需拥有两个硬连接存在；</span><br><span class="line">- -nouser：找出不属于本地主机用户识别码的文件或目录；</span><br><span class="line">- -ok&lt;执行指令&gt;：此参数的效果和指定“-exec”类似，但在执行指令之前会先询问用户，若回答“y”或“Y”，则放弃执行命令；</span><br><span class="line">- -path&lt;范本样式&gt;：指定字符串作为寻找目录的范本样式；</span><br><span class="line">- -perm&lt;权限数值&gt;：查找符合指定的权限数值的文件或目录；</span><br><span class="line">- -print：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式为每列一个名称，每个名称前皆有“./”字符串；</span><br><span class="line">- -print0：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式为全部的名称皆在同一行；</span><br><span class="line">- -printf&lt;输出格式&gt;：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式可以自行指定；</span><br><span class="line">- -prune：不寻找字符串作为寻找文件或目录的范本样式;</span><br><span class="line">- -regex&lt;范本样式&gt;：指定字符串作为寻找文件或目录的范本样式；</span><br><span class="line">- -size&lt;文件大小&gt;：查找符合指定的文件大小的文件；</span><br><span class="line">- -true：将find指令的回传值皆设为True；</span><br><span class="line">- -typ&lt;文件类型&gt;：只寻找符合指定的文件类型的文件；</span><br><span class="line">- -uid&lt;用户识别码&gt;：查找符合指定的用户识别码的文件或目录；</span><br><span class="line">- -used&lt;日数&gt;：查找文件或目录被更改之后在指定时间曾被存取过的文件或目录，单位以日计算；</span><br><span class="line">- -user&lt;拥有者名称&gt;：查找符和指定的拥有者名称的文件或目录；</span><br><span class="line">- -version或——version：显示版本信息；</span><br><span class="line">- -xdev：将范围局限在先行的文件系统中；</span><br><span class="line">- -xtype&lt;文件类型&gt;：此参数的效果和指定“-type”参数类似，差别在于它针对符号连接检查。</span><br><span class="line">动作参数：</span><br></pre></td></tr></table></figure>
<h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2><p>按照查找条件的不同，可以将 44 个查找命令示例分为五个部分。</p>
<ul>
<li><a href="#第一部分：根据名称查找文件"><em>第一部分：根据名称查找文件</em></a></li>
<li><a href="#第二部分：根据权限查找文件"><em>第二部分：根据权限查找文件</em></a></li>
<li><a href="#第三部分：根据所有者和组查找文件"><em>第三部分：根据所有者和组查找文件</em></a></li>
<li><a href="#第四部分：根据日期和时间查找"><em>第四部分：根据日期和时间查找</em></a></li>
<li><a href="#第五部分：根据大小查找文件和目录"><em>第五部分：根据大小查找文件和目录</em></a></li>
<li><a href="#第六部分：根据文件内容或路径查找"><em>第六部分：根据文件内容或路径查找</em></a></li>
<li><a href="#第七部分：借助exec或ok选项来执行shell命令"><em>第七部分：借助exec或ok选项来执行shell命令</em></a></li>
</ul>
<h2 id="第一部分：根据name或type查找文件"><a href="#第一部分：根据name或type查找文件" class="headerlink" title="第一部分：根据name或type查找文件"></a>第一部分：根据name或type查找文件</h2><p><strong>实例：1. 列出当前目录及子目录下所有文件和文件夹</strong><br>命令：<code>find . 等同于 find . -name &quot;*&quot;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/find/find-all.png" alt=""></p>
<p><strong>实例：2. 指定目录下使用名称查找文件</strong><br>描述：在当前目录下查找名字（name）为find.txt的文件。<br>命令：<code>find . -name find.txt</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/find/find-name.png" alt=""></p>
<p><strong>实例：3. 使用名称查找文件并忽略大小写</strong><br>描述：在当前目录找到名称为find.txt的文件，忽略大小写(iname)。<br>命令：<code>find . -iname find.txt</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/find/find-iname.png" alt=""></p>
<p><strong>实例：4. 根据文件类型查找</strong></p>
<p>形式：find . -type 类型参数</p>
<p>类型参数列表：</p>
<ul>
<li>f：普通文件</li>
<li>l：符号连接</li>
<li>d：目录</li>
<li>c：字符设备</li>
<li>b：块设备</li>
<li>s：套接字</li>
<li>p: Fifo</li>
</ul>
<p>描述：在指定目录中找到名称为find（name find）的文件（type f）。<br>命令：<code>find / -type f -name find</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/find/find-type-f.png" alt=""></p>
<p>描述：在指定目录中找到名称为findd（name findd）的目录（type d）。<br>命令：<code>find / -type d -name findd</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/find/find-type-d.png" alt=""></p>
<p><strong>实例：5. 根据目录深度搜索</strong></p>
<p>描述：从文件系统的根目录开始，查找一个名为xyz.txt的文件，find将首先匹配所有的文件然后再进入子目录中查找。<br>命令：<code>find / -depth -name &quot;xyz.txt&quot;</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/find/find-depth.png" alt=""></p>
<p>描述：搜索出深度距离当前目录最多3个子目录的所有文件。<br>命令：<code>find /home/nijun -maxdepth 3 -type f</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/find/find-maxdepth.png" alt=""></p>
<p>描述：搜索出深度距离当前目录至少2个子目录的所有文件。<br>命令：<code>find /home/nijun -mindepth 2 -type f</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/find/find-mindepth.png" alt=""></p>
<p><strong>实例：5. 使用通配符查找文件</strong><br>描述：在指定目录中找到所有以.txt或(-o).mp3结尾的文件。<br>命令：<code>find . -type f -name &quot;*.txt&quot; -o -name &quot;*.mp3&quot;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/find/find-name-or.png" alt=""></p>
<p>描述：在当前目录查找文件名以两个小写字母开头，跟着是两个数字，最后是*.txt的文件。-print选项会输出到标准输出中。<br>命令：<code>find . -name &quot;[a-z][a-z][0-9][0-9].txt&quot; -print</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/find/find-name-wildcard.png" alt=""></p>
<h2 id="第二部分：根据权限查找文件"><a href="#第二部分：根据权限查找文件" class="headerlink" title="第二部分：根据权限查找文件"></a>第二部分：根据权限查找文件</h2><p><strong>实例：6. 查找符合指定的权限数值的文件或目录</strong><br>描述：查找权限为777的文件。-print将文件或目录的名称列出到标准输出，格式为每列一个名称。<br>命令：<code>find . -type f -perm 777 -print</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/find/find-perm.png" alt=""></p>
<p><strong>实例：7. 查找不符合指定的权限数值的文件或目录</strong><br>描述：查找权限不为777的文件。<br>命令：<code>find . -type f ! -perm 777</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/find/find-!-perm.png" alt=""></p>
<p><strong>实例：8. 查找所有权限为644的SGID文件</strong><br>描述：在指定目录中找到名称为find的文件。<br>命令：<code>find . -perm 2644</code></p>
<p><strong>实例：9. 查找所有权限为551的Stickt Bit文件</strong><br>命令：<code>find / -perm 1511</code></p>
<p><strong>实例：10. 找到所有SUID文件</strong><br>命令：<code>find / -perm /u=s</code></p>
<p><strong>实例：11. 找到所有SGID文件</strong><br>命令：<code>find / -perm /g=s</code></p>
<p><strong>实例：12. 查找所有只读文件</strong><br>命令：<code>find . -perm /u=r</code></p>
<p><strong>实例：13. 查找所有可执行文件</strong><br>命令：<code>find . -perm /a=x</code></p>
<p><strong>实例：13. 查找对所有人可读的文件</strong><br>描述：在主目录中查找对所有人可读的文件。<br>命令：<code>find ~ -perm -o=r</code></p>
<p><strong>实例：14. 查找所有权限为777的文件，将其改为644</strong><br>命令：<code>find / -type f -perm 0777 -print -exec chmod 644{} \;</code></p>
<p><strong>实例：15. 查找所有权限为777的目录，将其改为755</strong><br>命令：<code>find / -type d -perm 777 -print -exec chmod 755{} \;</code></p>
<p><strong>实例：16. 查找并删除单个文件</strong><br>命令：<code>find . -type f -name &quot;test.log&quot; -exec rm -f {} \;</code></p>
<p><strong>实例：17. 查找并删除多个文件</strong><br>命令：<code>find . -type f -name &quot;*.txt&quot; -exec rm -f {} \;</code></p>
<p><strong>实例：18. 查找所有空文件</strong><br>命令：<code>find . -type f -empty</code></p>
<p><strong>实例：19. 查找所有空目录</strong><br>命令：<code>find . -type d -empty</code></p>
<p><strong>实例：20. 查找所有隐藏文件</strong><br>描述：在当前目录下查找所有隐藏文件（dotfile）。<br>命令：<code>find . -type f -name &quot;.*&quot;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/find/find-dotfile.png" alt=""></p>
<p><strong>实例：20. 忽略某个目录</strong><br>描述：-prune选项指出需要忽略的目录，如果使用了-depth选项，那么-prune选项会被find命令忽略。<br>命令：<code>find . -name &quot;best&quot; -prune -o -print</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/find/find-prune.png" alt=""></p>
<h2 id="第三部分：根据所有者和组查找文件"><a href="#第三部分：根据所有者和组查找文件" class="headerlink" title="第三部分：根据所有者和组查找文件"></a>第三部分：根据所有者和组查找文件</h2><p><strong>实例：21. 查找基于用户的单个文件</strong><br>描述：查找文件属主为root的find.txt文件。-user指定文件拥有者的名字，也可以是UID。<br>命令：<code>find . -user root -name find.txt</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/find/find-user-name.png" alt=""></p>
<p><strong>实例：22. 查找所有用户文件</strong><br>命令：<code>find . -user root</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/find/find-user.png" alt=""></p>
<p><strong>实例：22. 查找没有有效账户的文件</strong><br>描述：-nouser选项查找那些属主在/etc/passwd文件中没有有效账户的文件。<br>命令：<code>find /home -nouser -print</code></p>
<p><strong>实例：23. 查找基于组的文件</strong><br>命令：<code>find . -group root</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/find/find-group.png" alt=""></p>
<p><strong>实例：22. 查找没有有效用户组的文件</strong><br>描述：-nogroup选项查找没有有效所属用户组的所有文件。<br>命令：<code>find / -nogroup -print</code> </p>
<p><strong>实例：24. 查找用户特定的文件</strong><br>命令：<code>find . -user root -iname &quot;*.txt&quot;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/find/find-user-wildcard.png" alt=""></p>
<h2 id="第四部分：根据日期和时间查找"><a href="#第四部分：根据日期和时间查找" class="headerlink" title="第四部分：根据日期和时间查找"></a>第四部分：根据日期和时间查找</h2><p>形式：<code>find . -type f 时间戳</code></p>
<p>UNIX/Linux文件系统每个文件都有三种时间戳：</p>
<ul>
<li>访问时间 （-atime/天，-amin/分钟）：用户最近一次访问时间。</li>
<li>修改时间 （-mtime/天，-mmin/分钟）：文件最后一次修改时间。</li>
<li>变化时间 （-ctime/天，-cmin/分钟）：文件数据元（例如权限等）最后一次修改时间。</li>
</ul>
<p>除非你确切地知道你想要的时间，否则可能需要在 + （大于）或 - （小于）的后面加上数字。</p>
<p>/home/nijun/images目录中文件:<br><img src="http://p9xqnn501.bkt.clouddn.com/find/find-ls.png" alt=""></p>
<p><strong>实例：25. 查找3天以前被修改过的所有文件</strong><br>命令：<code>find . -mtime +3</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/find/find-mtime-after.png" alt=""></p>
<p><strong>实例：26. 查找5天以内被访问过的所有文件</strong><br>命令：<code>find . -atime -5</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/find/find-atime-before.png" alt=""></p>
<p><strong>实例：26. 查找恰好4天前访问过的文件</strong><br>命令：<code>find . -atime 4</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/find/find-atime.png" alt=""></p>
<p><strong>实例：27. 查找2-7天前访问过的文件</strong><br>描述：在当前目录中查找两天以前，七天以内的文件。<br>命令：<code>find . -mtime +2 -mtime -7</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/find/find-mtime-between.png" alt=""></p>
<p><strong>实例：28. 查找在1小时之内改变过（Changed）的文件或目录</strong><br>描述：在当前目录查找在1小时之内改变过的文件或目录，mmin和amin同理。<br>命令：<code>find . -cmin -60</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/find/find-c.png" alt=""></p>
<p><strong>实例：30. 查找比某个文件新或旧的文件</strong><br>一般形式：newest_file_name ! oldest_file_name<br>描述：查找更改时间比文件brooke-lark-275181.jpg新但比文件abc.txt旧的所有文件。<br>命令：<code>find . -type f -newer brooke-lark-275181.jpg ! -newer abc.txt</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/find/find-newer.png" alt=""></p>
<p><strong>实例：30. 新建指定时间戳文件查找时间范围内的文件</strong><br>描述：使用touch -t命令新建一个自定义时间戳（6月6日8点30分）的文件，用来满足时间范围查找的要求。然后查找比这个文件更新的文件或目录。<br>命令：<code>touch -t 06060830 dstamp</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/find/find-touch.png" alt=""></p>
<p>命令：<code>find . -newer det/dstamp  -print</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/find/find-newfile-newer.png" alt=""></p>
<p><strong>实例：30. 筛选出上周拍的照片</strong><br>描述：在/home/nijun目录下，忽略大小写地查找以.jpeg和.jpg为后缀的，修改时间在七天以内的所有文件。<br>命令：<code>find /home/nijun -iname &#39;*.jpeg&#39; -o -iname &#39;*.jpg&#39; -type f -mtime -7</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/find/find-images.png" alt=""></p>
<h2 id="第五部分：根据大小查找文件和目录"><a href="#第五部分：根据大小查找文件和目录" class="headerlink" title="第五部分：根据大小查找文件和目录"></a>第五部分：根据大小查找文件和目录</h2><p>形式：<code>find . -type f -size 文件大小单元</code></p>
<p>文件大小单元：</p>
<ul>
<li>b —— 块（512字节）</li>
<li>c —— 字节</li>
<li>w —— 字（2字节）</li>
<li>k —— 千字节</li>
<li>M —— 兆字节</li>
<li>G —— 吉字节</li>
</ul>
<p><strong>实例：31. 查找文件大小恰好等于31MB的所有文件</strong><br>描述：在当前目录下查找文件大小恰好等于31MB的所有文件。<br>命令：<code>find . -size 31M</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/find/find-size.png" alt=""></p>
<p><strong>实例：31. 查找文件大小小于10MB的文件</strong><br>描述：在当前目录下查找文件大小小于10MB的所有文件。<br>命令：<code>find . -size 10M</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/find/find-size-smaller.png" alt=""></p>
<p><strong>实例：31. 查找文件大小大于5MB的文件</strong><br>描述：在当前目录下查找文件大小大于5MB的所有文件。<br>命令：<code>find . -size +5M</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/find/find-size-bigger.png" alt=""></p>
<p><strong>实例：32. 查找所有大小在5MB-10MB之间的文件</strong><br>描述：在当前目录下查找文件大小在5MB到10MB的所有文件。<br>命令：<code>find . -size +5M -size -10M</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/find/find-size-between.png" alt=""></p>
<p><strong>实例：33. 查找并删除巨大的（假设大于1G）文件</strong><br>描述：-delete选项可以代替rm命令删除查找到的文件。<br>命令：<code>find . -size +1G -exec rm -rf {} \;</code><br>或者：<code>find . -size +1G -delete</code></p>
<p><strong>实例：34. 查找指定文件并删除</strong><br>描述：查找以.mp3为后缀，文件大于10M（-size +10M）的所有文件（-type f），并执行（-exec）删除命令删除之。<br>命令：<code>find . -type f -name *.mp3 -size +10M -exec rm {} \;</code></p>
<h2 id="第六部分：根据文件内容或路径查找"><a href="#第六部分：根据文件内容或路径查找" class="headerlink" title="第六部分：根据文件内容或路径查找"></a>第六部分：根据文件内容或路径查找</h2><p><strong>实例：35. 根据文件内容查找</strong><br>描述：查找当前目录下的所有文件中，内容含有hello的所有行。<br>命令：<code>find . -type f -name &quot;*&quot; | xargs grep &quot;hello&quot;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/find/find-type-f-xargs-grep.png" alt=""></p>
<p><strong>实例：36. 匹配文件路径或者文件</strong><br>描述：查找/usr目录下所有路径中带有local字样的文件或目录。<br>命令：<code>find /usr/ -path &quot;*local*&quot;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/find/find-path.png" alt=""></p>
<p><strong>实例：37. 基于正则表达式匹配文件路径</strong><br>描述：用-regex查找以.txt或.mp3结尾的文件。-iregex则是忽略大小写。<br>命令：<code>find . -regex &quot;.*\(\.txt\|\.mp3\)$&quot;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/find/find-regex.png" alt=""></p>
<p><strong>实例：38. 使用mount选项</strong><br>描述：在当前的文件系统中查找文件（不进入其他文件系统）查找以.txt结尾的文件。<br>命令：<code>find . -mount -name &quot;*.txt&quot;  -print</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/find/find-mount.png" alt=""></p>
<h2 id="第七部分：借助exec或ok选项来执行shell命令"><a href="#第七部分：借助exec或ok选项来执行shell命令" class="headerlink" title="第七部分：借助exec或ok选项来执行shell命令"></a>第七部分：借助exec或ok选项来执行shell命令</h2><p><strong>实例：38. 与chown命令结合使用</strong><br>描述：找出当前目录下所有root的文件，并把所有权更改为用户jack。 {} 用于与 -exec 选项结合使用来匹配所有文件，然后会被替换为相应的文件名。<br>命令：<code>find . -type f -user root -exec chown jack {} \;</code></p>
<p><strong>实例：39. 与rm命令结合使用</strong><br>描述：找出当前目录下最近一天内修改的所有文件并删除它们。-ok 和 -exec 行为一样，不过它会给出提示，是否执行相应的操作。按y键删除文件，按n键不删除。<br>命令：<code>find . -mtime -1 -ok rm {} \;</code></p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/find/find-ok-rm.png" alt=""></p>
<p><strong>实例：40. 与cat命令结合使用</strong><br>描述：查找当前目录下所有.txt文件并把他们拼接起来写入到all.txt文件中。<br>命令：<code>find . -type f -name &quot;*.txt&quot; -exec cat {} \; &gt; all.txt</code></p>
<p><strong>实例：41. 与cp结合使用</strong><br>描述：查找当前目录下30天以前并且以.log结尾的文件，将它们拷贝到./old目录中。<br>命令：<code>find . -type f -mtime +30 -name &quot;*.log&quot; -exec cp {} old \;</code></p>
<p><strong>实例：41. 与grep结合使用</strong><br>描述：查找/etc目录下名字带有passwd的文件中，含有nijun字样的内容。<br>命令：<code>find /etc -name &quot;passwd*&quot; -exec grep &quot;nijun&quot; {} \;</code></p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/find/find-grep.png" alt=""></p>
<p><strong>实例：42. 与printf结合使用</strong><br>描述：找出当前目录下所有.txt文件并以“File:文件名”的形式打印出来。<br>命令：<code>find . -type f -name &quot;*.txt&quot; -exec printf &quot;File: %s\n&quot; {} \;</code></p>
<p><strong>实例：43. 执行多条命令</strong><br>描述：因为单行命令中-exec参数中无法使用多个命令，以下方法可以实现在-exec之后接受多条命令。<br>命令：<code>-exec ./text.sh {} \;</code></p>
<p><strong>实例：44. 搜索但跳出指定的目录</strong><br>描述：查找当前目录或者子目录下所有.txt文件，但是跳过子目录output。<br>命令：<code>find . -path &quot;./output&quot; -prune -o -name &quot;*.txt&quot; -print;</code></p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-echo.html</loc>
    <lastmod>2018-06-28T15:01:13.200Z</lastmod>
    <data>
        <display>
        <title>Linux echo命令用法详解</title>
        <pubTime>2018-06-03T08:43:46.000Z</pubTime>   
         <content><p>echo用来在标准输出或者文件中显示一行文本或者字符串。</p>
<a id="more"></a>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>echo [选项] [字符串]</code></p>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>echo命令是内建的shell命令，用于显示变量的值或者打印一行文本。当echo命令不带任何选项或字符串使用时，它会在显示屏上返回一个空白行，后面换一行跟上命令提示符。这是因为按下回车键就是发送一个信号给系统以开始一个新行，而echo重复了该信号。</p>
<h2 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h2><ul>
<li>-n 不要在echo命令输出后换行。</li>
<li>-e 使反斜线转义生效。</li>
<li>-E 使反斜线转义失效（默认）。</li>
</ul>
<p>如果使用-e选项，则可以使用如下转义序列：</p>
<ul>
<li>\ 反斜线</li>
<li>\a 警告（BEL）</li>
<li>\b 退格</li>
<li>\c 不产生进一步输出，不换行。</li>
<li>\e 转义</li>
<li>\f 换页</li>
<li>\n 新行</li>
<li>\r 换行字符</li>
<li>\t 水平制表</li>
<li>\v 垂直制表</li>
<li>\0NNN 八进制值表示的字节NNN（1到3个数字）</li>
<li>\xHH 十六进制值表示的字节NNN（1到2个数字）</li>
</ul>
<h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2><p><strong>实例：1. 输入一行文本并显示在标准输出上</strong><br>命令：<code>echo A Linux-based system is a modular Unix-like operating system.</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/echo/echo.png" alt=""></p>
<p><strong>实例：2. 输出一个声明的变量值</strong><br>命令：<code>echo The value of variable x = $x</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/echo/echo-variable.png" alt=""></p>
<p><strong>实例：3. 使用\b选项</strong><br>命令：<code>echo -e &quot;A \bLinux-based \bsystem \bis \ba \bmodular \bUnix-like \boperating \bsystem.&quot;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/echo/echo-b.png" alt=""></p>
<p><strong>实例：4. 显示系统定义的变量的值</strong><br>命令：<code>echo $USER $HOME</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/echo/echo-$.png" alt=""></p>
<p><strong>实例：5. 使用\n选项</strong><br>命令：<code>echo -e &quot;A \nLinux-based \nsystem \nis \na \nmodular \nUnix-like \noperating \nsystem.&quot;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/echo/echo-n.png" alt=""></p>
<p><strong>实例：6. 使用\t选项</strong><br>命令：<code>echo -e &quot;A \tLinux-based \tsystem \tis \ta \tmodular \tUnix-like \toperating \tsystem.&quot;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/echo/echo-t.png" alt=""></p>
<p><strong>实例：7. 同时使用换行\n与水平制表符\t</strong><br>命令：<code>echo -e &quot;\n\tA \n\tLinux-based \n\tsystem \n\tis \n\ta \n\tmodular \n\tUnix-like \n\toperating \n\tsystem.&quot;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/echo/echo-n-t.png" alt=""></p>
<p><strong>实例：8. 使用\v选项</strong><br>命令：<code>echo -e &quot;A \vLinux-based \vsystem \vis \va \vmodular \vUnix-like \voperating \vsystem.&quot;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/echo/echo-v.png" alt=""></p>
<p><strong>实例：9. 同时使用换行\n与垂直制表符\v</strong><br>命令：<code>echo -e &quot;\n\vA \n\vLinux-based \n\vsystem \n\vis \n\va \n\vmodular \n\vUnix-like \n\voperating \n\vsystem.&quot;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/echo/echo-n-v.png" alt=""></p>
<p><strong>实例：10. 使用\r选项</strong><br>命令：<code>echo -e &quot;A \rLinux-based system is a modular Unix-like operating system.&quot;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/echo/echo-r.png" alt=""></p>
<p><strong>实例 11. 使用\c选项</strong><br>命令：<code>echo -e &quot;A Linux-based system \cis a modular Unix-like operating system.&quot;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/echo/echo-c.png" alt=""></p>
<p><strong>实例：12. -n会在echo完后不会输出新行</strong><br>命令：<code>echo -n &quot;A Linux-based system is a modular Unix-like operating system.&quot;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/echo/echo--n.png" alt=""></p>
<p><strong>实例：13. 使用\a选项</strong><br>描述：-e后面跟上\a选项会听到声音警告。<br>命令：<code>echo -e &quot;A Linux-based system is a \amodular Unix-like operating system.&quot;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/echo/echo-a.png" alt=""></p>
<p><strong>实例：14. 使用echo命令打印所有的文件和文件夹（ls命令的替代）</strong><br>命令：<code>echo *</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/echo/echo-*.png" alt=""></p>
<p><strong>实例：15. 打印制定的文件类型</strong><br>描述：打印所有的以.txt结尾的文件。<br>命令：<code>echo *.txt</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/echo/echo-*-txt.png" alt=""></p>
<p><strong>实例：16. echo可以使用重定向符来输出到一个文件而不是标准输出</strong><br>命令：<code>echo &quot;A Linux-based system is a modular Unix-like operating system.&quot; &gt; linux.txt</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/echo/echo-redirect.png" alt=""></p>
<p><strong>实例：17. 设置echo命令彩色输出</strong><br>echo命令可以修改字体类型，字体背景色以及字体颜色，转义序列\033可以用于改变字体属性。要使转义序列生效，必须使用-e选项。下面列出了部分转义代码：</p>
<ul>
<li>[0m: 正常</li>
<li>[1m: 粗体</li>
<li>[4m: 字体加上下划线</li>
<li>[7m: 逆转前景和背景色</li>
<li>[8m: 不可见字符</li>
<li>[9m: 跨行字体</li>
<li>[30m: 灰色字体</li>
<li>[31m: 红色字体</li>
<li>[32m: 绿色字体</li>
<li>[33m: 棕色字体</li>
<li>[34m: 蓝色字体</li>
<li>[35m: 紫色字体</li>
<li>[36m: 浅蓝色字体</li>
<li>[37m: 浅灰字体</li>
<li>[38m: 黑色字体</li>
<li>[40m: 黑色背景</li>
<li>[41m: 红色背景</li>
<li>[42m: 绿色背景</li>
<li>[43m: 棕色背景</li>
<li>[44m: 蓝色背景</li>
<li>[45m: 紫色背景</li>
<li>[46m: 浅蓝色背景</li>
<li>[47m: 浅灰色背景</li>
</ul>
<p>描述：Magic of Linux变成粗体，of Linux将逆转前景和背景色，并且底色是绿色的。<br>命令：<code>echo -e &quot;\033[1mMagic \033[32m\033[7mof Linux\033[0m&quot;</code><br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/echo/echo-033.png" alt=""></p>
<p><strong>实例：17. 在文本中用抑音符来执行命令</strong><br>命令：echo “$LOGNAME carried them out at `date`“<br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/echo/echo-date.png" alt=""></p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-du.html</loc>
    <lastmod>2018-06-28T15:01:13.200Z</lastmod>
    <data>
        <display>
        <title>Linux du命令用法详解</title>
        <pubTime>2018-06-10T21:50:41.000Z</pubTime>   
         <content><p>du命令显示文件和目录的磁盘使用空间。</p>
<a id="more"></a>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p>du [选项] [文件]</p>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>du（disk usage 的简称）命令用于检查计算机上文件和目录的磁盘使用情况，可以递归显示文件和目录。显示每个文件和目录的磁盘使用空间。</p>
<h2 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h2><ul>
<li>-a或-all：显示目录中个别文件的大小。   </li>
<li>-b或-bytes：显示目录或文件大小时，以byte为单位。   </li>
<li>-c或–total：除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。 </li>
<li>-k或–kilobytes：以KB(1024bytes)为单位输出。</li>
<li>-m或–megabytes：以MB为单位输出。   </li>
<li>-s或–summarize：仅显示总计，只列出最后加总的值。</li>
<li>-h或–human-readable：以K，M，G为单位，提高信息的可读性。</li>
<li>-x或–one-file-xystem：以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。 </li>
<li>-L&lt;符号链接&gt;或–dereference&lt;符号链接&gt;：显示选项中所指定符号链接的源文件大小。   </li>
<li>-S或–separate-dirs：显示个别目录的大小时，并不含其子目录的大小。 </li>
<li>-X&lt;文件&gt;或–exclude-from=&lt;文件&gt;：在&lt;文件&gt;指定目录或文件。   </li>
<li>–exclude=&lt;目录或文件&gt;：略过指定的目录或文件。    </li>
<li>-D或–dereference-args ：显示指定符号链接的源文件大小。   </li>
<li>-H或–si：与-h参数相同，但是K，M，G是以1000为换算单位。   </li>
<li>-l或–count-links：重复计算硬件链接的文件。  </li>
</ul>
<h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2><p><strong>实例：1. 找出 <code>/root</code> 目录树及其每个子目录的磁盘使用情况摘要</strong><br>描述：以下命令的输出显示了 <code>/root</code> 目录以及其子目录的磁盘块数。<br>命令：du /root<br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/du/du-path.png" alt=""></p>
<p><strong>实例：2. 以人类可读格式也就是 kb、mb 等显示文件/目录大小</strong><br>命令：du -h /root<br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/du/du-h-path.png" alt=""></p>
<p><strong>实例：3. 目录的总磁盘使用大小摘要</strong><br>命令：du -s /root<br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/du/du-s-path.png" alt=""></p>
<p><strong>实例：4. 所有文件和目录的磁盘使用情况</strong><br>命令：du -a /root<br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/du/du-a-path.png" alt=""></p>
<p><strong>实例：5. 总的使用磁盘空间</strong><br>描述：-c选项在最后一行提供了一个总的使用磁盘空间。<br>命令：du -c /root<br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/du/du-c-path.png" alt=""></p>
<p><strong>实例：6. 排除给定模式的文件或目录</strong><br>描述：在计算/root的总大小时排除.ssh文件。<br>命令：du -h –exclude=”.ssh” /root<br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/du/du-h-exclude-path.png" alt=""></p>
<p><strong>实例：7. 根据修改时间显示磁盘使用情况</strong><br>描述：在计算/root的总大小时排除.ssh文件。<br>命令：du -h –exclude=”.ssh” /root<br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/du/du-time.png" alt=""></p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-df.html</loc>
    <lastmod>2018-06-28T15:01:13.199Z</lastmod>
    <data>
        <display>
        <title>Linux df命令用法详解</title>
        <pubTime>2018-06-16T22:16:12.000Z</pubTime>   
         <content><p>df命令用于显示文件系统磁盘空间使用情况。</p>
<a id="more"></a>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p>df [选项] [文件]</p>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>df（disk filesystem 的简称）用于显示文件系统磁盘空间使用情况。默认显示单位为KB。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p>
<h2 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h2><ul>
<li>-a或–all：全部文件系统列表。</li>
<li>-h或–human-readable：方便阅读方式显示。</li>
<li>-H或–si：等于“-h”，但是计算式，1K=1000，而不是1K=1024。</li>
<li>-i或–inodes：显示inode信息。</li>
<li>-k或–kilobytes：区块为1024字节。</li>
<li>-l或–local：只显示本地文件系统。</li>
<li>-m或–megabytes：区块为1048576字节。</li>
<li>–no-sync：忽略sync命令。</li>
<li>-P或–portability：输出格式为POSIX。</li>
<li>–sync：在取得磁盘信息前，先执行sync命令。</li>
<li>-T或–print-type：文件系统类型。</li>
<li>–block-size=&lt;区块大小&gt;：指定区块大小。</li>
<li>-t&lt;文件系统类型&gt;或–type=&lt;文件系统类型&gt;：只显示选定文件系统的磁盘信息。</li>
<li>-x&lt;文件系统类型&gt;或–exclude-type=&lt;文件系统类型&gt;：不显示选定文件系统的磁盘信息。</li>
<li>–help：显示帮助信息。</li>
<li>–version：显示版本信息。</li>
</ul>
<h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2><p><strong>实例：1. 检查文件系统磁盘空间使用情况</strong><br>描述：显示设备名称、总块数、总磁盘空间、已用磁盘空间、可用磁盘空间和文件系统上的挂载点。<br>命令：df<br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/df/df.png" alt=""></p>
<p><strong>实例：2. 以人类可读的格式显示磁盘使用情况</strong><br>描述：以人类可读格式显示信息。<br>命令：df -h<br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/df/df-h.png" alt=""></p>
<p><strong>实例：3. 检查所有文件系统磁盘使用空间信息</strong><br>描述：与上述相同，但它也显示虚拟文件系统的信息以及所有文件系统磁盘使用情况和内存使用情况。<br>命令：df -a<br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/df/df-a.png" alt=""></p>
<p><strong>实例：4. 显示文件系统的类型</strong><br>描述：以人类可读格式（h）显示文件系统的类型（T）信息。<br>命令：df -hT<br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/df/df-hT.png" alt=""></p>
<p><strong>实例：5. 检查特定分区的信息</strong><br>描述：-hT将以可读格式显示/root的信息。<br>命令：df -hT /root<br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/df/df-hT-path.png" alt=""></p>
<p><strong>实例：6. 筛选指定的文件系统类型</strong><br>描述：筛选文件系统类型为ext4的磁盘使用情况。<br>命令：df -t ext4 -hT<br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/df/df-t.png" alt=""></p>
<p><strong>实例：7. 排除指定的文件系统类型</strong><br>描述：排除文件系统类型为ext4的磁盘，显示剩下的磁盘类型使用情况。<br>命令：df -x ext4 -hT<br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/df/df-x.png" alt=""></p>
<p><strong>实例：8. 显示文件系统的inodes信息</strong><br>描述：-i选项显示文件系统使用的inode数量及其百分比的信息。<br>命令：df -i<br>输出：</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/df/df-i.png" alt=""></p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-date.html</loc>
    <lastmod>2018-06-28T15:01:13.198Z</lastmod>
    <data>
        <display>
        <title>Linux date命令用法详解</title>
        <pubTime>2018-06-19T08:10:19.000Z</pubTime>   
         <content><p>date命令用来显示或设置系统时间与日期。</p>
<a id="more"></a>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>date命令用来显示或设置系统时间与日期。date命令可以打印不同格式的时间或日期，被用来根据时间和日期执行操作。<br>在类UNIX系统中，日期被存储为一个整数，其大小为自世界标准时间（UTC）1970年1月1日0时0分0秒起流逝的秒数。</p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/date/date-man.png" alt=""></p>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>date [OPTION]... [+FORMAT]</code><br><code>date [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]</code></p>
<h2 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h2><p>表1: 命令参数</p>
<table>
<thead>
<tr>
<th style="text-align:left">参 数</th>
<th style="text-align:left">描 述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-d</td>
<td style="text-align:left">显示字符串描述的时间</td>
</tr>
<tr>
<td style="text-align:left">-f</td>
<td style="text-align:left">显示DATEFILE文件中的每行时间</td>
</tr>
<tr>
<td style="text-align:left">-r</td>
<td style="text-align:left">显示文件的最后修改时间</td>
</tr>
<tr>
<td style="text-align:left">-R</td>
<td style="text-align:left">以RFC-2822兼容日期格式显示时间</td>
</tr>
<tr>
<td style="text-align:left">-rfc-2822</td>
<td style="text-align:left">以RFC-2822兼容日期格式显示时间</td>
</tr>
<tr>
<td style="text-align:left">-s</td>
<td style="text-align:left">根据字符串来设置日期与时间</td>
</tr>
<tr>
<td style="text-align:left">-u</td>
<td style="text-align:left">显示或设定为Coordinated Universal Time时间格式（UTC）</td>
</tr>
<tr>
<td style="text-align:left">–help</td>
<td style="text-align:left">显示date命令的帮助信息</td>
</tr>
<tr>
<td style="text-align:left">–version</td>
<td style="text-align:left">显示date命令的版本信息</td>
</tr>
</tbody>
</table>
<p>表2: Format参数格式</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">%%</td>
<td style="text-align:left">显示字符%</td>
</tr>
<tr>
<td style="text-align:left">%a</td>
<td style="text-align:left">星期几的缩写(Sun..Sat)</td>
</tr>
<tr>
<td style="text-align:left">%A</td>
<td style="text-align:left">星期几的完整名称（Sunday…Saturday）</td>
</tr>
<tr>
<td style="text-align:left">%b</td>
<td style="text-align:left">月份的缩写(Jan..Dec)</td>
</tr>
<tr>
<td style="text-align:left">%B</td>
<td style="text-align:left">月份的完整名称(January..December)</td>
</tr>
<tr>
<td style="text-align:left">%c</td>
<td style="text-align:left">日期与时间。只输入date指令也会显示同样的结果</td>
</tr>
<tr>
<td style="text-align:left">%C</td>
<td style="text-align:left">世纪(年份除100后去整) [00-99]</td>
</tr>
<tr>
<td style="text-align:left">%d</td>
<td style="text-align:left">日期(以01-31来表示)。</td>
</tr>
<tr>
<td style="text-align:left">%D</td>
<td style="text-align:left">日期(含年月日)。</td>
</tr>
<tr>
<td style="text-align:left">%e</td>
<td style="text-align:left">一个月的第几天 ( 1..31)</td>
</tr>
<tr>
<td style="text-align:left">%F</td>
<td style="text-align:left">日期，同%Y-%m-%d</td>
</tr>
<tr>
<td style="text-align:left">%g</td>
<td style="text-align:left">年份(yy)</td>
</tr>
<tr>
<td style="text-align:left">%G</td>
<td style="text-align:left">年份(yyyy)</td>
</tr>
<tr>
<td style="text-align:left">%h</td>
<td style="text-align:left">同%b</td>
</tr>
<tr>
<td style="text-align:left">%H</td>
<td style="text-align:left">小时(00..23)</td>
</tr>
<tr>
<td style="text-align:left">%I</td>
<td style="text-align:left">小时(01..12)</td>
</tr>
<tr>
<td style="text-align:left">%j</td>
<td style="text-align:left">一年的第几天(001..366)</td>
</tr>
<tr>
<td style="text-align:left">%k</td>
<td style="text-align:left">小时( 0..23)</td>
</tr>
<tr>
<td style="text-align:left">%l</td>
<td style="text-align:left">小时( 1..12)</td>
</tr>
<tr>
<td style="text-align:left">%m</td>
<td style="text-align:left">月份(01..12)</td>
</tr>
<tr>
<td style="text-align:left">%M</td>
<td style="text-align:left">分钟(00..59)</td>
</tr>
<tr>
<td style="text-align:left">%n</td>
<td style="text-align:left">换行</td>
</tr>
<tr>
<td style="text-align:left">%N</td>
<td style="text-align:left">纳秒(000000000..999999999)</td>
</tr>
<tr>
<td style="text-align:left">%p</td>
<td style="text-align:left">AM or PM</td>
</tr>
<tr>
<td style="text-align:left">%P</td>
<td style="text-align:left">am or pm</td>
</tr>
<tr>
<td style="text-align:left">%r</td>
<td style="text-align:left">12小时制时间(hh:mm:ss [AP]M)</td>
</tr>
<tr>
<td style="text-align:left">%R</td>
<td style="text-align:left">24小时制时间(hh:mm)</td>
</tr>
<tr>
<td style="text-align:left">%s</td>
<td style="text-align:left">从00:00:00 1970-01-01 UTC开始的秒数</td>
</tr>
<tr>
<td style="text-align:left">%S</td>
<td style="text-align:left">秒(00..60)</td>
</tr>
<tr>
<td style="text-align:left">%t</td>
<td style="text-align:left">制表符</td>
</tr>
<tr>
<td style="text-align:left">%T</td>
<td style="text-align:left">24小时制时间(hh:mm:ss)</td>
</tr>
<tr>
<td style="text-align:left">%u</td>
<td style="text-align:left">一周的第几天(1..7); 1 表示星期一</td>
</tr>
<tr>
<td style="text-align:left">%U</td>
<td style="text-align:left">一年的第几周，周日为每周的第一天(00..53)</td>
</tr>
<tr>
<td style="text-align:left">%V</td>
<td style="text-align:left">一年的第几周，周一为每周的第一天 (01..53)</td>
</tr>
<tr>
<td style="text-align:left">%w</td>
<td style="text-align:left">一周的第几天 (0..6); 0 代表周日</td>
</tr>
<tr>
<td style="text-align:left">%W</td>
<td style="text-align:left">一年的第几周，周一为每周的第一天(00..53)</td>
</tr>
<tr>
<td style="text-align:left">%x</td>
<td style="text-align:left">日期(mm/dd/yy)</td>
</tr>
<tr>
<td style="text-align:left">%X</td>
<td style="text-align:left">时间(%H:%M:%S)</td>
</tr>
<tr>
<td style="text-align:left">%y</td>
<td style="text-align:left">年份(00..99)</td>
</tr>
<tr>
<td style="text-align:left">%Y</td>
<td style="text-align:left">年份 (1970…)</td>
</tr>
<tr>
<td style="text-align:left">%z</td>
<td style="text-align:left">RFC-2822 风格数字格式时区(-0500)</td>
</tr>
<tr>
<td style="text-align:left">%:z</td>
<td style="text-align:left">以 +hh:mm 的数字格式表示时区 （如： -04:00）</td>
</tr>
<tr>
<td style="text-align:left">%::z</td>
<td style="text-align:left">以 +hh:mm:ss 的数字格式表示时区 （如： -04:00:00）</td>
</tr>
<tr>
<td style="text-align:left">%:::z</td>
<td style="text-align:left">以数字格式表示时区， 其中 : 的个数由你需要的精度来决定 （例如， -04， +05:30）</td>
</tr>
<tr>
<td style="text-align:left">%Z</td>
<td style="text-align:left">时区(e.g., EDT), 无法确定时区则为空</td>
</tr>
</tbody>
</table>
<h2 id="命令实例"><a href="#命令实例" class="headerlink" title="命令实例"></a>命令实例</h2><h3 id="显示UTC时间"><a href="#显示UTC时间" class="headerlink" title="显示UTC时间"></a><strong>显示UTC时间</strong></h3><p>描述：显示当前时间。<br>命令：<br><code>date</code><br><code>date -d now</code><br>描述：显示当前UTC时间，UTC意思是世界上最主要的时钟和时间的标准。<br>命令：<code>date -u</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/date/date-u-r.png" alt=""></p>
<h3 id="查找3周后的日期"><a href="#查找3周后的日期" class="headerlink" title="查找3周后的日期"></a><strong>查找3周后的日期</strong></h3><p>命令：<code>date -d &quot;3 weeks&quot;</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/date/date-after-three-weeks.png" alt=""></p>
<h3 id="查找3周又4天后的日期"><a href="#查找3周又4天后的日期" class="headerlink" title="查找3周又4天后的日期"></a><strong>查找3周又4天后的日期</strong></h3><p>命令：<code>date -d &quot;3 weeks 4 days&quot;</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/date/date-after-three-weeks-four-days.png" alt=""></p>
<h3 id="获取下个月的日期"><a href="#获取下个月的日期" class="headerlink" title="获取下个月的日期"></a><strong>获取下个月的日期</strong></h3><p>命令：<code>date -d &quot;next month&quot;</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/date/date-after-one-month.png" alt=""></p>
<h3 id="获取上个星期天的日期"><a href="#获取上个星期天的日期" class="headerlink" title="获取上个星期天的日期"></a><strong>获取上个星期天的日期</strong></h3><p>命令：<code>date -d &quot;last sunday&quot;</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/date/date-last-sunday.png" alt=""></p>
<h3 id="自定义日期格式"><a href="#自定义日期格式" class="headerlink" title="自定义日期格式"></a><strong>自定义日期格式</strong></h3><p>描述：要自定义日期格式，使用加号+。<br>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">date +&quot;%Y-%m-%d %H:%M:%S&quot;</span><br><span class="line">date +&quot;%Y-%m-%d %H:%M:%S&quot; -d &quot;-1day&quot;</span><br><span class="line">date +&quot;%Y-%m-%d %H:%M:%S&quot; -d &quot;+2day&quot;</span><br><span class="line">date +&quot;%Y-%m-%d %H:%M:%S&quot; -d &quot;+3hour&quot;</span><br><span class="line">date +&quot;%Y-%m-%d %H:%M:%S&quot; -d &quot;+30minute&quot;</span><br><span class="line">date +&quot;%Y-%m-%d %H:%M:%S&quot; -d &quot;+300second&quot;</span><br></pre></td></tr></table></figure></p>
<p>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/date/date-d.png" alt=""><br>说明：date命令会翻译所有的百分号（%）开头的格式和输出在引号(“”)内所有的内容。</p>
<h3 id="以yyyy-mm-dd的格式显示日期"><a href="#以yyyy-mm-dd的格式显示日期" class="headerlink" title="以yyyy-mm-dd的格式显示日期"></a><strong>以yyyy-mm-dd的格式显示日期</strong></h3><p>描述：%F的格式是yyyy-mm-dd，即%Y-%m-%d。<br>命令：<code>date +%F</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/date/date-F.png" alt=""></p>
<h3 id="只显示时间"><a href="#只显示时间" class="headerlink" title="只显示时间"></a><strong>只显示时间</strong></h3><p>描述：%T格式是 时:分:秒 的格式，即%H:%M:%S。<br>命令：<code>date +%T</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/date/date-T.png" alt=""></p>
<h3 id="显示今天是一年中的第几天"><a href="#显示今天是一年中的第几天" class="headerlink" title="显示今天是一年中的第几天"></a><strong>显示今天是一年中的第几天</strong></h3><p>命令：<code>date +%j</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/date/date-j.png" alt=""></p>
<h3 id="显示文件最后修改的时间"><a href="#显示文件最后修改的时间" class="headerlink" title="显示文件最后修改的时间"></a><strong>显示文件最后修改的时间</strong></h3><p>命令：<code>date -r date.txt</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/date/date-r.png" alt=""></p>
<h3 id="显示文件中的时间"><a href="#显示文件中的时间" class="headerlink" title="显示文件中的时间"></a><strong>显示文件中的时间</strong></h3><p>描述：-f选项可以显示每行一个日期的文件。<br>命令：<code>date -f date.txt</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/date/date-file.png" alt=""></p>
<h3 id="设置系统时间"><a href="#设置系统时间" class="headerlink" title="设置系统时间"></a><strong>设置系统时间</strong></h3><p>描述：使用-s或–set来设置系统日期和时间。注意，必须拥有root特权，否则会出错。<br>命令：<br><code>date -s &quot;2017-06-19 00:00:00&quot;</code><br><code>date --set=&quot;2017-06-19 00:00:00&quot;</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/date/date-s.png" alt=""><br><img src="http://p9xqnn501.bkt.clouddn.com/date/date-cannot-set.png" alt=""></p>
<h3 id="打包时以时间命名"><a href="#打包时以时间命名" class="headerlink" title="打包时以时间命名"></a><strong>打包时以时间命名</strong></h3><p>描述：压缩目录/etc到当前目录，文件名为etc-2018-06-19.tar.gz。通过在`之间`或$()中内嵌命令。<br>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># tar czvf etc-$(date +%F).tar.gz /etc</span><br><span class="line">或者</span><br><span class="line"># tar czvf etc-`date +%F`.tar.gz /etc</span><br></pre></td></tr></table></figure></p>
<h3 id="在脚本中使用date命令"><a href="#在脚本中使用date命令" class="headerlink" title="在脚本中使用date命令"></a><strong>在脚本中使用date命令</strong></h3><p>命令：<br><code>date +&quot;DATE: %A %b-%d-%Y TIME: %T WEEK NUMBER: %W&quot;</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/date/date-script.png" alt=""></p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-cut.html</loc>
    <lastmod>2018-06-28T15:01:13.198Z</lastmod>
    <data>
        <display>
        <title>Linux cut命令用法详解</title>
        <pubTime>2018-06-13T00:12:02.000Z</pubTime>   
         <content><p>cut命令用来从标准输入或文本文件中剪切列或域。</p>
<a id="more"></a>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>cut命令用来显示行中的指定部分，删除文件中指定字段。它也可以用于按字节位置、字符和分隔符来剪切部分行。也可以从CSV等文件格式中剪切数据。</p>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>cut [选项] 文件1 文件2</code></p>
<h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- -b：仅显示行中指定直接范围的内容。</span><br><span class="line">- -c：仅显示行中指定范围的字符。</span><br><span class="line">- -d：指定字段的分隔符，默认的字段分隔符为“TAB”。</span><br><span class="line">- -f：显示指定字段的内容。</span><br><span class="line">- -n：与“-b”选项连用，不分割多字节字符。</span><br><span class="line">- --complement：补足被选择的字节、字符或字段。</span><br><span class="line">- --out-delimiter=&lt;字段分隔符&gt;：指定输出内容是的字段分割符。</span><br><span class="line">- --help：显示指令的帮助信息。</span><br><span class="line">- --version：显示指令的版本信息。</span><br></pre></td></tr></table></figure>
<h2 id="实用示例"><a href="#实用示例" class="headerlink" title="实用示例"></a>实用示例</h2><p>cut命令可以将一串字符作为列来显示：</p>
<ul>
<li>N-：从第N个字节、字符、字段到结尾。</li>
<li>N-M：从第N个字节、字符、字段到第M个（包括M在内）字节、字符、字段。</li>
<li>-M：从第1个字节、字符、字段到第M个（包括M在内）字节、字符、字段。</li>
</ul>
<p>上面是表示法，下面的选项分别表示字节、字符、字段：</p>
<ul>
<li>-b：字节</li>
<li>-c：字符</li>
<li>-f：字段</li>
</ul>
<p><strong>实例：1. 按字节位置切割</strong><br>描述：三个例子切割的分别是（1）第2个、（2）第1和第2个、（3）第2和第3个、（4）第1和第2个、（5）第1和第3个字节位置的内容。-b选项通过指定一个字节位置来切出一行的一部分。<br>命令：<br><code>echo &#39;baz&#39; | cut -b 2</code><br><code>echo &#39;baz&#39; | cut -b -2</code><br><code>echo &#39;baz&#39; | cut -b 2-</code><br><code>echo &#39;baz&#39; | cut -b 1-2</code><br><code>echo &#39;baz&#39; | cut -b 1,3</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/cut/cut-b.png" alt=""></p>
<p><strong>实例：2. 按字符位置切割</strong><br>描述：两个例子切割的分别是第1个和第6个、第1至3个字符位置的内容。-c选项通过指定一个字符位置来切出一行的一部分。<br>命令：<br><code>echo &#39;♣foobar&#39; | cut -c 1,6</code><br><code>echo &#39;♣foobar&#39; | cut -c 1-4</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/cut/cut-c.png" alt=""></p>
<p><strong>实例：3. 根据分隔符进行剪切</strong><br>描述：两个例子以逗号,作为分隔符进行切割，切割的分别是第1个、第1和第4个字段位置的内容。-d选项指定一个分隔符，-f选项指定选取的字段。<br>命令：<br><code>cut -d , -f 1 names.csv</code><br><code>cut -d , -f 1,4 names.csv</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/cut/cut-d-f.png" alt=""></p>
<p><strong>实例：4. 提取指定字段之外的列</strong><br>描述：第一个例子选取第1个字符之外的其他字符，第二个例子选取第2个字段之外的列。–complement用于提取指定字段之外的字节、字符或列。<br>命令：<br><code>echo &#39;foo&#39; | cut --complement -c 1</code><br><code>cut -f2 -d, --complement names.csv</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/cut/cut-complement.png" alt=""></p>
<p><strong>实例：5. 输出分隔符</strong><br>描述：选取第1、3、4个字段，并用空格替换分号后显示。或者使用$’\n’的形式替换为换行。<br>命令：<br><code>echo &#39;how;now;brown;cow&#39; | cut -d &#39;;&#39; -f 1,3,4 --output-delimiter &#39; &#39;</code><br><code>echo &#39;how;now;brown;cow&#39; | cut -d &#39;;&#39; -f 1,3,4 --output-delimiter $&#39;\n&#39;</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/cut/cut-output-delimiter.png" alt=""></p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-cd.html</loc>
    <lastmod>2018-06-28T15:01:13.197Z</lastmod>
    <data>
        <display>
        <title>Linux cd命令用法详解</title>
        <pubTime>2018-06-19T01:36:54.000Z</pubTime>   
         <content><p>cd命令用来切换工作目录。</p>
<a id="more"></a>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>cd [选项] 目录</code></p>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>cd命令（change directory）用来切换工作目录。其中目录可以表示为绝对路径或相对路径，若目录名称省略，则变换至使用者的home directory（登录时所在的目录）。使用者只能访问自己的目录或者其余指定目录。通常与pwd命令一同使用，pwd命令获取当前目录路径并打印出来。</p>
<p>表: 特殊目录</p>
<table>
<thead>
<tr>
<th style="text-align:left">特殊目录</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">.</td>
<td style="text-align:left">代表此层目录</td>
</tr>
<tr>
<td style="text-align:left">..</td>
<td style="text-align:left">代表上一层目录</td>
</tr>
<tr>
<td style="text-align:left">-</td>
<td style="text-align:left">代表前一个工作目录</td>
</tr>
<tr>
<td style="text-align:left">~</td>
<td style="text-align:left">代表“目前使用者身份”所在的主文件</td>
</tr>
<tr>
<td style="text-align:left">~account</td>
<td style="text-align:left">代表account这个使用者的主文件夹（account是个账号名称）</td>
</tr>
</tbody>
</table>
<h2 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h2><ul>
<li>-p 如果要切换到的目标目录是一个符号连接，直接切换到符号连接指向的目标目录。</li>
<li>-L 如果要切换的目标目录是一个符号的连接，直接切换到字符连接名代表的目录，而非符号连接所指向的目标目录。</li>
<li>- 只有 - 一个选项时，当前工作目录将被切换到环境变量”OLDPWD”所表示的目录。</li>
</ul>
<h2 id="命令实例"><a href="#命令实例" class="headerlink" title="命令实例"></a>命令实例</h2><h3 id="切换到当前目录的上一级目录"><a href="#切换到当前目录的上一级目录" class="headerlink" title="切换到当前目录的上一级目录"></a><strong>切换到当前目录的上一级目录</strong></h3><p>命令：<code>cd ..</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/cd/cd-previous.png" alt=""></p>
<h3 id="切换到当前目录的上上两层目录"><a href="#切换到当前目录的上上两层目录" class="headerlink" title="切换到当前目录的上上两层目录"></a><strong>切换到当前目录的上上两层目录</strong></h3><p>命令：<code>cd ../..</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/cd/cd-previous-previous.png" alt=""></p>
<h3 id="切换到当前目录的上一级目录-1"><a href="#切换到当前目录的上一级目录-1" class="headerlink" title="切换到当前目录的上一级目录"></a><strong>切换到当前目录的上一级目录</strong></h3><p>命令：<code>cd ~</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/cd/cd-home.png" alt=""></p>
<h3 id="切换到根目录"><a href="#切换到根目录" class="headerlink" title="切换到根目录"></a><strong>切换到根目录</strong></h3><p>命令：<code>cd /</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/cd/cd-root.png" alt=""></p>
<h3 id="切换到某个目录"><a href="#切换到某个目录" class="headerlink" title="切换到某个目录"></a><strong>切换到某个目录</strong></h3><p>命令：<code>cd /etc/security</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/cd/cd-specific.png" alt=""></p>
<h3 id="返回进入当前目录前所在目录"><a href="#返回进入当前目录前所在目录" class="headerlink" title="返回进入当前目录前所在目录"></a><strong>返回进入当前目录前所在目录</strong></h3><p>命令：<code>cd /etc/security</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/cd/cd-just-now.png" alt=""></p>
<h3 id="把上个命令的参数用作cd命令的参数"><a href="#把上个命令的参数用作cd命令的参数" class="headerlink" title="把上个命令的参数用作cd命令的参数"></a><strong>把上个命令的参数用作cd命令的参数</strong></h3><p>命令：<code>cd !$</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/cd/cd-last-command.png" alt=""></p>
<h3 id="切换到名字带有空格的目录"><a href="#切换到名字带有空格的目录" class="headerlink" title="切换到名字带有空格的目录"></a><strong>切换到名字带有空格的目录</strong></h3><p>命令：<code>cd iweeek\ config/</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/cd/cd-space.png" alt=""></p>
<h3 id="切换到某个目录并且打印列表"><a href="#切换到某个目录并且打印列表" class="headerlink" title="切换到某个目录并且打印列表"></a><strong>切换到某个目录并且打印列表</strong></h3><p>命令：<code>cd /home/nijun/ &amp;&amp; ls;</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/cd/cd-pipe.png" alt=""></p>
<h3 id="保存当前工作目录至内存"><a href="#保存当前工作目录至内存" class="headerlink" title="保存当前工作目录至内存"></a><strong>保存当前工作目录至内存</strong></h3><p>描述：保存当前目录到内存，然后切换到要求的目录。一旦popd被执行，它会从内存取出保存的目录位置，作为当前目录。<br>命令：<br><code>cd /home/nijun/sed</code><br><code>popd</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/cd/cd-pushd-popd.png" alt=""><br>说明：pushd和popd是Linux bash命令，也是其他几个能够保存当前工作目录位置至内存，并且从内存读取目录作为当前目录的脚本，这些脚本也可以切换目录。</p>
<h3 id="切换到某个字符串开头的目录"><a href="#切换到某个字符串开头的目录" class="headerlink" title="切换到某个字符串开头的目录"></a><strong>切换到某个字符串开头的目录</strong></h3><p>描述：如果目录中只有一个以s开头的目录，就会直接移动security目录中。如果有很多目录以s开头，而且命令行没有提供更多的标准，这将会移动到第一个以s开头的命令（以标准字典的顺序）。<br>命令：<br><code>cd /etc/s*</code><br><code>cd /etc/securi*</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/cd/cd-asterisk.png" alt=""></p>
<p>命令：<code>cd /etc/p?</code><br>输出：<br><img src="http://p9xqnn501.bkt.clouddn.com/cd/cd-question.png" alt=""></p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/daily-command-cat.html</loc>
    <lastmod>2018-06-28T15:01:13.197Z</lastmod>
    <data>
        <display>
        <title>Linux cat命令用法详解</title>
        <pubTime>2018-06-10T15:58:31.000Z</pubTime>   
         <content><p>cat命令可以创建单个或多个文件，查看文件的内容和控制字符，连接文件以及在终端或文件中重定向输出。</p>
<a id="more"></a>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>cat [选项] [文件]</code></p>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>cat（concatenate）命令可以创建单个或多个文件，查看文件的内容和控制字符，连接文件以及在终端或文件中重定向输出。<br>cat命令不会在文件分页处停下来，而是一下子显示完整整个文件。如果希望每次显示一页，可以使用more命令或把cat命令的输出通过管道传递到另外一个具有分页功能的命令中。</p>
<h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><ul>
<li>-n或-number：显示行号。</li>
<li>-b或–number-nonblank：和-n相似，只不过对于空白行不编号。</li>
<li>-s或–squeeze-blank：当遇到有连续两行以上的空白行，就代换为一行的空白行。</li>
<li>-A：显示不可打印字符，行尾显示$，等价于-vET。</li>
<li>-v或–show-nonprinting：使用^和M-引用，除了LFD和TAB之外。</li>
<li>-E或–show-ends：在每行结束处显示$。</li>
<li>-e：等价于”-vE”选项。</li>
<li>-T或–show-tabs 将TAB字符显示为^I。</li>
<li>-t：显示 tab 分隔符，等价于”-vT”选项。</li>
</ul>
<h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2><p><strong>实例：1. 显示文件的内容</strong><br>描述：打印passwd文件的所有内容。<br>命令：<code>cat /etc/passwd</code> </p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/cat/cat-file.png" alt=""></p>
<p><strong>实例：2. 查看终端中多个文件的内容</strong><br>描述：打印linux.txt和Find.txt两个文件的内容。<br>命令：<code>cat linux.txt Find.txt</code><br>等同于：<code>cat linux.txt; cat Find.txt;</code> </p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/cat/cat-mul-file.png" alt=""></p>
<p><strong>实例：3. 从文件中读入内容</strong><br>描述：从文件fairy中读取内容，通过cat显示到标准输出上。cat默认是加上&lt;操作符。<br>命令：<code>cat &lt; fairy</code> </p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/cat/cat-read.png" alt=""></p>
<p><strong>实例：4. 与more或less命令配合使用</strong><br>描述：输入完成后，按CTRL+D退出输入。输入的内容通过IO重定向创建文件被写入到test文件中。<br>命令：<code>cat /etc/passwd | more</code> </p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/cat/cat-more.png" alt=""></p>
<p><strong>实例：5. 显示行号</strong><br>描述：在打印的行前加上行号，从1开始。<br>命令：<code>cat -n fairy</code> </p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/cat/cat-n.png" alt=""></p>
<p><strong>实例：6. 在结尾显示<code>$</code>符号</strong><br>描述：<code>$</code>符号将出现在每行的末尾和每个空行之间，这个选项有助于压缩行数。<br>命令：<code>cat -e fairy</code> </p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/cat/cat-e.png" alt=""></p>
<p><strong>实例：7. 显示TAB分隔符</strong><br>描述：TAB空格将以^I显示。<br>命令：<code>cat -T test</code> </p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/cat/cat-T.png" alt=""></p>
<p><strong>实例：8. 通过IO重定向创建文件</strong><br>描述：输入完成后，按CTRL+D退出输入。输入的内容通过IO重定向创建文件被写入到test文件中。<br>命令：<code>cat &gt; test</code> </p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/cat/cat-to-file.png" alt=""></p>
<p><strong>实例：9. 使用重定向机制追加到文件中</strong><br>描述：将文件aa的内容追加到文件bb中。<br>命令：<code>cat aa &gt;&gt; bb</code> </p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/cat/cat-append.png" alt=""></p>
<p><strong>实例：10. 重定向多个文件到一个文件中</strong><br>描述：将文件aa和bb的内容合并输入到cc文件中。若cc不存在，则创建，若存在，则覆盖它。<br>命令：<code>cat aa bb &gt; cc</code> </p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/cat/cat-merge.png" alt=""></p>
<p><strong>实例：11. 重定向多个文件到一个文件中并排序</strong><br>描述：将文件aa，bb和cc的内容合并，通过管道并排序后输入到dd文件中。若dd不存在，则创建，若存在，则覆盖它。<br>命令：<code>cat aa bb cc | sort &gt; dd</code> </p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/cat/cat-merge-and-sort.png" alt=""></p>
<p><strong>实例：12. 在/home/$USER/iweeek创建一个文件并填入内容</strong><br>描述：在/home/$USER/Desktop创建一个文件（例如 test）并填入以下内容。要求创建，编辑，输入内容这些操作一步完成。<br>命令：<code>cat &lt;&lt; EOF &gt; /home/$USER/iweeek/test</code> </p>
<p><img src="http://p9xqnn501.bkt.clouddn.com/cat/cat-redirection.png" alt=""></p>
</content>   
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://www.oxysun.cn/linux/5-ways-to-empty-or-delete-a-large-file-content-in-linux.html</loc>
    <lastmod>2018-06-28T15:01:13.196Z</lastmod>
    <data>
        <display>
        <title>Linux清空文件内容最便捷的5种方法</title>
        <pubTime>2018-05-15T23:06:04.000Z</pubTime>   
         <content><p>我们在处理 Linux 文件的时候，如果想直接清空文件的内容而不借助 Linux 命令行编辑器去打开这些文件。那怎样才能实现这个功能呢，本文就将介绍借助一些实用的命令来清空文件内容的方法。</p>
<p>值得注意的是：在 Linux 中，一切都是文件。所以必须始终确保你正在清空的文件不是重要的用户文件或系统文件。意外清空了系统文件或配置文件可能会导致严重的应用失败或系统错误。</p>
<a id="more"></a>
<blockquote>
<p>本文使用<code>access.log</code>作为示例样本。</p>
</blockquote>
<h1 id="1、-通过-shell-重定向到-null"><a href="#1、-通过-shell-重定向到-null" class="headerlink" title="1、 通过 shell 重定向到 null"></a>1、 通过 shell 重定向到 null</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> &gt; access.log</span><br></pre></td></tr></table></figure>
<h1 id="2、-使用-true-命令重定向"><a href="#2、-使用-true-命令重定向" class="headerlink" title="2、 使用 true 命令重定向"></a>2、 使用 <code>true</code> 命令重定向</h1><p><code>:</code>是一个 shell 内建的命令，等同于 <code>true</code>命令，相当于 no-op （即没有进行操作）</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> : &gt; access.log</span><br><span class="line">OR</span><br><span class="line"><span class="meta">#</span> true &gt; access.log</span><br></pre></td></tr></table></figure>
<h1 id="3、-使用-cat-cp-dd-工具及-dev-null-设备来清空文件"><a href="#3、-使用-cat-cp-dd-工具及-dev-null-设备来清空文件" class="headerlink" title="3、 使用 cat/cp/dd 工具及 /dev/null 设备来清空文件"></a>3、 使用 <code>cat</code>/<code>cp</code>/<code>dd</code> 工具及 <code>/dev/null</code> 设备来清空文件</h1><p>在 Linux 中，null 设备常被用来丢弃某个进程不再需要的输出流，或者作为某个输入流的空白文件。这些通常利用重定向机制来达到。<br>因此 /dev/null 设备是一个特殊的文件，它将清空所有送到这里的输入，而它的输出则可以看作是一个空文件。<br>你可以使用 cat 命令显示 /dev/null 设备的内容然后重定向到某个文件，以达到清空某个文件的目的。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> cat /dev/null &gt; access.log</span><br></pre></td></tr></table></figure>
<p>另外，可以使用 cp 命令把 /dev/null 设备的内容复制到文件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> cp /dev/null access.log</span><br></pre></td></tr></table></figure>
<p>dd 命令主要用来转换和复制文件，下面的命令中，<code>if</code> 表示输入文件，<code>of</code> 表示输出文件。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> dd if=/dev/null of=access.log</span><br></pre></td></tr></table></figure>
<h1 id="4、-使用-echo-命令清空文件"><a href="#4、-使用-echo-命令清空文件" class="headerlink" title="4、 使用 echo 命令清空文件"></a>4、 使用 <code>echo</code> 命令清空文件</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> echo "" &gt; access.log</span><br><span class="line">OR</span><br><span class="line"><span class="meta">#</span> echo &gt; access.log</span><br></pre></td></tr></table></figure>
<p>需要注意是，空字符串并等同于 null。一个字符串是一个具体的事物，只不过它的内容是空的。而 null 则意味着这个事物不存在。<br>基于这个原因，当你将 echo命令 的输出作为输入重定向到文件后，使用 cat命令 来查看该文件的时候，你将看到一个空白行（即一个空字符串）。<br>要将 null 作为输出输入到文件中，你应该使用 -n 选项，这个选项告诉 echo命令 不再像上面那个命令一样输出结尾的那个新行。</p>
<h1 id="5、-使用-truncate-命令清空文件"><a href="#5、-使用-truncate-命令清空文件" class="headerlink" title="5、 使用 truncate 命令清空文件"></a>5、 使用 <code>truncate</code> 命令清空文件</h1><p>truncate命令 可用来 将一个文件缩小或者扩大到指定的大小。<br>可以用 <code>-s</code>/<code>-size</code> 选项来指定文件的大小</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> truncate -s 0 access.log</span><br></pre></td></tr></table></figure>
<p>以上就是几种通过简单的命令行工具和重定向机制来达到清空文件的方法。</p>
</content>   
        </display>
    </data>
    </url>

    
    
    
    
    
    
    
    
    
    
  <url>
    <loc>http://www.oxysun.cn/drafts/iframe.html</loc>
    <lastmod>2018-06-16T08:07:35.992Z</lastmod>
    <data>
        <display>
        <title>hexo-theme-melody v1.5 supports slides & iframe</title>
        <pubTime>2018-03-06T11:57:52.000Z</pubTime>   
         <content><h2 id="hexo-theme-melody-v1-5"><a href="#hexo-theme-melody-v1-5" class="headerlink" title="hexo-theme-melody v1.5"></a>hexo-theme-melody <small>v1.5</small></h2><!-- .slide: data-background="#49B1F5" -->
<p>Supports iframe &amp; slides. You can use a layout called <code>slides</code> to enabled the slides layout.</p>
<p>Also you can add a <code>iframe</code> front-matter with the <code>slides</code> layout in your <code>md</code> file to enable the iframe page.</p>
<p>===</p>
<h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h2><!-- .slide: data-transition="concave" data-background="#C7916B" -->
<h3 id="1-Add-a-slides-page"><a href="#1-Add-a-slides-page" class="headerlink" title="1. Add a slides page"></a>1. Add a slides page</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new page slides</span><br><span class="line"><span class="built_in">cd</span> ./<span class="built_in">source</span>/slides</span><br></pre></td></tr></table></figure>
<p>===</p>
<h3 id="2-Add-the-layout-type"><a href="#2-Add-the-layout-type" class="headerlink" title="2. Add the layout type"></a>2. Add the layout type</h3><!-- .slide: data-transition="fade" data-background="#00C4B6" -->
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim index.md</span><br></pre></td></tr></table></figure>
<p>Add a type called <code>slides</code>：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">slides</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-03</span><span class="bullet">-06</span> <span class="number">20</span><span class="string">:24:48</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">slides</span></span><br></pre></td></tr></table></figure>
<p>===</p>
<h3 id="3-Modified-the-melody-yml"><a href="#3-Modified-the-melody-yml" class="headerlink" title="3. Modified the melody.yml"></a>3. Modified the melody.yml</h3><!-- .slide: data-transition="convex" data-background="#1B9EF3" -->
<p>Add slides default config:</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">slide:</span></span><br><span class="line"><span class="attr">  separator:</span> <span class="string">whatever</span> <span class="string">you</span> <span class="string">like</span></span><br><span class="line"><span class="attr">  separator_vertical:</span> <span class="string">whatever</span> <span class="string">you</span> <span class="string">like</span></span><br><span class="line"><span class="attr">  charset:</span> <span class="string">utf-8</span></span><br><span class="line"><span class="attr">  theme:</span> <span class="string">black</span></span><br><span class="line"><span class="attr">  mouseWheel:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  transition:</span> <span class="string">slide</span></span><br><span class="line"><span class="attr">  transitionSpeed:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">  parallaxBackgroundImage:</span> <span class="string">''</span></span><br><span class="line"><span class="attr">  parallaxBackgroundSize:</span> <span class="string">''</span></span><br><span class="line"><span class="attr">  parallaxBackgroundHorizontal:</span> <span class="literal">null</span></span><br><span class="line"><span class="attr">  parallaxBackgroundVertical:</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>See reveal.js <a href="https://github.com/hakimel/reveal.js#configuration" target="_blank" rel="noopener">config</a></p>
</blockquote>
<p>===</p>
<h3 id="4-Write-a-md-file-with-slides-layout"><a href="#4-Write-a-md-file-with-slides-layout" class="headerlink" title="4. Write a md file with slides layout"></a>4. Write a md file with slides layout</h3><!-- .slide: data-transition="zoom" data-background="#F47466" -->
<p>In <code>_posts</code> folder, add a <code>md</code> file.</p>
<p>For example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: hexo-theme-melody v1.5 supports iframe &amp; slides</span><br><span class="line">date: 2018-03-06 19:57:52</span><br><span class="line">layout: slides</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">// balalala...</span><br></pre></td></tr></table></figure>
<p>Then you will get a post of slides type.</p>
<p>===</p>
<h2 id="Slides-layout-with-iframe"><a href="#Slides-layout-with-iframe" class="headerlink" title="Slides layout with iframe"></a>Slides layout with iframe</h2><p>If you want to add a website whatever you like within an iframe, try this:</p>
<p>In <code>_posts</code> folder, add a <code>md</code> file.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: hexo-theme-melody v1.5 supports iframe &amp; slides</span><br><span class="line">date: 2018-03-06 19:57:52</span><br><span class="line">layout: slides</span><br><span class="line">iframe: https://the-url-whatever-you-like</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>Then you will get a post of iframe.</p>
<p>===</p>
<h2 id="Configurate-single-slides-in-md"><a href="#Configurate-single-slides-in-md" class="headerlink" title="Configurate single slides in md"></a>Configurate single slides in md</h2><!-- .slide: data-transition="convex" data-background="#69C282" -->
<p>The slides config in <code>meldoy.yml</code> can change whole slides page.</p>
<p>But if you set the config in the md file, it will effect the single page.</p>
<p>==</p>
<p>For example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">title: hexo-theme-melody v1.5 supports iframe &amp; slides</span><br><span class="line">date: 2018-03-06 19:57:52</span><br><span class="line">layout: slides</span><br><span class="line">slide:</span><br><span class="line">  theme: white</span><br><span class="line">  transition: zoom</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">// balalala...</span><br></pre></td></tr></table></figure>
<p>===</p>
<h1 id="Enjoy"><a href="#Enjoy" class="headerlink" title="Enjoy!"></a>Enjoy!</h1><!-- .slide: data-background="#49B1F5" -->
</content>   
        </display>
    </data>
    </url>

    
    
    
    
    
    
</urlset>  


 